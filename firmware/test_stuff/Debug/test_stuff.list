
test_stuff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009064  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  08009248  08009248  00019248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ac4  08009ac4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009ac4  08009ac4  00019ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009acc  08009acc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009acc  08009acc  00019acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ad0  08009ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  20000090  08009b64  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  08009b64  00020848  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9c8  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000411b  00000000  00000000  0003ca81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001170  00000000  00000000  00040ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  00041d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021353  00000000  00000000  00042cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b4d  00000000  00000000  0006400b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a1a84  00000000  00000000  00075b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001175dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d84  00000000  00000000  00117658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000090 	.word	0x20000090
 8000200:	00000000 	.word	0x00000000
 8000204:	08009230 	.word	0x08009230

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000094 	.word	0x20000094
 8000220:	08009230 	.word	0x08009230

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800052e:	f000 fcc1 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f84d 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f95d 	bl	80007f4 <MX_GPIO_Init>
  MX_RTC_Init();
 800053a:	f000 f8b1 	bl	80006a0 <MX_RTC_Init>
  MX_SPI3_Init();
 800053e:	f000 f8f9 	bl	8000734 <MX_SPI3_Init>
  MX_UART5_Init();
 8000542:	f000 f92d 	bl	80007a0 <MX_UART5_Init>
  MX_USB_HOST_Init();
 8000546:	f007 fc67 	bl	8007e18 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  printf("Terrible Fire CD32 USB Riser... Burnination Mode = On\r\n");
 800054a:	481d      	ldr	r0, [pc, #116]	; (80005c0 <main+0x98>)
 800054c:	f008 f838 	bl	80085c0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int ready = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000554:	f007 fc86 	bl	8007e64 <MX_USB_HOST_Process>

    if (Appli_state == APPLICATION_READY)
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <main+0x9c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d1f9      	bne.n	8000554 <main+0x2c>
    {
		HID_TypeTypeDef devtype = USBH_HID_GetDeviceType(&hUsbHostFS);
 8000560:	4819      	ldr	r0, [pc, #100]	; (80005c8 <main+0xa0>)
 8000562:	f005 fd7f 	bl	8006064 <USBH_HID_GetDeviceType>
 8000566:	4603      	mov	r3, r0
 8000568:	74fb      	strb	r3, [r7, #19]

		if (devtype == HID_MOUSE)
 800056a:	7cfb      	ldrb	r3, [r7, #19]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d114      	bne.n	800059a <main+0x72>
		{
			HID_MOUSE_Info_TypeDef *mouseInfo = USBH_HID_GetMouseInfo(&hUsbHostFS);
 8000570:	4815      	ldr	r0, [pc, #84]	; (80005c8 <main+0xa0>)
 8000572:	f005 ffd1 	bl	8006518 <USBH_HID_GetMouseInfo>
 8000576:	6078      	str	r0, [r7, #4]

			if (mouseInfo != NULL)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0ea      	beq.n	8000554 <main+0x2c>
			{
				user_io_mouse(mouseInfo->buttons[0], mouseInfo->x, mouseInfo->y);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	7898      	ldrb	r0, [r3, #2]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b259      	sxtb	r1, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	785b      	ldrb	r3, [r3, #1]
 800058c:	b25b      	sxtb	r3, r3
 800058e:	461a      	mov	r2, r3
 8000590:	f000 fc34 	bl	8000dfc <user_io_mouse>
				spi_mouse_io();
 8000594:	f000 fb9a 	bl	8000ccc <spi_mouse_io>
 8000598:	e7dc      	b.n	8000554 <main+0x2c>
			}
		}
		else if (devtype == HID_KEYBOARD)
 800059a:	7cfb      	ldrb	r3, [r7, #19]
 800059c:	2b02      	cmp	r3, #2
 800059e:	d1d9      	bne.n	8000554 <main+0x2c>
		{
			HID_KEYBD_Info_TypeDef *keyInfo = USBH_HID_GetKeybdInfo(&hUsbHostFS);
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <main+0xa0>)
 80005a2:	f005 fe9f 	bl	80062e4 <USBH_HID_GetKeybdInfo>
 80005a6:	60f8      	str	r0, [r7, #12]

			if (keyInfo != NULL)
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0d2      	beq.n	8000554 <main+0x2c>
			{
				char key = (char) USBH_HID_GetASCIICode(keyInfo);
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	f005 ff3c 	bl	800642c <USBH_HID_GetASCIICode>
 80005b4:	4603      	mov	r3, r0
 80005b6:	72fb      	strb	r3, [r7, #11]
				printf("KeyPress\r\n");
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <main+0xa4>)
 80005ba:	f008 f801 	bl	80085c0 <puts>
    MX_USB_HOST_Process();
 80005be:	e7c9      	b.n	8000554 <main+0x2c>
 80005c0:	08009248 	.word	0x08009248
 80005c4:	200000bc 	.word	0x200000bc
 80005c8:	200001b0 	.word	0x200001b0
 80005cc:	08009280 	.word	0x08009280

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b09c      	sub	sp, #112	; 0x70
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005da:	2238      	movs	r2, #56	; 0x38
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f007 fecc 	bl	800837c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2220      	movs	r2, #32
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f007 febe 	bl	800837c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000600:	2309      	movs	r3, #9
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060e:	2301      	movs	r3, #1
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000612:	2301      	movs	r3, #1
 8000614:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000616:	2300      	movs	r3, #0
 8000618:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000622:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000624:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000628:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800062a:	2300      	movs	r3, #0
 800062c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fb66 	bl	8002d04 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800063e:	f000 f913 	bl	8000868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	2102      	movs	r1, #2
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fe66 	bl	8003330 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800066a:	f000 f8fd 	bl	8000868 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800066e:	2311      	movs	r3, #17
 8000670:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000676:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f003 f874 	bl	800376c <HAL_RCCEx_PeriphCLKConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800068a:	f000 f8ed 	bl	8000868 <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800068e:	4b03      	ldr	r3, [pc, #12]	; (800069c <SystemClock_Config+0xcc>)
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]
}
 8000694:	bf00      	nop
 8000696:	3770      	adds	r7, #112	; 0x70
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	42420070 	.word	0x42420070

080006a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2100      	movs	r1, #0
 80006aa:	460a      	mov	r2, r1
 80006ac:	801a      	strh	r2, [r3, #0]
 80006ae:	460a      	mov	r2, r1
 80006b0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_RTC_Init+0x8c>)
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <MX_RTC_Init+0x90>)
 80006ba:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_RTC_Init+0x8c>)
 80006be:	f04f 32ff 	mov.w	r2, #4294967295
 80006c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_RTC_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006ca:	4818      	ldr	r0, [pc, #96]	; (800072c <MX_RTC_Init+0x8c>)
 80006cc:	f003 fae4 	bl	8003c98 <HAL_RTC_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80006d6:	f000 f8c7 	bl	8000868 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80006da:	2300      	movs	r3, #0
 80006dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80006de:	2300      	movs	r3, #0
 80006e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2201      	movs	r2, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	480f      	ldr	r0, [pc, #60]	; (800072c <MX_RTC_Init+0x8c>)
 80006ee:	f003 fb69 	bl	8003dc4 <HAL_RTC_SetTime>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80006f8:	f000 f8b6 	bl	8000868 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006fc:	2301      	movs	r3, #1
 80006fe:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000700:	2301      	movs	r3, #1
 8000702:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000704:	2301      	movs	r3, #1
 8000706:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000708:	2300      	movs	r3, #0
 800070a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	2201      	movs	r2, #1
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_RTC_Init+0x8c>)
 8000714:	f003 fbee 	bl	8003ef4 <HAL_RTC_SetDate>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800071e:	f000 f8a3 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000160 	.word	0x20000160
 8000730:	40002800 	.word	0x40002800

08000734 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_SPI3_Init+0x64>)
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_SPI3_Init+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_SPI3_Init+0x64>)
 8000740:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000744:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_SPI3_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_SPI3_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_SPI3_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_SPI3_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_SPI3_Init+0x64>)
 8000760:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000764:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_SPI3_Init+0x64>)
 8000768:	2238      	movs	r2, #56	; 0x38
 800076a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_SPI3_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_SPI3_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_SPI3_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_SPI3_Init+0x64>)
 8000780:	220a      	movs	r2, #10
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_SPI3_Init+0x64>)
 8000786:	f003 fe15 	bl	80043b4 <HAL_SPI_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f86a 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000c8 	.word	0x200000c8
 800079c:	40003c00 	.word	0x40003c00

080007a0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_UART5_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_UART5_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_UART5_Init+0x4c>)
 80007ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007b0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_UART5_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_UART5_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_UART5_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_UART5_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_UART5_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_UART5_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_UART5_Init+0x4c>)
 80007d8:	f004 f809 	bl	80047ee <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f841 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000120 	.word	0x20000120
 80007f0:	40005000 	.word	0x40005000

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_GPIO_Init+0x70>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a19      	ldr	r2, [pc, #100]	; (8000864 <MX_GPIO_Init+0x70>)
 8000800:	f043 0320 	orr.w	r3, r3, #32
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_GPIO_Init+0x70>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f003 0320 	and.w	r3, r3, #32
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_GPIO_Init+0x70>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <MX_GPIO_Init+0x70>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_GPIO_Init+0x70>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_GPIO_Init+0x70>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <MX_GPIO_Init+0x70>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_GPIO_Init+0x70>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_GPIO_Init+0x70>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a07      	ldr	r2, [pc, #28]	; (8000864 <MX_GPIO_Init+0x70>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <MX_GPIO_Init+0x70>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

}
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	40021000 	.word	0x40021000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_MspInit+0x5c>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <HAL_MspInit+0x5c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_MspInit+0x5c>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x5c>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_MspInit+0x5c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_MspInit+0x5c>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_MspInit+0x60>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_MspInit+0x60>)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40010000 	.word	0x40010000

080008d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <HAL_RTC_MspInit+0x3c>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d110      	bne.n	800090c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80008ea:	f002 f9ff 	bl	8002cec <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_RTC_MspInit+0x40>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a09      	ldr	r2, [pc, #36]	; (8000918 <HAL_RTC_MspInit+0x40>)
 80008f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <HAL_RTC_MspInit+0x40>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_RTC_MspInit+0x44>)
 8000908:	2201      	movs	r2, #1
 800090a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40002800 	.word	0x40002800
 8000918:	40021000 	.word	0x40021000
 800091c:	4242043c 	.word	0x4242043c

08000920 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0318 	add.w	r3, r7, #24
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI3)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a28      	ldr	r2, [pc, #160]	; (80009dc <HAL_SPI_MspInit+0xbc>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d148      	bne.n	80009d2 <HAL_SPI_MspInit+0xb2>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000940:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <HAL_SPI_MspInit+0xc0>)
 8000942:	69db      	ldr	r3, [r3, #28]
 8000944:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <HAL_SPI_MspInit+0xc0>)
 8000946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094a:	61d3      	str	r3, [r2, #28]
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <HAL_SPI_MspInit+0xc0>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <HAL_SPI_MspInit+0xc0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <HAL_SPI_MspInit+0xc0>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <HAL_SPI_MspInit+0xc0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <HAL_SPI_MspInit+0xc0>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a1a      	ldr	r2, [pc, #104]	; (80009e0 <HAL_SPI_MspInit+0xc0>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_SPI_MspInit+0xc0>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> SPI3_NSS
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	4619      	mov	r1, r3
 800099c:	4811      	ldr	r0, [pc, #68]	; (80009e4 <HAL_SPI_MspInit+0xc4>)
 800099e:	f000 fc1b 	bl	80011d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80009a2:	2328      	movs	r3, #40	; 0x28
 80009a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	4619      	mov	r1, r3
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <HAL_SPI_MspInit+0xc8>)
 80009b6:	f000 fc0f 	bl	80011d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009ba:	2310      	movs	r3, #16
 80009bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	4619      	mov	r1, r3
 80009cc:	4806      	ldr	r0, [pc, #24]	; (80009e8 <HAL_SPI_MspInit+0xc8>)
 80009ce:	f000 fc03 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	; 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40003c00 	.word	0x40003c00
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010800 	.word	0x40010800
 80009e8:	40010c00 	.word	0x40010c00

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a22      	ldr	r2, [pc, #136]	; (8000a90 <HAL_UART_MspInit+0xa4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d13c      	bne.n	8000a86 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <HAL_UART_MspInit+0xa8>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <HAL_UART_MspInit+0xa8>)
 8000a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a16:	61d3      	str	r3, [r2, #28]
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <HAL_UART_MspInit+0xa8>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_UART_MspInit+0xa8>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <HAL_UART_MspInit+0xa8>)
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_UART_MspInit+0xa8>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0310 	and.w	r3, r3, #16
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0xa8>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <HAL_UART_MspInit+0xa8>)
 8000a42:	f043 0320 	orr.w	r3, r3, #32
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_UART_MspInit+0xa8>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0320 	and.w	r3, r3, #32
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	4619      	mov	r1, r3
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <HAL_UART_MspInit+0xac>)
 8000a6a:	f000 fbb5 	bl	80011d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7a:	f107 0318 	add.w	r3, r7, #24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <HAL_UART_MspInit+0xb0>)
 8000a82:	f000 fba9 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40005000 	.word	0x40005000
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40011000 	.word	0x40011000
 8000a9c:	40011400 	.word	0x40011400

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <MemManage_Handler+0x4>

08000ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <BusFault_Handler+0x4>

08000abe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <UsageFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 fa28 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <OTG_FS_IRQHandler+0x10>)
 8000afa:	f000 ff53 	bl	80019a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000580 	.word	0x20000580

08000b08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e00a      	b.n	8000b30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b1a:	f3af 8000 	nop.w
 8000b1e:	4601      	mov	r1, r0
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	60ba      	str	r2, [r7, #8]
 8000b26:	b2ca      	uxtb	r2, r1
 8000b28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf0      	blt.n	8000b1a <_read+0x12>
	}

return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <_write>:
#include "stm32f1xx_hal.h"

extern UART_HandleTypeDef huart5;

int _write(int file, char *data, int len)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d00a      	beq.n	8000b6c <_write+0x28>
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d007      	beq.n	8000b6c <_write+0x28>
   {
      errno = EBADF;
 8000b5c:	f007 fbf8 	bl	8008350 <__errno>
 8000b60:	4602      	mov	r2, r0
 8000b62:	2309      	movs	r3, #9
 8000b64:	6013      	str	r3, [r2, #0]
      return -1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e00f      	b.n	8000b8c <_write+0x48>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status = HAL_UART_Transmit(&huart5, (uint8_t*)data, len, 1000);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <_write+0x50>)
 8000b78:	f003 fe86 	bl	8004888 <HAL_UART_Transmit>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <_write+0x46>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	e000      	b.n	8000b8c <_write+0x48>
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000120 	.word	0x20000120

08000b98 <_close>:

int _close(int file)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	return -1;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <_isatty>:

int _isatty(int file)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	return 1;
 8000bd4:	2301      	movs	r3, #1
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
	return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_sbrk+0x50>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x16>
		heap_end = &end;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <_sbrk+0x50>)
 8000c0a:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <_sbrk+0x54>)
 8000c0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <_sbrk+0x50>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <_sbrk+0x50>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	466a      	mov	r2, sp
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d907      	bls.n	8000c32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c22:	f007 fb95 	bl	8008350 <__errno>
 8000c26:	4602      	mov	r2, r0
 8000c28:	230c      	movs	r3, #12
 8000c2a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	e006      	b.n	8000c40 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <_sbrk+0x50>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a03      	ldr	r2, [pc, #12]	; (8000c48 <_sbrk+0x50>)
 8000c3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200000ac 	.word	0x200000ac
 8000c4c:	20000848 	.word	0x20000848

08000c50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <SystemInit+0x70>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <SystemInit+0x70>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <SystemInit+0x70>)
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	4916      	ldr	r1, [pc, #88]	; (8000cc0 <SystemInit+0x70>)
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <SystemInit+0x74>)
 8000c68:	4013      	ands	r3, r2
 8000c6a:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <SystemInit+0x70>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <SystemInit+0x70>)
 8000c72:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <SystemInit+0x70>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <SystemInit+0x70>)
 8000c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c86:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <SystemInit+0x70>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <SystemInit+0x70>)
 8000c8e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c92:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <SystemInit+0x70>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <SystemInit+0x70>)
 8000c9a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8000c9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <SystemInit+0x70>)
 8000ca2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000ca6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SystemInit+0x70>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x78>)
 8000cb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb4:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	f0ff0000 	.word	0xf0ff0000
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <spi_mouse_io>:
} __attribute__((packed)) MOUSE_CMD;

extern SPI_HandleTypeDef hspi3;

void spi_mouse_io()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

	int8_t x_delta;
	int8_t y_delta;

	// ----- X axis -------
	if(mouse_pos[X] < -128)
 8000cd2:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <spi_mouse_io+0x11c>)
 8000cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd8:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8000cdc:	da0b      	bge.n	8000cf6 <spi_mouse_io+0x2a>
	{
		x_delta = -128;
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	71fb      	strb	r3, [r7, #7]
		mouse_pos[X] += 128;
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <spi_mouse_io+0x11c>)
 8000ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	3380      	adds	r3, #128	; 0x80
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <spi_mouse_io+0x11c>)
 8000cf2:	801a      	strh	r2, [r3, #0]
 8000cf4:	e017      	b.n	8000d26 <spi_mouse_io+0x5a>
	}
	else if(mouse_pos[X] > 127)
 8000cf6:	4b3c      	ldr	r3, [pc, #240]	; (8000de8 <spi_mouse_io+0x11c>)
 8000cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8000cfe:	dd0b      	ble.n	8000d18 <spi_mouse_io+0x4c>
	{
		x_delta = 127;
 8000d00:	237f      	movs	r3, #127	; 0x7f
 8000d02:	71fb      	strb	r3, [r7, #7]
		mouse_pos[X] -= 127;
 8000d04:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <spi_mouse_io+0x11c>)
 8000d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	3b7f      	subs	r3, #127	; 0x7f
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <spi_mouse_io+0x11c>)
 8000d14:	801a      	strh	r2, [r3, #0]
 8000d16:	e006      	b.n	8000d26 <spi_mouse_io+0x5a>
	}
	else
	{
		x_delta = mouse_pos[X];
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <spi_mouse_io+0x11c>)
 8000d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1e:	71fb      	strb	r3, [r7, #7]
		mouse_pos[X] = 0;
 8000d20:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <spi_mouse_io+0x11c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	801a      	strh	r2, [r3, #0]
	}

	// ----- Y axis -------
	if(mouse_pos[Y] < -128)
 8000d26:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <spi_mouse_io+0x11c>)
 8000d28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d2c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8000d30:	da0b      	bge.n	8000d4a <spi_mouse_io+0x7e>
	{
		y_delta = -128;
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	71bb      	strb	r3, [r7, #6]
		mouse_pos[Y] += 128;
 8000d36:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <spi_mouse_io+0x11c>)
 8000d38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	3380      	adds	r3, #128	; 0x80
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <spi_mouse_io+0x11c>)
 8000d46:	805a      	strh	r2, [r3, #2]
 8000d48:	e017      	b.n	8000d7a <spi_mouse_io+0xae>
	}
	else if(mouse_pos[Y] > 127)
 8000d4a:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <spi_mouse_io+0x11c>)
 8000d4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d50:	2b7f      	cmp	r3, #127	; 0x7f
 8000d52:	dd0b      	ble.n	8000d6c <spi_mouse_io+0xa0>
	{
		y_delta = 127;
 8000d54:	237f      	movs	r3, #127	; 0x7f
 8000d56:	71bb      	strb	r3, [r7, #6]
		mouse_pos[Y] -= 127;
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <spi_mouse_io+0x11c>)
 8000d5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	3b7f      	subs	r3, #127	; 0x7f
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	b21a      	sxth	r2, r3
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <spi_mouse_io+0x11c>)
 8000d68:	805a      	strh	r2, [r3, #2]
 8000d6a:	e006      	b.n	8000d7a <spi_mouse_io+0xae>
	}
	else
	{
		y_delta = mouse_pos[Y];
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <spi_mouse_io+0x11c>)
 8000d6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d72:	71bb      	strb	r3, [r7, #6]
		mouse_pos[Y] = 0;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <spi_mouse_io+0x11c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	805a      	strh	r2, [r3, #2]
	}

	joy0dat_low += y_delta;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <spi_mouse_io+0x120>)
 8000d7c:	781a      	ldrb	r2, [r3, #0]
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	4413      	add	r3, r2
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <spi_mouse_io+0x120>)
 8000d86:	701a      	strb	r2, [r3, #0]
	joy0dat_high += x_delta;
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <spi_mouse_io+0x124>)
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	4413      	add	r3, r2
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <spi_mouse_io+0x124>)
 8000d94:	701a      	strb	r2, [r3, #0]

	packet.cmd = UIO_MOUSE;
 8000d96:	2304      	movs	r3, #4
 8000d98:	703b      	strb	r3, [r7, #0]
	if (mouse_flags & 0x80)
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <spi_mouse_io+0x128>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	da06      	bge.n	8000db2 <spi_mouse_io+0xe6>
	{
		packet.flags = mouse_flags & 0x03;
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <spi_mouse_io+0x128>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	70fb      	strb	r3, [r7, #3]
 8000db0:	e001      	b.n	8000db6 <spi_mouse_io+0xea>
	}
	else
	{
		packet.flags = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	70fb      	strb	r3, [r7, #3]
	}
	packet.x = joy0dat_low;
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <spi_mouse_io+0x120>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	707b      	strb	r3, [r7, #1]
	packet.y = joy0dat_high;
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <spi_mouse_io+0x124>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	70bb      	strb	r3, [r7, #2]
	mouse_flags = 0;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <spi_mouse_io+0x128>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&packet, sizeof(MOUSE_CMD), 1000);
 8000dcc:	4639      	mov	r1, r7
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <spi_mouse_io+0x12c>)
 8000dd6:	f003 fb4e 	bl	8004476 <HAL_SPI_Transmit>
	HAL_Delay(2);
 8000dda:	2002      	movs	r0, #2
 8000ddc:	f000 f8cc 	bl	8000f78 <HAL_Delay>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200000b0 	.word	0x200000b0
 8000dec:	200000b5 	.word	0x200000b5
 8000df0:	200000b6 	.word	0x200000b6
 8000df4:	200000b4 	.word	0x200000b4
 8000df8:	200000c8 	.word	0x200000c8

08000dfc <user_io_mouse>:


void user_io_mouse(unsigned char b, int8_t x, int8_t y)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	460b      	mov	r3, r1
 8000e08:	71bb      	strb	r3, [r7, #6]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	717b      	strb	r3, [r7, #5]
	// send mouse data as minimig expects it
    mouse_pos[X] += x;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <user_io_mouse+0x68>)
 8000e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <user_io_mouse+0x68>)
 8000e24:	801a      	strh	r2, [r3, #0]
    mouse_pos[Y] += y;
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <user_io_mouse+0x68>)
 8000e28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <user_io_mouse+0x68>)
 8000e3c:	805a      	strh	r2, [r3, #2]
    mouse_flags |= 0x80 | (b&3);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <user_io_mouse+0x6c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <user_io_mouse+0x6c>)
 8000e56:	701a      	strb	r2, [r3, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200000b0 	.word	0x200000b0
 8000e68:	200000b4 	.word	0x200000b4

08000e6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e6e:	e003      	b.n	8000e78 <LoopCopyDataInit>

08000e70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8000e72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e76:	3104      	adds	r1, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e78:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8000e7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e80:	d3f6      	bcc.n	8000e70 <CopyDataInit>
  ldr r2, =_sbss
 8000e82:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8000e84:	e002      	b.n	8000e8c <LoopFillZerobss>

08000e86 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e88:	f842 3b04 	str.w	r3, [r2], #4

08000e8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <LoopFillZerobss+0x20>)
  cmp r2, r3
 8000e8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e90:	d3f9      	bcc.n	8000e86 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e92:	f7ff fedd 	bl	8000c50 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8000e96:	f7ff fb47 	bl	8000528 <main>
  bx lr
 8000e9a:	4770      	bx	lr
  ldr r3, =_sidata
 8000e9c:	08009ad4 	.word	0x08009ad4
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ea4:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 8000ea8:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8000eac:	20000848 	.word	0x20000848

08000eb0 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_2_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x28>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_Init+0x28>)
 8000ebe:	f043 0310 	orr.w	r3, r3, #16
 8000ec2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f945 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fcd0 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40022000 	.word	0x40022000

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f95d 	bl	80011be <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f925 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004

08000f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x1c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x20>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a03      	ldr	r2, [pc, #12]	; (8000f60 <HAL_IncTick+0x20>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000174 	.word	0x20000174

08000f64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b02      	ldr	r3, [pc, #8]	; (8000f74 <HAL_GetTick+0x10>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	20000174 	.word	0x20000174

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff fff0 	bl	8000f64 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_Delay+0x40>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffe0 	bl	8000f64 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000008 	.word	0x20000008

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4906      	ldr	r1, [pc, #24]	; (8001054 <__NVIC_EnableIRQ+0x34>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff90 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff2d 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff42 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff90 	bl	80010ac <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5f 	bl	8001058 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff35 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b08b      	sub	sp, #44	; 0x2c
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	e127      	b.n	800143c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011ec:	2201      	movs	r2, #1
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 8116 	bne.w	8001436 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b12      	cmp	r3, #18
 8001210:	d034      	beq.n	800127c <HAL_GPIO_Init+0xa4>
 8001212:	2b12      	cmp	r3, #18
 8001214:	d80d      	bhi.n	8001232 <HAL_GPIO_Init+0x5a>
 8001216:	2b02      	cmp	r3, #2
 8001218:	d02b      	beq.n	8001272 <HAL_GPIO_Init+0x9a>
 800121a:	2b02      	cmp	r3, #2
 800121c:	d804      	bhi.n	8001228 <HAL_GPIO_Init+0x50>
 800121e:	2b00      	cmp	r3, #0
 8001220:	d031      	beq.n	8001286 <HAL_GPIO_Init+0xae>
 8001222:	2b01      	cmp	r3, #1
 8001224:	d01c      	beq.n	8001260 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001226:	e048      	b.n	80012ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001228:	2b03      	cmp	r3, #3
 800122a:	d043      	beq.n	80012b4 <HAL_GPIO_Init+0xdc>
 800122c:	2b11      	cmp	r3, #17
 800122e:	d01b      	beq.n	8001268 <HAL_GPIO_Init+0x90>
          break;
 8001230:	e043      	b.n	80012ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001232:	4a89      	ldr	r2, [pc, #548]	; (8001458 <HAL_GPIO_Init+0x280>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d026      	beq.n	8001286 <HAL_GPIO_Init+0xae>
 8001238:	4a87      	ldr	r2, [pc, #540]	; (8001458 <HAL_GPIO_Init+0x280>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d806      	bhi.n	800124c <HAL_GPIO_Init+0x74>
 800123e:	4a87      	ldr	r2, [pc, #540]	; (800145c <HAL_GPIO_Init+0x284>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d020      	beq.n	8001286 <HAL_GPIO_Init+0xae>
 8001244:	4a86      	ldr	r2, [pc, #536]	; (8001460 <HAL_GPIO_Init+0x288>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01d      	beq.n	8001286 <HAL_GPIO_Init+0xae>
          break;
 800124a:	e036      	b.n	80012ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800124c:	4a85      	ldr	r2, [pc, #532]	; (8001464 <HAL_GPIO_Init+0x28c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0xae>
 8001252:	4a85      	ldr	r2, [pc, #532]	; (8001468 <HAL_GPIO_Init+0x290>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d016      	beq.n	8001286 <HAL_GPIO_Init+0xae>
 8001258:	4a84      	ldr	r2, [pc, #528]	; (800146c <HAL_GPIO_Init+0x294>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0xae>
          break;
 800125e:	e02c      	b.n	80012ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	623b      	str	r3, [r7, #32]
          break;
 8001266:	e028      	b.n	80012ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	3304      	adds	r3, #4
 800126e:	623b      	str	r3, [r7, #32]
          break;
 8001270:	e023      	b.n	80012ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	3308      	adds	r3, #8
 8001278:	623b      	str	r3, [r7, #32]
          break;
 800127a:	e01e      	b.n	80012ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	330c      	adds	r3, #12
 8001282:	623b      	str	r3, [r7, #32]
          break;
 8001284:	e019      	b.n	80012ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800128e:	2304      	movs	r3, #4
 8001290:	623b      	str	r3, [r7, #32]
          break;
 8001292:	e012      	b.n	80012ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d105      	bne.n	80012a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800129c:	2308      	movs	r3, #8
 800129e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	611a      	str	r2, [r3, #16]
          break;
 80012a6:	e008      	b.n	80012ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a8:	2308      	movs	r3, #8
 80012aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	615a      	str	r2, [r3, #20]
          break;
 80012b2:	e002      	b.n	80012ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2bff      	cmp	r3, #255	; 0xff
 80012be:	d801      	bhi.n	80012c4 <HAL_GPIO_Init+0xec>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	e001      	b.n	80012c8 <HAL_GPIO_Init+0xf0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3304      	adds	r3, #4
 80012c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2bff      	cmp	r3, #255	; 0xff
 80012ce:	d802      	bhi.n	80012d6 <HAL_GPIO_Init+0xfe>
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x104>
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	3b08      	subs	r3, #8
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	210f      	movs	r1, #15
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	401a      	ands	r2, r3
 80012ee:	6a39      	ldr	r1, [r7, #32]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	431a      	orrs	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 8096 	beq.w	8001436 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800130a:	4b59      	ldr	r3, [pc, #356]	; (8001470 <HAL_GPIO_Init+0x298>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a58      	ldr	r2, [pc, #352]	; (8001470 <HAL_GPIO_Init+0x298>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b56      	ldr	r3, [pc, #344]	; (8001470 <HAL_GPIO_Init+0x298>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001322:	4a54      	ldr	r2, [pc, #336]	; (8001474 <HAL_GPIO_Init+0x29c>)
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4013      	ands	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4b      	ldr	r2, [pc, #300]	; (8001478 <HAL_GPIO_Init+0x2a0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0x19e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4a      	ldr	r2, [pc, #296]	; (800147c <HAL_GPIO_Init+0x2a4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00d      	beq.n	8001372 <HAL_GPIO_Init+0x19a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a49      	ldr	r2, [pc, #292]	; (8001480 <HAL_GPIO_Init+0x2a8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d007      	beq.n	800136e <HAL_GPIO_Init+0x196>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a48      	ldr	r2, [pc, #288]	; (8001484 <HAL_GPIO_Init+0x2ac>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_GPIO_Init+0x192>
 8001366:	2303      	movs	r3, #3
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x1a0>
 800136a:	2304      	movs	r3, #4
 800136c:	e004      	b.n	8001378 <HAL_GPIO_Init+0x1a0>
 800136e:	2302      	movs	r3, #2
 8001370:	e002      	b.n	8001378 <HAL_GPIO_Init+0x1a0>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_GPIO_Init+0x1a0>
 8001376:	2300      	movs	r3, #0
 8001378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137a:	f002 0203 	and.w	r2, r2, #3
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	4093      	lsls	r3, r2
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001388:	493a      	ldr	r1, [pc, #232]	; (8001474 <HAL_GPIO_Init+0x29c>)
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4938      	ldr	r1, [pc, #224]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
 80013ae:	e006      	b.n	80013be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013b0:	4b35      	ldr	r3, [pc, #212]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	4933      	ldr	r1, [pc, #204]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013ca:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	492e      	ldr	r1, [pc, #184]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	604b      	str	r3, [r1, #4]
 80013d6:	e006      	b.n	80013e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013d8:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	43db      	mvns	r3, r3
 80013e0:	4929      	ldr	r1, [pc, #164]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	4924      	ldr	r1, [pc, #144]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	608b      	str	r3, [r1, #8]
 80013fe:	e006      	b.n	800140e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	43db      	mvns	r3, r3
 8001408:	491f      	ldr	r1, [pc, #124]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 800140a:	4013      	ands	r3, r2
 800140c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	491a      	ldr	r1, [pc, #104]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	60cb      	str	r3, [r1, #12]
 8001426:	e006      	b.n	8001436 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	43db      	mvns	r3, r3
 8001430:	4915      	ldr	r1, [pc, #84]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 8001432:	4013      	ands	r3, r2
 8001434:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	3301      	adds	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	fa22 f303 	lsr.w	r3, r2, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	f47f aed0 	bne.w	80011ec <HAL_GPIO_Init+0x14>
  }
}
 800144c:	bf00      	nop
 800144e:	372c      	adds	r7, #44	; 0x2c
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	10210000 	.word	0x10210000
 800145c:	10110000 	.word	0x10110000
 8001460:	10120000 	.word	0x10120000
 8001464:	10310000 	.word	0x10310000
 8001468:	10320000 	.word	0x10320000
 800146c:	10220000 	.word	0x10220000
 8001470:	40021000 	.word	0x40021000
 8001474:	40010000 	.word	0x40010000
 8001478:	40010800 	.word	0x40010800
 800147c:	40010c00 	.word	0x40010c00
 8001480:	40011000 	.word	0x40011000
 8001484:	40011400 	.word	0x40011400
 8001488:	40010400 	.word	0x40010400

0800148c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	b08f      	sub	sp, #60	; 0x3c
 8001490:	af0a      	add	r7, sp, #40	; 0x28
 8001492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e054      	b.n	8001548 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d106      	bne.n	80014be <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f006 fd09 	bl	8007ed0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2203      	movs	r2, #3
 80014c2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fbe9 	bl	8004cb4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	687e      	ldr	r6, [r7, #4]
 80014ea:	466d      	mov	r5, sp
 80014ec:	f106 0410 	add.w	r4, r6, #16
 80014f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001500:	1d33      	adds	r3, r6, #4
 8001502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f003 fb7d 	bl	8004c04 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2101      	movs	r1, #1
 8001510:	4618      	mov	r0, r3
 8001512:	f003 fbdf 	bl	8004cd4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	687e      	ldr	r6, [r7, #4]
 800151e:	466d      	mov	r5, sp
 8001520:	f106 0410 	add.w	r4, r6, #16
 8001524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001530:	e885 0003 	stmia.w	r5, {r0, r1}
 8001534:	1d33      	adds	r3, r6, #4
 8001536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f003 fce3 	bl	8004f04 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001550 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af04      	add	r7, sp, #16
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4603      	mov	r3, r0
 8001560:	70fb      	strb	r3, [r7, #3]
 8001562:	460b      	mov	r3, r1
 8001564:	70bb      	strb	r3, [r7, #2]
 8001566:	4613      	mov	r3, r2
 8001568:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_HCD_HC_Init+0x28>
 8001574:	2302      	movs	r3, #2
 8001576:	e07f      	b.n	8001678 <HAL_HCD_HC_Init+0x128>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001580:	78fa      	ldrb	r2, [r7, #3]
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	333d      	adds	r3, #61	; 0x3d
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001594:	78fa      	ldrb	r2, [r7, #3]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	3338      	adds	r3, #56	; 0x38
 80015a4:	787a      	ldrb	r2, [r7, #1]
 80015a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015a8:	78fa      	ldrb	r2, [r7, #3]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	440b      	add	r3, r1
 80015b6:	3340      	adds	r3, #64	; 0x40
 80015b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015ba:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	3339      	adds	r3, #57	; 0x39
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015d0:	78fa      	ldrb	r2, [r7, #3]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	333f      	adds	r3, #63	; 0x3f
 80015e0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015e6:	78fa      	ldrb	r2, [r7, #3]
 80015e8:	78bb      	ldrb	r3, [r7, #2]
 80015ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015ee:	b2d8      	uxtb	r0, r3
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	333a      	adds	r3, #58	; 0x3a
 80015fe:	4602      	mov	r2, r0
 8001600:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001602:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001606:	2b00      	cmp	r3, #0
 8001608:	da0a      	bge.n	8001620 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800160a:	78fa      	ldrb	r2, [r7, #3]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	333b      	adds	r3, #59	; 0x3b
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e009      	b.n	8001634 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	333b      	adds	r3, #59	; 0x3b
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	333c      	adds	r3, #60	; 0x3c
 8001644:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001648:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	787c      	ldrb	r4, [r7, #1]
 8001650:	78ba      	ldrb	r2, [r7, #2]
 8001652:	78f9      	ldrb	r1, [r7, #3]
 8001654:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	4623      	mov	r3, r4
 8001666:	f003 fd8d 	bl	8005184 <USB_HC_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bd90      	pop	{r4, r7, pc}

08001680 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_HCD_HC_Halt+0x1e>
 800169a:	2302      	movs	r3, #2
 800169c:	e00f      	b.n	80016be <HAL_HCD_HC_Halt+0x3e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 ff6a 	bl	8005588 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	4608      	mov	r0, r1
 80016d2:	4611      	mov	r1, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	70fb      	strb	r3, [r7, #3]
 80016da:	460b      	mov	r3, r1
 80016dc:	70bb      	strb	r3, [r7, #2]
 80016de:	4613      	mov	r3, r2
 80016e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	333b      	adds	r3, #59	; 0x3b
 80016f2:	78ba      	ldrb	r2, [r7, #2]
 80016f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	333f      	adds	r3, #63	; 0x3f
 8001706:	787a      	ldrb	r2, [r7, #1]
 8001708:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800170a:	7c3b      	ldrb	r3, [r7, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d114      	bne.n	800173a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001710:	78fa      	ldrb	r2, [r7, #3]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	3342      	adds	r3, #66	; 0x42
 8001720:	2203      	movs	r2, #3
 8001722:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	333d      	adds	r3, #61	; 0x3d
 8001734:	7f3a      	ldrb	r2, [r7, #28]
 8001736:	701a      	strb	r2, [r3, #0]
 8001738:	e009      	b.n	800174e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	3342      	adds	r3, #66	; 0x42
 800174a:	2202      	movs	r2, #2
 800174c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800174e:	787b      	ldrb	r3, [r7, #1]
 8001750:	2b03      	cmp	r3, #3
 8001752:	f200 80d6 	bhi.w	8001902 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	0800176d 	.word	0x0800176d
 8001760:	080018ed 	.word	0x080018ed
 8001764:	080017d9 	.word	0x080017d9
 8001768:	08001863 	.word	0x08001863
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800176c:	7c3b      	ldrb	r3, [r7, #16]
 800176e:	2b01      	cmp	r3, #1
 8001770:	f040 80c9 	bne.w	8001906 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001774:	78bb      	ldrb	r3, [r7, #2]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 80c5 	bne.w	8001906 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800177c:	8b3b      	ldrh	r3, [r7, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	3351      	adds	r3, #81	; 0x51
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	3351      	adds	r3, #81	; 0x51
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10a      	bne.n	80017c2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3342      	adds	r3, #66	; 0x42
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017c0:	e0a1      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	3342      	adds	r3, #66	; 0x42
 80017d2:	2202      	movs	r2, #2
 80017d4:	701a      	strb	r2, [r3, #0]
      break;
 80017d6:	e096      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017d8:	78bb      	ldrb	r3, [r7, #2]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d120      	bne.n	8001820 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	3351      	adds	r3, #81	; 0x51
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10a      	bne.n	800180a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3342      	adds	r3, #66	; 0x42
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001808:	e07e      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3342      	adds	r3, #66	; 0x42
 800181a:	2202      	movs	r2, #2
 800181c:	701a      	strb	r2, [r3, #0]
      break;
 800181e:	e073      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	3350      	adds	r3, #80	; 0x50
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10a      	bne.n	800184c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	3342      	adds	r3, #66	; 0x42
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
      break;
 800184a:	e05d      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3342      	adds	r3, #66	; 0x42
 800185c:	2202      	movs	r2, #2
 800185e:	701a      	strb	r2, [r3, #0]
      break;
 8001860:	e052      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001862:	78bb      	ldrb	r3, [r7, #2]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d120      	bne.n	80018aa <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	3351      	adds	r3, #81	; 0x51
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10a      	bne.n	8001894 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800187e:	78fa      	ldrb	r2, [r7, #3]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	3342      	adds	r3, #66	; 0x42
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001892:	e039      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	3342      	adds	r3, #66	; 0x42
 80018a4:	2202      	movs	r2, #2
 80018a6:	701a      	strb	r2, [r3, #0]
      break;
 80018a8:	e02e      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	3350      	adds	r3, #80	; 0x50
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10a      	bne.n	80018d6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	3342      	adds	r3, #66	; 0x42
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
      break;
 80018d4:	e018      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	3342      	adds	r3, #66	; 0x42
 80018e6:	2202      	movs	r2, #2
 80018e8:	701a      	strb	r2, [r3, #0]
      break;
 80018ea:	e00d      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	3342      	adds	r3, #66	; 0x42
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
      break;
 8001900:	e002      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001902:	bf00      	nop
 8001904:	e000      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001906:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	3344      	adds	r3, #68	; 0x44
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	8b39      	ldrh	r1, [r7, #24]
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4403      	add	r3, r0
 800192c:	3348      	adds	r3, #72	; 0x48
 800192e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	335c      	adds	r3, #92	; 0x5c
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	334c      	adds	r3, #76	; 0x4c
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	440b      	add	r3, r1
 8001966:	3339      	adds	r3, #57	; 0x39
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	335d      	adds	r3, #93	; 0x5d
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	3338      	adds	r3, #56	; 0x38
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f003 fce7 	bl	8005368 <USB_HC_StartXfer>
 800199a:	4603      	mov	r3, r0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fa62 	bl	8004e84 <USB_GetMode>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	f040 80ef 	bne.w	8001ba6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 fa47 	bl	8004e60 <USB_ReadInterrupts>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80e5 	beq.w	8001ba4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fa3e 	bl	8004e60 <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019ee:	d104      	bne.n	80019fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fa2e 	bl	8004e60 <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a0e:	d104      	bne.n	8001a1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fa1e 	bl	8004e60 <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a2e:	d104      	bne.n	8001a3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 fa0e 	bl	8004e60 <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d103      	bne.n	8001a56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2202      	movs	r2, #2
 8001a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fa00 	bl	8004e60 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a6a:	d115      	bne.n	8001a98 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d108      	bne.n	8001a98 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f006 fa62 	bl	8007f50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fab4 	bl	8005000 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 f9df 	bl	8004e60 <USB_ReadInterrupts>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d102      	bne.n	8001ab4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f001 f8a8 	bl	8002c04 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f003 f9d1 	bl	8004e60 <USB_ReadInterrupts>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d106      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f006 fa25 	bl	8007f18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 f9c0 	bl	8004e60 <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aea:	d138      	bne.n	8001b5e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 fd39 	bl	8005568 <USB_HC_ReadInterrupt>
 8001af6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e025      	b.n	8001b4a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d018      	beq.n	8001b44 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	015a      	lsls	r2, r3, #5
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b28:	d106      	bne.n	8001b38 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f8cd 	bl	8001cd0 <HCD_HC_IN_IRQHandler>
 8001b36:	e005      	b.n	8001b44 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fc5f 	bl	8002402 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3301      	adds	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d3d4      	bcc.n	8001afe <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 f97c 	bl	8004e60 <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d101      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x1d2>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_HCD_IRQHandler+0x1d4>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d014      	beq.n	8001ba6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699a      	ldr	r2, [r3, #24]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0210 	bic.w	r2, r2, #16
 8001b8a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 ff8d 	bl	8002aac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699a      	ldr	r2, [r3, #24]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0210 	orr.w	r2, r2, #16
 8001ba0:	619a      	str	r2, [r3, #24]
 8001ba2:	e000      	b.n	8001ba6 <HAL_HCD_IRQHandler+0x202>
      return;
 8001ba4:	bf00      	nop
    }
  }
}
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_HCD_Start+0x16>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e013      	b.n	8001bea <HAL_HCD_Start+0x3e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 f860 	bl	8004c94 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fa73 	bl	80050c6 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_HCD_Stop+0x16>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e00d      	b.n	8001c24 <HAL_HCD_Stop+0x32>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 fdb5 	bl	8005784 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fa1a 	bl	8005072 <USB_ResetPort>
 8001c3e:	4603      	mov	r3, r0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	440b      	add	r3, r1
 8001c62:	335c      	adds	r3, #92	; 0x5c
 8001c64:	781b      	ldrb	r3, [r3, #0]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	334c      	adds	r3, #76	; 0x4c
 8001c8c:	681b      	ldr	r3, [r3, #0]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 fa5c 	bl	8005162 <USB_GetCurrentFrame>
 8001caa:	4603      	mov	r3, r0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 fa38 	bl	8005136 <USB_GetHostSpeed>
 8001cc6:	4603      	mov	r3, r0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d119      	bne.n	8001d34 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2304      	movs	r3, #4
 8001d10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	0151      	lsls	r1, r2, #5
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	440a      	add	r2, r1
 8001d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	60d3      	str	r3, [r2, #12]
 8001d32:	e095      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d109      	bne.n	8001d5e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d56:	461a      	mov	r2, r3
 8001d58:	2320      	movs	r3, #32
 8001d5a:	6093      	str	r3, [r2, #8]
 8001d5c:	e080      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	015a      	lsls	r2, r3, #5
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d134      	bne.n	8001dde <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	0151      	lsls	r1, r2, #5
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	440a      	add	r2, r1
 8001d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	335d      	adds	r3, #93	; 0x5d
 8001da4:	2205      	movs	r2, #5
 8001da6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db4:	461a      	mov	r2, r3
 8001db6:	2310      	movs	r3, #16
 8001db8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2308      	movs	r3, #8
 8001dca:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 fbd6 	bl	8005588 <USB_HC_Halt>
 8001ddc:	e040      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df4:	d134      	bne.n	8001e60 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	0151      	lsls	r1, r2, #5
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	440a      	add	r2, r1
 8001e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 fbb1 	bl	8005588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	461a      	mov	r2, r3
 8001e34:	2310      	movs	r3, #16
 8001e36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	335d      	adds	r3, #93	; 0x5d
 8001e48:	2208      	movs	r2, #8
 8001e4a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e76:	d122      	bne.n	8001ebe <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	0151      	lsls	r1, r2, #5
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	440a      	add	r2, r1
 8001e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fb70 	bl	8005588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ebc:	e29d      	b.n	80023fa <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	f040 80c7 	bne.w	8002064 <HCD_HC_IN_IRQHandler+0x394>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	335d      	adds	r3, #93	; 0x5d
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3358      	adds	r3, #88	; 0x58
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	333f      	adds	r3, #63	; 0x3f
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	440b      	add	r3, r1
 8001f34:	333f      	adds	r3, #63	; 0x3f
 8001f36:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d121      	bne.n	8001f80 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	0151      	lsls	r1, r2, #5
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	440a      	add	r2, r1
 8001f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 fb0e 	bl	8005588 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2310      	movs	r3, #16
 8001f7c:	6093      	str	r3, [r2, #8]
 8001f7e:	e05a      	b.n	8002036 <HCD_HC_IN_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	333f      	adds	r3, #63	; 0x3f
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d12a      	bne.n	8001fec <HCD_HC_IN_IRQHandler+0x31c>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	0151      	lsls	r1, r2, #5
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	440a      	add	r2, r1
 8001fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fb4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	335c      	adds	r3, #92	; 0x5c
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	b2d8      	uxtb	r0, r3
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	335c      	adds	r3, #92	; 0x5c
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4601      	mov	r1, r0
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f005 ffc1 	bl	8007f6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001fea:	e024      	b.n	8002036 <HCD_HC_IN_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	333f      	adds	r3, #63	; 0x3f
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d119      	bne.n	8002036 <HCD_HC_IN_IRQHandler+0x366>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	335c      	adds	r3, #92	; 0x5c
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	b2d8      	uxtb	r0, r3
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	440b      	add	r3, r1
 8002028:	335c      	adds	r3, #92	; 0x5c
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4601      	mov	r1, r0
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f005 ff9b 	bl	8007f6c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	3350      	adds	r3, #80	; 0x50
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	f083 0301 	eor.w	r3, r3, #1
 800204c:	b2d8      	uxtb	r0, r3
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	3350      	adds	r3, #80	; 0x50
 800205e:	4602      	mov	r2, r0
 8002060:	701a      	strb	r2, [r3, #0]
}
 8002062:	e1ca      	b.n	80023fa <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b02      	cmp	r3, #2
 8002078:	f040 80f1 	bne.w	800225e <HCD_HC_IN_IRQHandler+0x58e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4413      	add	r3, r2
 8002084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	0151      	lsls	r1, r2, #5
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	440a      	add	r2, r1
 8002092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002096:	f023 0302 	bic.w	r3, r3, #2
 800209a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	335d      	adds	r3, #93	; 0x5d
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d10a      	bne.n	80020c8 <HCD_HC_IN_IRQHandler+0x3f8>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	440b      	add	r3, r1
 80020c0:	335c      	adds	r3, #92	; 0x5c
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
 80020c6:	e0b0      	b.n	800222a <HCD_HC_IN_IRQHandler+0x55a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	335d      	adds	r3, #93	; 0x5d
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d10a      	bne.n	80020f4 <HCD_HC_IN_IRQHandler+0x424>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	335c      	adds	r3, #92	; 0x5c
 80020ee:	2205      	movs	r2, #5
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e09a      	b.n	800222a <HCD_HC_IN_IRQHandler+0x55a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	335d      	adds	r3, #93	; 0x5d
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b06      	cmp	r3, #6
 8002108:	d00a      	beq.n	8002120 <HCD_HC_IN_IRQHandler+0x450>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	335d      	adds	r3, #93	; 0x5d
 800211a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800211c:	2b08      	cmp	r3, #8
 800211e:	d156      	bne.n	80021ce <HCD_HC_IN_IRQHandler+0x4fe>
      hhcd->hc[ch_num].ErrCnt++;
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3358      	adds	r3, #88	; 0x58
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	1c59      	adds	r1, r3, #1
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4403      	add	r3, r0
 8002142:	3358      	adds	r3, #88	; 0x58
 8002144:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	3358      	adds	r3, #88	; 0x58
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b03      	cmp	r3, #3
 800215a:	d914      	bls.n	8002186 <HCD_HC_IN_IRQHandler+0x4b6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	3358      	adds	r3, #88	; 0x58
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	440b      	add	r3, r1
 800217e:	335c      	adds	r3, #92	; 0x5c
 8002180:	2204      	movs	r2, #4
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e009      	b.n	800219a <HCD_HC_IN_IRQHandler+0x4ca>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	335c      	adds	r3, #92	; 0x5c
 8002196:	2202      	movs	r2, #2
 8002198:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021b0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021b8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	461a      	mov	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	e02d      	b.n	800222a <HCD_HC_IN_IRQHandler+0x55a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	335d      	adds	r3, #93	; 0x5d
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d122      	bne.n	800222a <HCD_HC_IN_IRQHandler+0x55a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	335c      	adds	r3, #92	; 0x5c
 80021f4:	2202      	movs	r2, #2
 80021f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800220e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002216:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	461a      	mov	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	461a      	mov	r2, r3
 8002238:	2302      	movs	r3, #2
 800223a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	b2d8      	uxtb	r0, r3
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	335c      	adds	r3, #92	; 0x5c
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	4601      	mov	r1, r0
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f005 fe88 	bl	8007f6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800225c:	e0cd      	b.n	80023fa <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002270:	2b80      	cmp	r3, #128	; 0x80
 8002272:	d13e      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x622>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	0151      	lsls	r1, r2, #5
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	440a      	add	r2, r1
 800228a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	3358      	adds	r3, #88	; 0x58
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	1c59      	adds	r1, r3, #1
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4403      	add	r3, r0
 80022b6:	3358      	adds	r3, #88	; 0x58
 80022b8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	335d      	adds	r3, #93	; 0x5d
 80022ca:	2206      	movs	r2, #6
 80022cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 f955 	bl	8005588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ea:	461a      	mov	r2, r3
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	6093      	str	r3, [r2, #8]
}
 80022f0:	e083      	b.n	80023fa <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b10      	cmp	r3, #16
 8002306:	d178      	bne.n	80023fa <HCD_HC_IN_IRQHandler+0x72a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	333f      	adds	r3, #63	; 0x3f
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d122      	bne.n	8002364 <HCD_HC_IN_IRQHandler+0x694>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	3358      	adds	r3, #88	; 0x58
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	0151      	lsls	r1, r2, #5
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	440a      	add	r2, r1
 8002348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f003 f913 	bl	8005588 <USB_HC_Halt>
 8002362:	e041      	b.n	80023e8 <HCD_HC_IN_IRQHandler+0x718>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	333f      	adds	r3, #63	; 0x3f
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HCD_HC_IN_IRQHandler+0x6c0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	333f      	adds	r3, #63	; 0x3f
 800238a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800238c:	2b02      	cmp	r3, #2
 800238e:	d12b      	bne.n	80023e8 <HCD_HC_IN_IRQHandler+0x718>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	3358      	adds	r3, #88	; 0x58
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	440b      	add	r3, r1
 80023b2:	335d      	adds	r3, #93	; 0x5d
 80023b4:	2203      	movs	r2, #3
 80023b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	0151      	lsls	r1, r2, #5
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	440a      	add	r2, r1
 80023ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023d2:	f043 0302 	orr.w	r3, r3, #2
 80023d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 f8d0 	bl	8005588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	461a      	mov	r2, r3
 80023f6:	2310      	movs	r3, #16
 80023f8:	6093      	str	r3, [r2, #8]
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b04      	cmp	r3, #4
 8002430:	d119      	bne.n	8002466 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	461a      	mov	r2, r3
 8002440:	2304      	movs	r3, #4
 8002442:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	0151      	lsls	r1, r2, #5
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	440a      	add	r2, r1
 800245a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002464:	e31e      	b.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b20      	cmp	r3, #32
 800247a:	d141      	bne.n	8002500 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	461a      	mov	r2, r3
 800248a:	2320      	movs	r3, #32
 800248c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	333d      	adds	r3, #61	; 0x3d
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	f040 82ff 	bne.w	8002aa4 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	440b      	add	r3, r1
 80024b4:	333d      	adds	r3, #61	; 0x3d
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	335c      	adds	r3, #92	; 0x5c
 80024ca:	2202      	movs	r2, #2
 80024cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	0151      	lsls	r1, r2, #5
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	440a      	add	r2, r1
 80024e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 f845 	bl	8005588 <USB_HC_Halt>
}
 80024fe:	e2d1      	b.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	2b40      	cmp	r3, #64	; 0x40
 8002514:	d13f      	bne.n	8002596 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	335d      	adds	r3, #93	; 0x5d
 8002526:	2204      	movs	r2, #4
 8002528:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	333d      	adds	r3, #61	; 0x3d
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	440b      	add	r3, r1
 800254c:	3358      	adds	r3, #88	; 0x58
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	0151      	lsls	r1, r2, #5
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	440a      	add	r2, r1
 8002568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f003 f803 	bl	8005588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	461a      	mov	r2, r3
 8002590:	2340      	movs	r3, #64	; 0x40
 8002592:	6093      	str	r3, [r2, #8]
}
 8002594:	e286      	b.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ac:	d122      	bne.n	80025f4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	0151      	lsls	r1, r2, #5
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	440a      	add	r2, r1
 80025c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f002 ffd5 	bl	8005588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	461a      	mov	r2, r3
 80025ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025f0:	6093      	str	r3, [r2, #8]
}
 80025f2:	e257      	b.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d135      	bne.n	8002676 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	3358      	adds	r3, #88	; 0x58
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	0151      	lsls	r1, r2, #5
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	440a      	add	r2, r1
 8002634:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f002 ff9d 	bl	8005588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	461a      	mov	r2, r3
 800265c:	2301      	movs	r3, #1
 800265e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	335d      	adds	r3, #93	; 0x5d
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
}
 8002674:	e216      	b.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b08      	cmp	r3, #8
 800268a:	d12b      	bne.n	80026e4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	461a      	mov	r2, r3
 800269a:	2308      	movs	r3, #8
 800269c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	0151      	lsls	r1, r2, #5
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	440a      	add	r2, r1
 80026b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 ff5d 	bl	8005588 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	335d      	adds	r3, #93	; 0x5d
 80026de:	2205      	movs	r2, #5
 80026e0:	701a      	strb	r2, [r3, #0]
}
 80026e2:	e1df      	b.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d135      	bne.n	8002766 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	3358      	adds	r3, #88	; 0x58
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	335d      	adds	r3, #93	; 0x5d
 800271e:	2203      	movs	r2, #3
 8002720:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	0151      	lsls	r1, r2, #5
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	440a      	add	r2, r1
 8002738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f002 ff1b 	bl	8005588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	461a      	mov	r2, r3
 8002760:	2310      	movs	r3, #16
 8002762:	6093      	str	r3, [r2, #8]
}
 8002764:	e19e      	b.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002778:	2b80      	cmp	r3, #128	; 0x80
 800277a:	d12b      	bne.n	80027d4 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	0151      	lsls	r1, r2, #5
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	440a      	add	r2, r1
 8002792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 feee 	bl	8005588 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	335d      	adds	r3, #93	; 0x5d
 80027bc:	2206      	movs	r2, #6
 80027be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	461a      	mov	r2, r3
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	6093      	str	r3, [r2, #8]
}
 80027d2:	e167      	b.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ea:	d135      	bne.n	8002858 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	0151      	lsls	r1, r2, #5
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	440a      	add	r2, r1
 8002802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f002 feb6 	bl	8005588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	461a      	mov	r2, r3
 800282a:	2310      	movs	r3, #16
 800282c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283a:	461a      	mov	r2, r3
 800283c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002840:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	335d      	adds	r3, #93	; 0x5d
 8002852:	2208      	movs	r2, #8
 8002854:	701a      	strb	r2, [r3, #0]
}
 8002856:	e125      	b.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	f040 811a 	bne.w	8002aa4 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	0151      	lsls	r1, r2, #5
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	440a      	add	r2, r1
 8002886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800288a:	f023 0302 	bic.w	r3, r3, #2
 800288e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	335d      	adds	r3, #93	; 0x5d
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d137      	bne.n	8002916 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	335c      	adds	r3, #92	; 0x5c
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	333f      	adds	r3, #63	; 0x3f
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d00b      	beq.n	80028e8 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	333f      	adds	r3, #63	; 0x3f
 80028e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	f040 80c5 	bne.w	8002a72 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	3351      	adds	r3, #81	; 0x51
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	f083 0301 	eor.w	r3, r3, #1
 80028fe:	b2d8      	uxtb	r0, r3
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	3351      	adds	r3, #81	; 0x51
 8002910:	4602      	mov	r2, r0
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	e0ad      	b.n	8002a72 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	335d      	adds	r3, #93	; 0x5d
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d10a      	bne.n	8002942 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	335c      	adds	r3, #92	; 0x5c
 800293c:	2202      	movs	r2, #2
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e097      	b.n	8002a72 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	335d      	adds	r3, #93	; 0x5d
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d10a      	bne.n	800296e <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	335c      	adds	r3, #92	; 0x5c
 8002968:	2202      	movs	r2, #2
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e081      	b.n	8002a72 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	335d      	adds	r3, #93	; 0x5d
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b05      	cmp	r3, #5
 8002982:	d10a      	bne.n	800299a <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	2205      	movs	r2, #5
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e06b      	b.n	8002a72 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	440b      	add	r3, r1
 80029a8:	335d      	adds	r3, #93	; 0x5d
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d00a      	beq.n	80029c6 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	335d      	adds	r3, #93	; 0x5d
 80029c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d155      	bne.n	8002a72 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	3358      	adds	r3, #88	; 0x58
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	1c59      	adds	r1, r3, #1
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4403      	add	r3, r0
 80029e8:	3358      	adds	r3, #88	; 0x58
 80029ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	3358      	adds	r3, #88	; 0x58
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d914      	bls.n	8002a2c <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	3358      	adds	r3, #88	; 0x58
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	335c      	adds	r3, #92	; 0x5c
 8002a26:	2204      	movs	r2, #4
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e009      	b.n	8002a40 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	335c      	adds	r3, #92	; 0x5c
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a56:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a5e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2302      	movs	r3, #2
 8002a82:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	b2d8      	uxtb	r0, r3
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	335c      	adds	r3, #92	; 0x5c
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4601      	mov	r1, r0
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f005 fa64 	bl	8007f6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002aa4:	bf00      	nop
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	0c5b      	lsrs	r3, r3, #17
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ae0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d003      	beq.n	8002af0 <HCD_RXQLVL_IRQHandler+0x44>
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	f000 8082 	beq.w	8002bf2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002aee:	e083      	b.n	8002bf8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d07f      	beq.n	8002bf6 <HCD_RXQLVL_IRQHandler+0x14a>
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	3344      	adds	r3, #68	; 0x44
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d074      	beq.n	8002bf6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3344      	adds	r3, #68	; 0x44
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	b292      	uxth	r2, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f002 f972 	bl	8004e10 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	3344      	adds	r3, #68	; 0x44
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	18d1      	adds	r1, r2, r3
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4403      	add	r3, r0
 8002b50:	3344      	adds	r3, #68	; 0x44
 8002b52:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	334c      	adds	r3, #76	; 0x4c
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	18d1      	adds	r1, r2, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4403      	add	r3, r0
 8002b78:	334c      	adds	r3, #76	; 0x4c
 8002b7a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HCD_RXQLVL_IRQHandler+0x154>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d031      	beq.n	8002bf6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ba8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bb0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3350      	adds	r3, #80	; 0x50
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	f083 0301 	eor.w	r3, r3, #1
 8002bda:	b2d8      	uxtb	r0, r3
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	3350      	adds	r3, #80	; 0x50
 8002bec:	4602      	mov	r2, r0
 8002bee:	701a      	strb	r2, [r3, #0]
      break;
 8002bf0:	e001      	b.n	8002bf6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e000      	b.n	8002bf8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002bf6:	bf00      	nop
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3728      	adds	r7, #40	; 0x28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	1ff80000 	.word	0x1ff80000

08002c04 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c30:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d10b      	bne.n	8002c54 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d102      	bne.n	8002c4c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f005 f974 	bl	8007f34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d132      	bne.n	8002cc4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f043 0308 	orr.w	r3, r3, #8
 8002c64:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d126      	bne.n	8002cbe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d113      	bne.n	8002ca0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c82:	d106      	bne.n	8002c92 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2102      	movs	r1, #2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 f9b8 	bl	8005000 <USB_InitFSLSPClkSel>
 8002c90:	e011      	b.n	8002cb6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2101      	movs	r1, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 f9b1 	bl	8005000 <USB_InitFSLSPClkSel>
 8002c9e:	e00a      	b.n	8002cb6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d106      	bne.n	8002cb6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cb4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f005 f965 	bl	8007f86 <HAL_HCD_PortEnabled_Callback>
 8002cbc:	e002      	b.n	8002cc4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f005 f96f 	bl	8007fa2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d103      	bne.n	8002cd6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f043 0320 	orr.w	r3, r3, #32
 8002cd4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	6013      	str	r3, [r2, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	420e0020 	.word	0x420e0020

08002d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e304      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8087 	beq.w	8002e32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d24:	4b92      	ldr	r3, [pc, #584]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d00c      	beq.n	8002d4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d30:	4b8f      	ldr	r3, [pc, #572]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d112      	bne.n	8002d62 <HAL_RCC_OscConfig+0x5e>
 8002d3c:	4b8c      	ldr	r3, [pc, #560]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d48:	d10b      	bne.n	8002d62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4a:	4b89      	ldr	r3, [pc, #548]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d06c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x12c>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d168      	bne.n	8002e30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e2de      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCC_OscConfig+0x76>
 8002d6c:	4b80      	ldr	r3, [pc, #512]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a7f      	ldr	r2, [pc, #508]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e02e      	b.n	8002dd8 <HAL_RCC_OscConfig+0xd4>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x98>
 8002d82:	4b7b      	ldr	r3, [pc, #492]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a7a      	ldr	r2, [pc, #488]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b78      	ldr	r3, [pc, #480]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a77      	ldr	r2, [pc, #476]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e01d      	b.n	8002dd8 <HAL_RCC_OscConfig+0xd4>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xbc>
 8002da6:	4b72      	ldr	r3, [pc, #456]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a71      	ldr	r2, [pc, #452]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a6e      	ldr	r2, [pc, #440]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0xd4>
 8002dc0:	4b6b      	ldr	r3, [pc, #428]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a6a      	ldr	r2, [pc, #424]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b68      	ldr	r3, [pc, #416]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a67      	ldr	r2, [pc, #412]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d013      	beq.n	8002e08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe f8c0 	bl	8000f64 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de8:	f7fe f8bc 	bl	8000f64 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e292      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfa:	4b5d      	ldr	r3, [pc, #372]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0xe4>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe f8ac 	bl	8000f64 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe f8a8 	bl	8000f64 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e27e      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e22:	4b53      	ldr	r3, [pc, #332]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x10c>
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d063      	beq.n	8002f06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e3e:	4b4c      	ldr	r3, [pc, #304]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e4a:	4b49      	ldr	r3, [pc, #292]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d11c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x18c>
 8002e56:	4b46      	ldr	r3, [pc, #280]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d116      	bne.n	8002e90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	4b43      	ldr	r3, [pc, #268]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_RCC_OscConfig+0x176>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e252      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7a:	4b3d      	ldr	r3, [pc, #244]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4939      	ldr	r1, [pc, #228]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8e:	e03a      	b.n	8002f06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d020      	beq.n	8002eda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e98:	4b36      	ldr	r3, [pc, #216]	; (8002f74 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fe f861 	bl	8000f64 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea6:	f7fe f85d 	bl	8000f64 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e233      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb8:	4b2d      	ldr	r3, [pc, #180]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4b2a      	ldr	r3, [pc, #168]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4927      	ldr	r1, [pc, #156]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]
 8002ed8:	e015      	b.n	8002f06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eda:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <HAL_RCC_OscConfig+0x270>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7fe f840 	bl	8000f64 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7fe f83c 	bl	8000f64 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e212      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d03a      	beq.n	8002f88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d019      	beq.n	8002f4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f20:	f7fe f820 	bl	8000f64 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f28:	f7fe f81c 	bl	8000f64 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e1f2      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f46:	2001      	movs	r0, #1
 8002f48:	f000 fbf2 	bl	8003730 <RCC_Delay>
 8002f4c:	e01c      	b.n	8002f88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_RCC_OscConfig+0x274>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f54:	f7fe f806 	bl	8000f64 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5a:	e00f      	b.n	8002f7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fe f802 	bl	8000f64 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d908      	bls.n	8002f7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e1d8      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	42420000 	.word	0x42420000
 8002f78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7c:	4b9b      	ldr	r3, [pc, #620]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e9      	bne.n	8002f5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80a6 	beq.w	80030e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f96:	2300      	movs	r3, #0
 8002f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b94      	ldr	r3, [pc, #592]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10d      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	4b91      	ldr	r3, [pc, #580]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	4a90      	ldr	r2, [pc, #576]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	61d3      	str	r3, [r2, #28]
 8002fb2:	4b8e      	ldr	r3, [pc, #568]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	4b8b      	ldr	r3, [pc, #556]	; (80031f0 <HAL_RCC_OscConfig+0x4ec>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fce:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <HAL_RCC_OscConfig+0x4ec>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a87      	ldr	r2, [pc, #540]	; (80031f0 <HAL_RCC_OscConfig+0x4ec>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fda:	f7fd ffc3 	bl	8000f64 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7fd ffbf 	bl	8000f64 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b64      	cmp	r3, #100	; 0x64
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e195      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	4b7e      	ldr	r3, [pc, #504]	; (80031f0 <HAL_RCC_OscConfig+0x4ec>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x312>
 8003008:	4b78      	ldr	r3, [pc, #480]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4a77      	ldr	r2, [pc, #476]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6213      	str	r3, [r2, #32]
 8003014:	e02d      	b.n	8003072 <HAL_RCC_OscConfig+0x36e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x334>
 800301e:	4b73      	ldr	r3, [pc, #460]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4a72      	ldr	r2, [pc, #456]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6213      	str	r3, [r2, #32]
 800302a:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4a6f      	ldr	r2, [pc, #444]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	6213      	str	r3, [r2, #32]
 8003036:	e01c      	b.n	8003072 <HAL_RCC_OscConfig+0x36e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	2b05      	cmp	r3, #5
 800303e:	d10c      	bne.n	800305a <HAL_RCC_OscConfig+0x356>
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4a69      	ldr	r2, [pc, #420]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8003046:	f043 0304 	orr.w	r3, r3, #4
 800304a:	6213      	str	r3, [r2, #32]
 800304c:	4b67      	ldr	r3, [pc, #412]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4a66      	ldr	r2, [pc, #408]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6213      	str	r3, [r2, #32]
 8003058:	e00b      	b.n	8003072 <HAL_RCC_OscConfig+0x36e>
 800305a:	4b64      	ldr	r3, [pc, #400]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	4a63      	ldr	r2, [pc, #396]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	6213      	str	r3, [r2, #32]
 8003066:	4b61      	ldr	r3, [pc, #388]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	4a60      	ldr	r2, [pc, #384]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d015      	beq.n	80030a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fd ff73 	bl	8000f64 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	e00a      	b.n	8003098 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003082:	f7fd ff6f 	bl	8000f64 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e143      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003098:	4b54      	ldr	r3, [pc, #336]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ee      	beq.n	8003082 <HAL_RCC_OscConfig+0x37e>
 80030a4:	e014      	b.n	80030d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a6:	f7fd ff5d 	bl	8000f64 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	e00a      	b.n	80030c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ae:	f7fd ff59 	bl	8000f64 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e12d      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c4:	4b49      	ldr	r3, [pc, #292]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ee      	bne.n	80030ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d105      	bne.n	80030e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d6:	4b45      	ldr	r3, [pc, #276]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	4a44      	ldr	r2, [pc, #272]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 80030dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 808c 	beq.w	8003204 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80030ec:	4b3f      	ldr	r3, [pc, #252]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d10e      	bne.n	8003118 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80030fa:	4b3c      	ldr	r3, [pc, #240]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003102:	2b08      	cmp	r3, #8
 8003104:	d108      	bne.n	8003118 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003106:	4b39      	ldr	r3, [pc, #228]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800310e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003112:	d101      	bne.n	8003118 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e103      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	2b02      	cmp	r3, #2
 800311e:	d14e      	bne.n	80031be <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003120:	4b32      	ldr	r3, [pc, #200]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d009      	beq.n	8003140 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800312c:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0ef      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003140:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <HAL_RCC_OscConfig+0x4f0>)
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fd ff0d 	bl	8000f64 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800314e:	f7fd ff09 	bl	8000f64 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b64      	cmp	r3, #100	; 0x64
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0df      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003160:	4b22      	ldr	r3, [pc, #136]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f0      	bne.n	800314e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800316c:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	491c      	ldr	r1, [pc, #112]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 800317a:	4313      	orrs	r3, r2
 800317c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4918      	ldr	r1, [pc, #96]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 800318c:	4313      	orrs	r3, r2
 800318e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003190:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <HAL_RCC_OscConfig+0x4f0>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7fd fee5 	bl	8000f64 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800319e:	f7fd fee1 	bl	8000f64 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b64      	cmp	r3, #100	; 0x64
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0b7      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80031b0:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x49a>
 80031bc:	e022      	b.n	8003204 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <HAL_RCC_OscConfig+0x4e8>)
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_RCC_OscConfig+0x4f0>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d0:	f7fd fec8 	bl	8000f64 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80031d6:	e00f      	b.n	80031f8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80031d8:	f7fd fec4 	bl	8000f64 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d908      	bls.n	80031f8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e09a      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40007000 	.word	0x40007000
 80031f4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80031f8:	4b4b      	ldr	r3, [pc, #300]	; (8003328 <HAL_RCC_OscConfig+0x624>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e9      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8088 	beq.w	800331e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800320e:	4b46      	ldr	r3, [pc, #280]	; (8003328 <HAL_RCC_OscConfig+0x624>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b08      	cmp	r3, #8
 8003218:	d068      	beq.n	80032ec <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d14d      	bne.n	80032be <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b42      	ldr	r3, [pc, #264]	; (800332c <HAL_RCC_OscConfig+0x628>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fd fe9c 	bl	8000f64 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003230:	f7fd fe98 	bl	8000f64 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e06e      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003242:	4b39      	ldr	r3, [pc, #228]	; (8003328 <HAL_RCC_OscConfig+0x624>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003256:	d10f      	bne.n	8003278 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003258:	4b33      	ldr	r3, [pc, #204]	; (8003328 <HAL_RCC_OscConfig+0x624>)
 800325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4931      	ldr	r1, [pc, #196]	; (8003328 <HAL_RCC_OscConfig+0x624>)
 8003262:	4313      	orrs	r3, r2
 8003264:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003266:	4b30      	ldr	r3, [pc, #192]	; (8003328 <HAL_RCC_OscConfig+0x624>)
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f023 020f 	bic.w	r2, r3, #15
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	492d      	ldr	r1, [pc, #180]	; (8003328 <HAL_RCC_OscConfig+0x624>)
 8003274:	4313      	orrs	r3, r2
 8003276:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_RCC_OscConfig+0x624>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	430b      	orrs	r3, r1
 800328a:	4927      	ldr	r1, [pc, #156]	; (8003328 <HAL_RCC_OscConfig+0x624>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003290:	4b26      	ldr	r3, [pc, #152]	; (800332c <HAL_RCC_OscConfig+0x628>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fd fe65 	bl	8000f64 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329e:	f7fd fe61 	bl	8000f64 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e037      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b0:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_RCC_OscConfig+0x624>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x59a>
 80032bc:	e02f      	b.n	800331e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x628>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fd fe4e 	bl	8000f64 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fd fe4a 	bl	8000f64 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e020      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_RCC_OscConfig+0x624>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x5c8>
 80032ea:	e018      	b.n	800331e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e013      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_OscConfig+0x624>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	429a      	cmp	r2, r3
 800330a:	d106      	bne.n	800331a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000
 800332c:	42420060 	.word	0x42420060

08003330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0d0      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003344:	4b6a      	ldr	r3, [pc, #424]	; (80034f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d910      	bls.n	8003374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b67      	ldr	r3, [pc, #412]	; (80034f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0207 	bic.w	r2, r3, #7
 800335a:	4965      	ldr	r1, [pc, #404]	; (80034f0 <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b63      	ldr	r3, [pc, #396]	; (80034f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0b8      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d020      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800338c:	4b59      	ldr	r3, [pc, #356]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4a58      	ldr	r2, [pc, #352]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003392:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003396:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a4:	4b53      	ldr	r3, [pc, #332]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4a52      	ldr	r2, [pc, #328]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b0:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	494d      	ldr	r1, [pc, #308]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d040      	beq.n	8003450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d107      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d115      	bne.n	800340e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e07f      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ee:	4b41      	ldr	r3, [pc, #260]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e073      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e06b      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340e:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f023 0203 	bic.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4936      	ldr	r1, [pc, #216]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003420:	f7fd fda0 	bl	8000f64 <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	e00a      	b.n	800343e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003428:	f7fd fd9c 	bl	8000f64 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e053      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343e:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 020c 	and.w	r2, r3, #12
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	429a      	cmp	r2, r3
 800344e:	d1eb      	bne.n	8003428 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003450:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d210      	bcs.n	8003480 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 0207 	bic.w	r2, r3, #7
 8003466:	4922      	ldr	r1, [pc, #136]	; (80034f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e032      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4916      	ldr	r1, [pc, #88]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	4313      	orrs	r3, r2
 800349c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	490e      	ldr	r1, [pc, #56]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034be:	f000 f821 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 80034c2:	4601      	mov	r1, r0
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <HAL_RCC_ClockConfig+0x1c8>)
 80034d0:	5cd3      	ldrb	r3, [r2, r3]
 80034d2:	fa21 f303 	lsr.w	r3, r1, r3
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <HAL_RCC_ClockConfig+0x1cc>)
 80034d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x1d0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fcfe 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40022000 	.word	0x40022000
 80034f4:	40021000 	.word	0x40021000
 80034f8:	08009664 	.word	0x08009664
 80034fc:	20000000 	.word	0x20000000
 8003500:	20000004 	.word	0x20000004

08003504 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003508:	b091      	sub	sp, #68	; 0x44
 800350a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800350c:	4b6a      	ldr	r3, [pc, #424]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x1b4>)
 800350e:	f107 0414 	add.w	r4, r7, #20
 8003512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003514:	c407      	stmia	r4!, {r0, r1, r2}
 8003516:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003518:	4b68      	ldr	r3, [pc, #416]	; (80036bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800351a:	1d3c      	adds	r4, r7, #4
 800351c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800351e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
 8003526:	2300      	movs	r3, #0
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
 800352a:	2300      	movs	r3, #0
 800352c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352e:	2300      	movs	r3, #0
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800353e:	4b60      	ldr	r3, [pc, #384]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b04      	cmp	r3, #4
 800354c:	d002      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x50>
 800354e:	2b08      	cmp	r3, #8
 8003550:	d003      	beq.n	800355a <HAL_RCC_GetSysClockFreq+0x56>
 8003552:	e0a7      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003554:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003556:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003558:	e0a7      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800355a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355c:	0c9b      	lsrs	r3, r3, #18
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003566:	4413      	add	r3, r2
 8003568:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 808d 	beq.w	8003694 <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800357a:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003586:	4413      	add	r3, r2
 8003588:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800358c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800358e:	4b4c      	ldr	r3, [pc, #304]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d06a      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800359a:	4b49      	ldr	r3, [pc, #292]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	3301      	adds	r3, #1
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80035a8:	4b45      	ldr	r3, [pc, #276]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	3302      	adds	r3, #2
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	4619      	mov	r1, r3
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	f04f 0400 	mov.w	r4, #0
 80035c4:	fb03 f502 	mul.w	r5, r3, r2
 80035c8:	fb01 f004 	mul.w	r0, r1, r4
 80035cc:	4428      	add	r0, r5
 80035ce:	fba1 5603 	umull	r5, r6, r1, r3
 80035d2:	1983      	adds	r3, r0, r6
 80035d4:	461e      	mov	r6, r3
 80035d6:	4629      	mov	r1, r5
 80035d8:	4632      	mov	r2, r6
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	f04f 0400 	mov.w	r4, #0
 80035e2:	0154      	lsls	r4, r2, #5
 80035e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035e8:	014b      	lsls	r3, r1, #5
 80035ea:	4619      	mov	r1, r3
 80035ec:	4622      	mov	r2, r4
 80035ee:	1b49      	subs	r1, r1, r5
 80035f0:	eb62 0206 	sbc.w	r2, r2, r6
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	f04f 0400 	mov.w	r4, #0
 80035fc:	0194      	lsls	r4, r2, #6
 80035fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003602:	018b      	lsls	r3, r1, #6
 8003604:	1a5b      	subs	r3, r3, r1
 8003606:	eb64 0402 	sbc.w	r4, r4, r2
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	00e2      	lsls	r2, r4, #3
 8003614:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003618:	00d9      	lsls	r1, r3, #3
 800361a:	460b      	mov	r3, r1
 800361c:	4614      	mov	r4, r2
 800361e:	195b      	adds	r3, r3, r5
 8003620:	eb44 0406 	adc.w	r4, r4, r6
 8003624:	f04f 0100 	mov.w	r1, #0
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	0262      	lsls	r2, r4, #9
 800362e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003632:	0259      	lsls	r1, r3, #9
 8003634:	460b      	mov	r3, r1
 8003636:	4614      	mov	r4, r2
 8003638:	4698      	mov	r8, r3
 800363a:	46a1      	mov	r9, r4
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	4619      	mov	r1, r3
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	f04f 0400 	mov.w	r4, #0
 800364a:	fb03 f502 	mul.w	r5, r3, r2
 800364e:	fb01 f004 	mul.w	r0, r1, r4
 8003652:	4428      	add	r0, r5
 8003654:	fba1 3403 	umull	r3, r4, r1, r3
 8003658:	1902      	adds	r2, r0, r4
 800365a:	4614      	mov	r4, r2
 800365c:	461a      	mov	r2, r3
 800365e:	4623      	mov	r3, r4
 8003660:	4640      	mov	r0, r8
 8003662:	4649      	mov	r1, r9
 8003664:	f7fc fdde 	bl	8000224 <__aeabi_uldivmod>
 8003668:	4603      	mov	r3, r0
 800366a:	460c      	mov	r4, r1
 800366c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800366e:	e007      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003672:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003674:	fb02 f203 	mul.w	r2, r2, r3
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	fbb2 f3f3 	udiv	r3, r2, r3
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003680:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003684:	461a      	mov	r2, r3
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	4293      	cmp	r3, r2
 800368a:	d108      	bne.n	800369e <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003692:	e004      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	4a0c      	ldr	r2, [pc, #48]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8003698:	fb02 f303 	mul.w	r3, r2, r3
 800369c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 800369e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036a2:	e002      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036a4:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80036a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3744      	adds	r7, #68	; 0x44
 80036b0:	46bd      	mov	sp, r7
 80036b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036b6:	bf00      	nop
 80036b8:	0800928c 	.word	0x0800928c
 80036bc:	0800929c 	.word	0x0800929c
 80036c0:	40021000 	.word	0x40021000
 80036c4:	007a1200 	.word	0x007a1200
 80036c8:	003d0900 	.word	0x003d0900

080036cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d0:	4b02      	ldr	r3, [pc, #8]	; (80036dc <HAL_RCC_GetHCLKFreq+0x10>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	20000000 	.word	0x20000000

080036e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036e4:	f7ff fff2 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 80036e8:	4601      	mov	r1, r0
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4a03      	ldr	r2, [pc, #12]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f6:	5cd3      	ldrb	r3, [r2, r3]
 80036f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	08009674 	.word	0x08009674

08003708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800370c:	f7ff ffde 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 8003710:	4601      	mov	r1, r0
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	0adb      	lsrs	r3, r3, #11
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4a03      	ldr	r2, [pc, #12]	; (800372c <HAL_RCC_GetPCLK2Freq+0x24>)
 800371e:	5cd3      	ldrb	r3, [r2, r3]
 8003720:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000
 800372c:	08009674 	.word	0x08009674

08003730 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <RCC_Delay+0x34>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <RCC_Delay+0x38>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0a5b      	lsrs	r3, r3, #9
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800374c:	bf00      	nop
  }
  while (Delay --);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1e5a      	subs	r2, r3, #1
 8003752:	60fa      	str	r2, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f9      	bne.n	800374c <RCC_Delay+0x1c>
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000000 	.word	0x20000000
 8003768:	10624dd3 	.word	0x10624dd3

0800376c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	2300      	movs	r3, #0
 800377a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d07d      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800378c:	2300      	movs	r3, #0
 800378e:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003790:	4b8b      	ldr	r3, [pc, #556]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379c:	4b88      	ldr	r3, [pc, #544]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4a87      	ldr	r2, [pc, #540]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a6:	61d3      	str	r3, [r2, #28]
 80037a8:	4b85      	ldr	r3, [pc, #532]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037b4:	2301      	movs	r3, #1
 80037b6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	4b82      	ldr	r3, [pc, #520]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d118      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c4:	4b7f      	ldr	r3, [pc, #508]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7e      	ldr	r2, [pc, #504]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d0:	f7fd fbc8 	bl	8000f64 <HAL_GetTick>
 80037d4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d6:	e008      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d8:	f7fd fbc4 	bl	8000f64 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0e5      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b76      	ldr	r3, [pc, #472]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037f6:	4b72      	ldr	r3, [pc, #456]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fe:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02e      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	429a      	cmp	r2, r3
 8003812:	d027      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003814:	4b6a      	ldr	r3, [pc, #424]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800381e:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003824:	4b68      	ldr	r3, [pc, #416]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800382a:	4a65      	ldr	r2, [pc, #404]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d014      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fd fb93 	bl	8000f64 <HAL_GetTick>
 800383e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	e00a      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fd fb8f 	bl	8000f64 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d901      	bls.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e0ae      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	4b59      	ldr	r3, [pc, #356]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ee      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003864:	4b56      	ldr	r3, [pc, #344]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4953      	ldr	r1, [pc, #332]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003872:	4313      	orrs	r3, r2
 8003874:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003876:	7efb      	ldrb	r3, [r7, #27]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	4a4f      	ldr	r2, [pc, #316]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003886:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003894:	4b4a      	ldr	r3, [pc, #296]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4947      	ldr	r1, [pc, #284]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80038b2:	4b43      	ldr	r3, [pc, #268]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	4940      	ldr	r1, [pc, #256]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80038d0:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	4938      	ldr	r1, [pc, #224]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80038e2:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d105      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80038ee:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80038fa:	2301      	movs	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d148      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003904:	4b2e      	ldr	r3, [pc, #184]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d138      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003910:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e042      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003930:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	4920      	ldr	r1, [pc, #128]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800393e:	4313      	orrs	r3, r2
 8003940:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	491c      	ldr	r1, [pc, #112]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003950:	4313      	orrs	r3, r2
 8003952:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003954:	4b1d      	ldr	r3, [pc, #116]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003956:	2201      	movs	r2, #1
 8003958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fd fb03 	bl	8000f64 <HAL_GetTick>
 800395e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003962:	f7fd faff 	bl	8000f64 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b64      	cmp	r3, #100	; 0x64
 800396e:	d901      	bls.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e020      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003980:	e009      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003982:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	429a      	cmp	r2, r3
 8003990:	d001      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e00f      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	4904      	ldr	r1, [pc, #16]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40007000 	.word	0x40007000
 80039c8:	42420440 	.word	0x42420440
 80039cc:	42420070 	.word	0x42420070

080039d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b093      	sub	sp, #76	; 0x4c
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80039d8:	4ba9      	ldr	r3, [pc, #676]	; (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80039da:	f107 0418 	add.w	r4, r7, #24
 80039de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039e0:	c407      	stmia	r4!, {r0, r1, r2}
 80039e2:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80039e4:	4ba7      	ldr	r3, [pc, #668]	; (8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80039e6:	f107 0408 	add.w	r4, r7, #8
 80039ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039f4:	2300      	movs	r3, #0
 80039f6:	647b      	str	r3, [r7, #68]	; 0x44
 80039f8:	2300      	movs	r3, #0
 80039fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003a00:	2300      	movs	r3, #0
 8003a02:	633b      	str	r3, [r7, #48]	; 0x30
 8003a04:	2300      	movs	r3, #0
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	2b0f      	cmp	r3, #15
 8003a16:	f200 8124 	bhi.w	8003c62 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003be1 	.word	0x08003be1
 8003a24:	08003c47 	.word	0x08003c47
 8003a28:	08003c63 	.word	0x08003c63
 8003a2c:	08003b3f 	.word	0x08003b3f
 8003a30:	08003c63 	.word	0x08003c63
 8003a34:	08003c63 	.word	0x08003c63
 8003a38:	08003c63 	.word	0x08003c63
 8003a3c:	08003b91 	.word	0x08003b91
 8003a40:	08003c63 	.word	0x08003c63
 8003a44:	08003c63 	.word	0x08003c63
 8003a48:	08003c63 	.word	0x08003c63
 8003a4c:	08003c63 	.word	0x08003c63
 8003a50:	08003c63 	.word	0x08003c63
 8003a54:	08003c63 	.word	0x08003c63
 8003a58:	08003c63 	.word	0x08003c63
 8003a5c:	08003a61 	.word	0x08003a61
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003a60:	4b89      	ldr	r3, [pc, #548]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a66:	4b88      	ldr	r3, [pc, #544]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80f9 	beq.w	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	0c9b      	lsrs	r3, r3, #18
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a80:	4413      	add	r3, r2
 8003a82:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003a86:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d03e      	beq.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003a92:	4b7d      	ldr	r3, [pc, #500]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8003aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003aa6:	4b78      	ldr	r3, [pc, #480]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01c      	beq.n	8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003ab2:	4b75      	ldr	r3, [pc, #468]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	3301      	adds	r3, #1
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003ac0:	4b71      	ldr	r3, [pc, #452]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	0a1b      	lsrs	r3, r3, #8
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	3302      	adds	r3, #2
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8003ace:	4a6f      	ldr	r2, [pc, #444]	; (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad8:	fb02 f203 	mul.w	r2, r2, r3
 8003adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ade:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aea:	e007      	b.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003aec:	4a67      	ldr	r2, [pc, #412]	; (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003afc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b00:	461a      	mov	r2, r3
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d108      	bne.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 8003b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b0e:	e004      	b.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b12:	4a5f      	ldr	r2, [pc, #380]	; (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003b14:	fb02 f303 	mul.w	r3, r2, r3
 8003b18:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8003b1a:	4b5b      	ldr	r3, [pc, #364]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b26:	d102      	bne.n	8003b2e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8003b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b2a:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003b2c:	e09b      	b.n	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 8003b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4a58      	ldr	r2, [pc, #352]	; (8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003b3c:	e093      	b.n	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8003b3e:	4b52      	ldr	r3, [pc, #328]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8003b4a:	f7ff fcdb 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 8003b4e:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003b50:	e08b      	b.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8003b52:	4b4d      	ldr	r3, [pc, #308]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 8085 	beq.w	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003b60:	4b49      	ldr	r3, [pc, #292]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8003b6e:	4b46      	ldr	r3, [pc, #280]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	0b1b      	lsrs	r3, r3, #12
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	3302      	adds	r3, #2
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8003b7c:	4a43      	ldr	r2, [pc, #268]	; (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003b8e:	e06c      	b.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8003b90:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8003b9c:	f7ff fcb2 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 8003ba0:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003ba2:	e064      	b.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8003ba4:	4b38      	ldr	r3, [pc, #224]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d05e      	beq.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003bb0:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	3301      	adds	r3, #1
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8003bbe:	4b32      	ldr	r3, [pc, #200]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	0b1b      	lsrs	r3, r3, #12
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	3302      	adds	r3, #2
 8003bca:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8003bcc:	4a2f      	ldr	r2, [pc, #188]	; (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003bde:	e046      	b.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003be0:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf0:	d108      	bne.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 8003bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c00:	643b      	str	r3, [r7, #64]	; 0x40
 8003c02:	e01f      	b.n	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0e:	d109      	bne.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8003c10:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 8003c1c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003c20:	643b      	str	r3, [r7, #64]	; 0x40
 8003c22:	e00f      	b.n	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c2e:	d120      	bne.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8003c30:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01a      	beq.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 8003c3c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003c40:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003c42:	e016      	b.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8003c44:	e015      	b.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c46:	f7ff fd5f 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	0b9b      	lsrs	r3, r3, #14
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	3301      	adds	r3, #1
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003c60:	e008      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 8003c62:	bf00      	nop
 8003c64:	e006      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8003c66:	bf00      	nop
 8003c68:	e004      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8003c72:	bf00      	nop
    }
  }
  return (frequency);
 8003c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	374c      	adds	r7, #76	; 0x4c
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd90      	pop	{r4, r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	080092ac 	.word	0x080092ac
 8003c84:	080092bc 	.word	0x080092bc
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	007a1200 	.word	0x007a1200
 8003c90:	003d0900 	.word	0x003d0900
 8003c94:	aaaaaaab 	.word	0xaaaaaaab

08003c98 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e084      	b.n	8003db8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	7c5b      	ldrb	r3, [r3, #17]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fc fe0a 	bl	80008d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f9c8 	bl	8004060 <HAL_RTC_WaitForSynchro>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2204      	movs	r2, #4
 8003cda:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e06b      	b.n	8003db8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fa81 	bl	80041e8 <RTC_EnterInitMode>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2204      	movs	r2, #4
 8003cf0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e060      	b.n	8003db8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0207 	bic.w	r2, r2, #7
 8003d04:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003d0e:	4b2c      	ldr	r3, [pc, #176]	; (8003dc0 <HAL_RTC_Init+0x128>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	4a2b      	ldr	r2, [pc, #172]	; (8003dc0 <HAL_RTC_Init+0x128>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003d1a:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <HAL_RTC_Init+0x128>)
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	4926      	ldr	r1, [pc, #152]	; (8003dc0 <HAL_RTC_Init+0x128>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d003      	beq.n	8003d3e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e00e      	b.n	8003d5c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003d3e:	2001      	movs	r0, #1
 8003d40:	f7ff fe46 	bl	80039d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d44:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d104      	bne.n	8003d56 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e030      	b.n	8003db8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f023 010f 	bic.w	r1, r3, #15
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	0c1a      	lsrs	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	b291      	uxth	r1, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	430b      	orrs	r3, r1
 8003d86:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fa55 	bl	8004238 <RTC_ExitInitMode>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2204      	movs	r2, #4
 8003d98:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e00c      	b.n	8003db8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003db6:	2300      	movs	r3, #0
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40006c00 	.word	0x40006c00

08003dc4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_RTC_SetTime+0x20>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e080      	b.n	8003eea <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	7c1b      	ldrb	r3, [r3, #16]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_RTC_SetTime+0x30>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e07a      	b.n	8003eea <HAL_RTC_SetTime+0x126>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d113      	bne.n	8003e2e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003e10:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	785b      	ldrb	r3, [r3, #1]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a5b      	subs	r3, r3, r1
 8003e20:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e22:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e28:	4413      	add	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e01e      	b.n	8003e6c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fa28 	bl	8004288 <RTC_Bcd2ToByte>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003e40:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	785b      	ldrb	r3, [r3, #1]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fa1d 	bl	8004288 <RTC_Bcd2ToByte>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e5a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	789b      	ldrb	r3, [r3, #2]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fa11 	bl	8004288 <RTC_Bcd2ToByte>
 8003e66:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e68:	4423      	add	r3, r4
 8003e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003e6c:	6979      	ldr	r1, [r7, #20]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f953 	bl	800411a <RTC_WriteTimeCounter>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e02f      	b.n	8003eea <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0205 	bic.w	r2, r2, #5
 8003e98:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f964 	bl	8004168 <RTC_ReadAlarmCounter>
 8003ea0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d018      	beq.n	8003edc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d214      	bcs.n	8003edc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003eb8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ebc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003ebe:	6939      	ldr	r1, [r7, #16]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f96a 	bl	800419a <RTC_WriteAlarmCounter>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e006      	b.n	8003eea <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd90      	pop	{r4, r7, pc}
	...

08003ef4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61fb      	str	r3, [r7, #28]
 8003f04:	2300      	movs	r3, #0
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_RTC_SetDate+0x24>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e097      	b.n	800404c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	7c1b      	ldrb	r3, [r3, #16]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_RTC_SetDate+0x34>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e091      	b.n	800404c <HAL_RTC_SetDate+0x158>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2202      	movs	r2, #2
 8003f32:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	78da      	ldrb	r2, [r3, #3]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	785a      	ldrb	r2, [r3, #1]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	789a      	ldrb	r2, [r3, #2]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	739a      	strb	r2, [r3, #14]
 8003f52:	e01a      	b.n	8003f8a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	78db      	ldrb	r3, [r3, #3]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 f995 	bl	8004288 <RTC_Bcd2ToByte>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	461a      	mov	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f98c 	bl	8004288 <RTC_Bcd2ToByte>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	789b      	ldrb	r3, [r3, #2]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f983 	bl	8004288 <RTC_Bcd2ToByte>
 8003f82:	4603      	mov	r3, r0
 8003f84:	461a      	mov	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	7bdb      	ldrb	r3, [r3, #15]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	7b59      	ldrb	r1, [r3, #13]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	7b9b      	ldrb	r3, [r3, #14]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f000 f993 	bl	80042c4 <RTC_WeekDayNum>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	7b1a      	ldrb	r2, [r3, #12]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f883 	bl	80040ba <RTC_ReadTimeCounter>
 8003fb4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4a26      	ldr	r2, [pc, #152]	; (8004054 <HAL_RTC_SetDate+0x160>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	0adb      	lsrs	r3, r3, #11
 8003fc0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b18      	cmp	r3, #24
 8003fc6:	d93a      	bls.n	800403e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	4a23      	ldr	r2, [pc, #140]	; (8004058 <HAL_RTC_SetDate+0x164>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	4a22      	ldr	r2, [pc, #136]	; (800405c <HAL_RTC_SetDate+0x168>)
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003fde:	69f9      	ldr	r1, [r7, #28]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f89a 	bl	800411a <RTC_WriteTimeCounter>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d007      	beq.n	8003ffc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e027      	b.n	800404c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f8b3 	bl	8004168 <RTC_ReadAlarmCounter>
 8004002:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d018      	beq.n	800403e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	429a      	cmp	r2, r3
 8004012:	d214      	bcs.n	800403e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800401a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800401e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004020:	69b9      	ldr	r1, [r7, #24]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f8b9 	bl	800419a <RTC_WriteAlarmCounter>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2204      	movs	r2, #4
 8004032:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e006      	b.n	800404c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	91a2b3c5 	.word	0x91a2b3c5
 8004058:	aaaaaaab 	.word	0xaaaaaaab
 800405c:	00015180 	.word	0x00015180

08004060 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e01d      	b.n	80040b2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0208 	bic.w	r2, r2, #8
 8004084:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004086:	f7fc ff6d 	bl	8000f64 <HAL_GetTick>
 800408a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800408c:	e009      	b.n	80040a2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800408e:	f7fc ff69 	bl	8000f64 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800409c:	d901      	bls.n	80040a2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e007      	b.n	80040b2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ee      	beq.n	800408e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b087      	sub	sp, #28
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	827b      	strh	r3, [r7, #18]
 80040c6:	2300      	movs	r3, #0
 80040c8:	823b      	strh	r3, [r7, #16]
 80040ca:	2300      	movs	r3, #0
 80040cc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80040ea:	8a7a      	ldrh	r2, [r7, #18]
 80040ec:	8a3b      	ldrh	r3, [r7, #16]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d008      	beq.n	8004104 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80040f2:	8a3b      	ldrh	r3, [r7, #16]
 80040f4:	041a      	lsls	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e004      	b.n	800410e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004104:	8a7b      	ldrh	r3, [r7, #18]
 8004106:	041a      	lsls	r2, r3, #16
 8004108:	89fb      	ldrh	r3, [r7, #14]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800410e:	697b      	ldr	r3, [r7, #20]
}
 8004110:	4618      	mov	r0, r3
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f85d 	bl	80041e8 <RTC_EnterInitMode>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
 8004138:	e011      	b.n	800415e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	0c12      	lsrs	r2, r2, #16
 8004142:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	b292      	uxth	r2, r2
 800414c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f872 	bl	8004238 <RTC_ExitInitMode>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800415e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	81fb      	strh	r3, [r7, #14]
 8004174:	2300      	movs	r3, #0
 8004176:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004188:	89fb      	ldrh	r3, [r7, #14]
 800418a:	041a      	lsls	r2, r3, #16
 800418c:	89bb      	ldrh	r3, [r7, #12]
 800418e:	4313      	orrs	r3, r2
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f81d 	bl	80041e8 <RTC_EnterInitMode>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	e011      	b.n	80041de <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	0c12      	lsrs	r2, r2, #16
 80041c2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	b292      	uxth	r2, r2
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f832 	bl	8004238 <RTC_ExitInitMode>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80041f4:	f7fc feb6 	bl	8000f64 <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80041fa:	e009      	b.n	8004210 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80041fc:	f7fc feb2 	bl	8000f64 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800420a:	d901      	bls.n	8004210 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e00f      	b.n	8004230 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ee      	beq.n	80041fc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0210 	orr.w	r2, r2, #16
 800422c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0210 	bic.w	r2, r2, #16
 8004252:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004254:	f7fc fe86 	bl	8000f64 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800425a:	e009      	b.n	8004270 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800425c:	f7fc fe82 	bl	8000f64 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800426a:	d901      	bls.n	8004270 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e007      	b.n	8004280 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ee      	beq.n	800425c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	b2db      	uxtb	r3, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
	...

080042c4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
 80042d0:	4613      	mov	r3, r2
 80042d2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80042e2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d82d      	bhi.n	8004346 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	4613      	mov	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4413      	add	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	4a2c      	ldr	r2, [pc, #176]	; (80043a8 <RTC_WeekDayNum+0xe4>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	085a      	lsrs	r2, r3, #1
 80042fe:	78bb      	ldrb	r3, [r7, #2]
 8004300:	441a      	add	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	441a      	add	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	3b01      	subs	r3, #1
 800430a:	089b      	lsrs	r3, r3, #2
 800430c:	441a      	add	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	3b01      	subs	r3, #1
 8004312:	4926      	ldr	r1, [pc, #152]	; (80043ac <RTC_WeekDayNum+0xe8>)
 8004314:	fba1 1303 	umull	r1, r3, r1, r3
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	1ad2      	subs	r2, r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3b01      	subs	r3, #1
 8004320:	4922      	ldr	r1, [pc, #136]	; (80043ac <RTC_WeekDayNum+0xe8>)
 8004322:	fba1 1303 	umull	r1, r3, r1, r3
 8004326:	09db      	lsrs	r3, r3, #7
 8004328:	4413      	add	r3, r2
 800432a:	1d1a      	adds	r2, r3, #4
 800432c:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <RTC_WeekDayNum+0xec>)
 800432e:	fba3 1302 	umull	r1, r3, r3, r2
 8004332:	1ad1      	subs	r1, r2, r3
 8004334:	0849      	lsrs	r1, r1, #1
 8004336:	440b      	add	r3, r1
 8004338:	0899      	lsrs	r1, r3, #2
 800433a:	460b      	mov	r3, r1
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	1a5b      	subs	r3, r3, r1
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e029      	b.n	800439a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <RTC_WeekDayNum+0xe4>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	085a      	lsrs	r2, r3, #1
 800435a:	78bb      	ldrb	r3, [r7, #2]
 800435c:	441a      	add	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	441a      	add	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	089b      	lsrs	r3, r3, #2
 8004366:	441a      	add	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4910      	ldr	r1, [pc, #64]	; (80043ac <RTC_WeekDayNum+0xe8>)
 800436c:	fba1 1303 	umull	r1, r3, r1, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	1ad2      	subs	r2, r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	490d      	ldr	r1, [pc, #52]	; (80043ac <RTC_WeekDayNum+0xe8>)
 8004378:	fba1 1303 	umull	r1, r3, r1, r3
 800437c:	09db      	lsrs	r3, r3, #7
 800437e:	4413      	add	r3, r2
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <RTC_WeekDayNum+0xec>)
 8004384:	fba3 1302 	umull	r1, r3, r3, r2
 8004388:	1ad1      	subs	r1, r2, r3
 800438a:	0849      	lsrs	r1, r1, #1
 800438c:	440b      	add	r3, r1
 800438e:	0899      	lsrs	r1, r3, #2
 8004390:	460b      	mov	r3, r1
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	1a5b      	subs	r3, r3, r1
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	b2db      	uxtb	r3, r3
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	38e38e39 	.word	0x38e38e39
 80043ac:	51eb851f 	.word	0x51eb851f
 80043b0:	24924925 	.word	0x24924925

080043b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e053      	b.n	800446e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7fc fa9d 	bl	8000920 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	ea42 0103 	orr.w	r1, r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	0c1a      	lsrs	r2, r3, #16
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f002 0204 	and.w	r2, r2, #4
 800444c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b088      	sub	sp, #32
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	4613      	mov	r3, r2
 8004484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_SPI_Transmit+0x22>
 8004494:	2302      	movs	r3, #2
 8004496:	e11e      	b.n	80046d6 <HAL_SPI_Transmit+0x260>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044a0:	f7fc fd60 	bl	8000f64 <HAL_GetTick>
 80044a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d002      	beq.n	80044bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
 80044b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044ba:	e103      	b.n	80046c4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_SPI_Transmit+0x52>
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d102      	bne.n	80044ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044cc:	e0fa      	b.n	80046c4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2203      	movs	r2, #3
 80044d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	88fa      	ldrh	r2, [r7, #6]
 80044e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	88fa      	ldrh	r2, [r7, #6]
 80044ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004514:	d107      	bne.n	8004526 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004524:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d007      	beq.n	8004544 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004542:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454c:	d14b      	bne.n	80045e6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_SPI_Transmit+0xe6>
 8004556:	8afb      	ldrh	r3, [r7, #22]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d13e      	bne.n	80045da <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	881a      	ldrh	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	1c9a      	adds	r2, r3, #2
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004580:	e02b      	b.n	80045da <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b02      	cmp	r3, #2
 800458e:	d112      	bne.n	80045b6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	881a      	ldrh	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	1c9a      	adds	r2, r3, #2
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80045b4:	e011      	b.n	80045da <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045b6:	f7fc fcd5 	bl	8000f64 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d803      	bhi.n	80045ce <HAL_SPI_Transmit+0x158>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d102      	bne.n	80045d4 <HAL_SPI_Transmit+0x15e>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d102      	bne.n	80045da <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045d8:	e074      	b.n	80046c4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1ce      	bne.n	8004582 <HAL_SPI_Transmit+0x10c>
 80045e4:	e04c      	b.n	8004680 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_SPI_Transmit+0x17e>
 80045ee:	8afb      	ldrh	r3, [r7, #22]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d140      	bne.n	8004676 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	7812      	ldrb	r2, [r2, #0]
 8004600:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800461a:	e02c      	b.n	8004676 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b02      	cmp	r3, #2
 8004628:	d113      	bne.n	8004652 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004650:	e011      	b.n	8004676 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004652:	f7fc fc87 	bl	8000f64 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d803      	bhi.n	800466a <HAL_SPI_Transmit+0x1f4>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d102      	bne.n	8004670 <HAL_SPI_Transmit+0x1fa>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004674:	e026      	b.n	80046c4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1cd      	bne.n	800461c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	6839      	ldr	r1, [r7, #0]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f894 	bl	80047b2 <SPI_EndRxTxTransaction>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	613b      	str	r3, [r7, #16]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e000      	b.n	80046c4 <HAL_SPI_Transmit+0x24e>
  }

error:
 80046c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ee:	e04c      	b.n	800478a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d048      	beq.n	800478a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80046f8:	f7fc fc34 	bl	8000f64 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d902      	bls.n	800470e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d13d      	bne.n	800478a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800471c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004726:	d111      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	d004      	beq.n	800473c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473a:	d107      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d10f      	bne.n	8004776 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e00f      	b.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4013      	ands	r3, r2
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	429a      	cmp	r2, r3
 8004798:	bf0c      	ite	eq
 800479a:	2301      	moveq	r3, #1
 800479c:	2300      	movne	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1a3      	bne.n	80046f0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af02      	add	r7, sp, #8
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2200      	movs	r2, #0
 80047c6:	2180      	movs	r1, #128	; 0x80
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff ff88 	bl	80046de <SPI_WaitFlagStateUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d8:	f043 0220 	orr.w	r2, r3, #32
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e000      	b.n	80047e6 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e03f      	b.n	8004880 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fc f8e9 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2224      	movs	r2, #36	; 0x24
 800481e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004830:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f90c 	bl	8004a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004846:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004856:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004866:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	f040 8083 	bne.w	80049b0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <HAL_UART_Transmit+0x2e>
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e07b      	b.n	80049b2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_UART_Transmit+0x40>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e074      	b.n	80049b2 <HAL_UART_Transmit+0x12a>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2221      	movs	r2, #33	; 0x21
 80048da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80048de:	f7fc fb41 	bl	8000f64 <HAL_GetTick>
 80048e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048f0:	e042      	b.n	8004978 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004908:	d122      	bne.n	8004950 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	2180      	movs	r1, #128	; 0x80
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f850 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e046      	b.n	80049b2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004936:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	3302      	adds	r3, #2
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	e017      	b.n	8004978 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	3301      	adds	r3, #1
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	e013      	b.n	8004978 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2200      	movs	r2, #0
 8004958:	2180      	movs	r1, #128	; 0x80
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f82d 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e023      	b.n	80049b2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	60ba      	str	r2, [r7, #8]
 8004970:	781a      	ldrb	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1b7      	bne.n	80048f2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2200      	movs	r2, #0
 800498a:	2140      	movs	r1, #64	; 0x40
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f814 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e00a      	b.n	80049b2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	e000      	b.n	80049b2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80049b0:	2302      	movs	r3, #2
  }
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ca:	e02c      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d028      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <UART_WaitOnFlagUntilTimeout+0x30>
 80049da:	f7fc fac3 	bl	8000f64 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d21d      	bcs.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695a      	ldr	r2, [r3, #20]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e00f      	b.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d0c3      	beq.n	80049cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a8a:	f023 030c 	bic.w	r3, r3, #12
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	430b      	orrs	r3, r1
 8004a96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a52      	ldr	r2, [pc, #328]	; (8004bfc <UART_SetConfig+0x1ac>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d14e      	bne.n	8004b56 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ab8:	f7fe fe26 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8004abc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009a      	lsls	r2, r3, #2
 8004ac8:	441a      	add	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	4a4a      	ldr	r2, [pc, #296]	; (8004c00 <UART_SetConfig+0x1b0>)
 8004ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	0119      	lsls	r1, r3, #4
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009a      	lsls	r2, r3, #2
 8004ae8:	441a      	add	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af4:	4b42      	ldr	r3, [pc, #264]	; (8004c00 <UART_SetConfig+0x1b0>)
 8004af6:	fba3 0302 	umull	r0, r3, r3, r2
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2064      	movs	r0, #100	; 0x64
 8004afe:	fb00 f303 	mul.w	r3, r0, r3
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	3332      	adds	r3, #50	; 0x32
 8004b08:	4a3d      	ldr	r2, [pc, #244]	; (8004c00 <UART_SetConfig+0x1b0>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b14:	4419      	add	r1, r3
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009a      	lsls	r2, r3, #2
 8004b20:	441a      	add	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b2c:	4b34      	ldr	r3, [pc, #208]	; (8004c00 <UART_SetConfig+0x1b0>)
 8004b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	2064      	movs	r0, #100	; 0x64
 8004b36:	fb00 f303 	mul.w	r3, r0, r3
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	3332      	adds	r3, #50	; 0x32
 8004b40:	4a2f      	ldr	r2, [pc, #188]	; (8004c00 <UART_SetConfig+0x1b0>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	f003 020f 	and.w	r2, r3, #15
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	440a      	add	r2, r1
 8004b52:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004b54:	e04d      	b.n	8004bf2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b56:	f7fe fdc3 	bl	80036e0 <HAL_RCC_GetPCLK1Freq>
 8004b5a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009a      	lsls	r2, r3, #2
 8004b66:	441a      	add	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b72:	4a23      	ldr	r2, [pc, #140]	; (8004c00 <UART_SetConfig+0x1b0>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	0119      	lsls	r1, r3, #4
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b92:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <UART_SetConfig+0x1b0>)
 8004b94:	fba3 0302 	umull	r0, r3, r3, r2
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	2064      	movs	r0, #100	; 0x64
 8004b9c:	fb00 f303 	mul.w	r3, r0, r3
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	3332      	adds	r3, #50	; 0x32
 8004ba6:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <UART_SetConfig+0x1b0>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb2:	4419      	add	r1, r3
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009a      	lsls	r2, r3, #2
 8004bbe:	441a      	add	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <UART_SetConfig+0x1b0>)
 8004bcc:	fba3 0302 	umull	r0, r3, r3, r2
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	2064      	movs	r0, #100	; 0x64
 8004bd4:	fb00 f303 	mul.w	r3, r0, r3
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	3332      	adds	r3, #50	; 0x32
 8004bde:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <UART_SetConfig+0x1b0>)
 8004be0:	fba2 2303 	umull	r2, r3, r2, r3
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	f003 020f 	and.w	r2, r3, #15
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	440a      	add	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]
}
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40013800 	.word	0x40013800
 8004c00:	51eb851f 	.word	0x51eb851f

08004c04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c04:	b084      	sub	sp, #16
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	f107 001c 	add.w	r0, r7, #28
 8004c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d122      	bne.n	8004c62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d105      	bne.n	8004c56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f922 	bl	8004ea0 <USB_CoreReset>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	73fb      	strb	r3, [r7, #15]
 8004c60:	e010      	b.n	8004c84 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f916 	bl	8004ea0 <USB_CoreReset>
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c90:	b004      	add	sp, #16
 8004c92:	4770      	bx	lr

08004c94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f043 0201 	orr.w	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f023 0201 	bic.w	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d106      	bne.n	8004d00 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	e00b      	b.n	8004d18 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	e001      	b.n	8004d18 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e003      	b.n	8004d20 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004d18:	2032      	movs	r0, #50	; 0x32
 8004d1a:	f7fc f92d 	bl	8000f78 <HAL_Delay>

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	019b      	lsls	r3, r3, #6
 8004d3a:	f043 0220 	orr.w	r2, r3, #32
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <USB_FlushTxFifo+0x44>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d901      	bls.n	8004d54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e006      	b.n	8004d62 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d0f0      	beq.n	8004d42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	00030d40 	.word	0x00030d40

08004d70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2210      	movs	r2, #16
 8004d80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3301      	adds	r3, #1
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a08      	ldr	r2, [pc, #32]	; (8004dac <USB_FlushRxFifo+0x3c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d901      	bls.n	8004d94 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e006      	b.n	8004da2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d0f0      	beq.n	8004d82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr
 8004dac:	00030d40 	.word	0x00030d40

08004db0 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b089      	sub	sp, #36	; 0x24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4611      	mov	r1, r2
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	71fb      	strb	r3, [r7, #7]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004dce:	88bb      	ldrh	r3, [r7, #4]
 8004dd0:	3303      	adds	r3, #3
 8004dd2:	089b      	lsrs	r3, r3, #2
 8004dd4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	e00f      	b.n	8004dfc <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	031a      	lsls	r2, r3, #12
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de8:	461a      	mov	r2, r3
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	3304      	adds	r3, #4
 8004df4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	61bb      	str	r3, [r7, #24]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d3eb      	bcc.n	8004ddc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3724      	adds	r7, #36	; 0x24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b089      	sub	sp, #36	; 0x24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	3303      	adds	r3, #3
 8004e2a:	089b      	lsrs	r3, r3, #2
 8004e2c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	e00b      	b.n	8004e4c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	3304      	adds	r3, #4
 8004e44:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d3ef      	bcc.n	8004e34 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004e54:	69fb      	ldr	r3, [r7, #28]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3724      	adds	r7, #36	; 0x24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4013      	ands	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e78:	68fb      	ldr	r3, [r7, #12]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr

08004e84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f003 0301 	and.w	r3, r3, #1
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr
	...

08004ea0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4a12      	ldr	r2, [pc, #72]	; (8004f00 <USB_CoreReset+0x60>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d901      	bls.n	8004ebe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e01b      	b.n	8004ef6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	daf2      	bge.n	8004eac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f043 0201 	orr.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <USB_CoreReset+0x60>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d901      	bls.n	8004ee8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e006      	b.n	8004ef6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d0f0      	beq.n	8004ed6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr
 8004f00:	00030d40 	.word	0x00030d40

08004f04 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f04:	b084      	sub	sp, #16
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	f107 001c 	add.w	r0, r7, #28
 8004f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f20:	461a      	mov	r2, r3
 8004f22:	2300      	movs	r3, #0
 8004f24:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f4c:	f023 0304 	bic.w	r3, r3, #4
 8004f50:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004f52:	2110      	movs	r1, #16
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff fee7 	bl	8004d28 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff ff08 	bl	8004d70 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e015      	b.n	8004f92 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f72:	461a      	mov	r2, r3
 8004f74:	f04f 33ff 	mov.w	r3, #4294967295
 8004f78:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f86:	461a      	mov	r2, r3
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3e5      	bcc.n	8004f66 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f892 	bl	80050c6 <USB_DriveVbus>

  HAL_Delay(200U);
 8004fa2:	20c8      	movs	r0, #200	; 0xc8
 8004fa4:	f7fb ffe8 	bl	8000f78 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb4:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2280      	movs	r2, #128	; 0x80
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <USB_HostInit+0xf0>)
 8004fc0:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a0c      	ldr	r2, [pc, #48]	; (8004ff8 <USB_HostInit+0xf4>)
 8004fc6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f043 0210 	orr.w	r2, r3, #16
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <USB_HostInit+0xf8>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fee:	b004      	add	sp, #16
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	00600080 	.word	0x00600080
 8004ff8:	004000e0 	.word	0x004000e0
 8004ffc:	a3200008 	.word	0xa3200008

08005000 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800501e:	f023 0303 	bic.w	r3, r3, #3
 8005022:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	68f9      	ldr	r1, [r7, #12]
 8005034:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005038:	4313      	orrs	r3, r2
 800503a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d107      	bne.n	8005052 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005048:	461a      	mov	r2, r3
 800504a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800504e:	6053      	str	r3, [r2, #4]
 8005050:	e009      	b.n	8005066 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d106      	bne.n	8005066 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800505e:	461a      	mov	r2, r3
 8005060:	f241 7370 	movw	r3, #6000	; 0x1770
 8005064:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr

08005072 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005092:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800509c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80050a2:	2064      	movs	r0, #100	; 0x64
 80050a4:	f7fb ff68 	bl	8000f78 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80050b6:	200a      	movs	r0, #10
 80050b8:	f7fb ff5e 	bl	8000f78 <HAL_Delay>

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050ea:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <USB_DriveVbus+0x44>
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d106      	bne.n	800510a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005104:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005108:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005114:	d109      	bne.n	800512a <USB_DriveVbus+0x64>
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005128:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr

08005136 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	0c5b      	lsrs	r3, r3, #17
 8005154:	f003 0303 	and.w	r3, r3, #3
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	b29b      	uxth	r3, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr
	...

08005184 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	4608      	mov	r0, r1
 800518e:	4611      	mov	r1, r2
 8005190:	461a      	mov	r2, r3
 8005192:	4603      	mov	r3, r0
 8005194:	70fb      	strb	r3, [r7, #3]
 8005196:	460b      	mov	r3, r1
 8005198:	70bb      	strb	r3, [r7, #2]
 800519a:	4613      	mov	r3, r2
 800519c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	461a      	mov	r2, r3
 80051b4:	f04f 33ff 	mov.w	r3, #4294967295
 80051b8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80051ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d867      	bhi.n	8005292 <USB_HC_Init+0x10e>
 80051c2:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <USB_HC_Init+0x44>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	080051d9 	.word	0x080051d9
 80051cc:	08005255 	.word	0x08005255
 80051d0:	080051d9 	.word	0x080051d9
 80051d4:	08005217 	.word	0x08005217
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e4:	461a      	mov	r2, r3
 80051e6:	f240 439d 	movw	r3, #1181	; 0x49d
 80051ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80051ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	da51      	bge.n	8005298 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	440a      	add	r2, r1
 800520a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800520e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005212:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005214:	e040      	b.n	8005298 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005222:	461a      	mov	r2, r3
 8005224:	f240 639d 	movw	r3, #1693	; 0x69d
 8005228:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800522a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800522e:	2b00      	cmp	r3, #0
 8005230:	da34      	bge.n	800529c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4413      	add	r3, r2
 800523a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	440a      	add	r2, r1
 8005248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800524c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005250:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005252:	e023      	b.n	800529c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4413      	add	r3, r2
 800525c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005260:	461a      	mov	r2, r3
 8005262:	f240 2325 	movw	r3, #549	; 0x225
 8005266:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005268:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800526c:	2b00      	cmp	r3, #0
 800526e:	da17      	bge.n	80052a0 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	78fa      	ldrb	r2, [r7, #3]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	440a      	add	r2, r1
 8005286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800528a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800528e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005290:	e006      	b.n	80052a0 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
      break;
 8005296:	e004      	b.n	80052a2 <USB_HC_Init+0x11e>
      break;
 8005298:	bf00      	nop
 800529a:	e002      	b.n	80052a2 <USB_HC_Init+0x11e>
      break;
 800529c:	bf00      	nop
 800529e:	e000      	b.n	80052a2 <USB_HC_Init+0x11e>
      break;
 80052a0:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	2101      	movs	r1, #1
 80052b2:	fa01 f303 	lsl.w	r3, r1, r3
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052bc:	4313      	orrs	r3, r2
 80052be:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80052cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	da03      	bge.n	80052dc <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80052d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	e001      	b.n	80052e0 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80052e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d103      	bne.n	80052f0 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80052e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e001      	b.n	80052f4 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052f4:	787b      	ldrb	r3, [r7, #1]
 80052f6:	059b      	lsls	r3, r3, #22
 80052f8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80052fc:	78bb      	ldrb	r3, [r7, #2]
 80052fe:	02db      	lsls	r3, r3, #11
 8005300:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005304:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005306:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800530a:	049b      	lsls	r3, r3, #18
 800530c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005310:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005312:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005314:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005318:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	0159      	lsls	r1, r3, #5
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	440b      	add	r3, r1
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005330:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005332:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005336:	2b03      	cmp	r3, #3
 8005338:	d10f      	bne.n	800535a <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4413      	add	r3, r2
 8005342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	440a      	add	r2, r1
 8005350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005354:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005358:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
}
 800535c:	4618      	mov	r0, r3
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop

08005368 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	785b      	ldrb	r3, [r3, #1]
 800537a:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800537c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005380:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d018      	beq.n	80053bc <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	8912      	ldrh	r2, [r2, #8]
 8005392:	4413      	add	r3, r2
 8005394:	3b01      	subs	r3, #1
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	8912      	ldrh	r2, [r2, #8]
 800539a:	fbb3 f3f2 	udiv	r3, r3, r2
 800539e:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80053a0:	8bfa      	ldrh	r2, [r7, #30]
 80053a2:	8a7b      	ldrh	r3, [r7, #18]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d90b      	bls.n	80053c0 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80053a8:	8a7b      	ldrh	r3, [r7, #18]
 80053aa:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80053ac:	8bfb      	ldrh	r3, [r7, #30]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	8912      	ldrh	r2, [r2, #8]
 80053b2:	fb02 f203 	mul.w	r2, r2, r3
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	611a      	str	r2, [r3, #16]
 80053ba:	e001      	b.n	80053c0 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80053bc:	2301      	movs	r3, #1
 80053be:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	78db      	ldrb	r3, [r3, #3]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d006      	beq.n	80053d6 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80053c8:	8bfb      	ldrh	r3, [r7, #30]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	8912      	ldrh	r2, [r2, #8]
 80053ce:	fb02 f203 	mul.w	r2, r2, r3
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053de:	8bfb      	ldrh	r3, [r7, #30]
 80053e0:	04d9      	lsls	r1, r3, #19
 80053e2:	4b5f      	ldr	r3, [pc, #380]	; (8005560 <USB_HC_StartXfer+0x1f8>)
 80053e4:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80053e6:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	7a9b      	ldrb	r3, [r3, #10]
 80053ec:	075b      	lsls	r3, r3, #29
 80053ee:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80053f2:	6979      	ldr	r1, [r7, #20]
 80053f4:	0148      	lsls	r0, r1, #5
 80053f6:	69b9      	ldr	r1, [r7, #24]
 80053f8:	4401      	add	r1, r0
 80053fa:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053fe:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005400:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	bf0c      	ite	eq
 8005412:	2301      	moveq	r3, #1
 8005414:	2300      	movne	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	440a      	add	r2, r1
 8005430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005434:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005438:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	4413      	add	r3, r2
 8005442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	7c7b      	ldrb	r3, [r7, #17]
 800544a:	075b      	lsls	r3, r3, #29
 800544c:	6979      	ldr	r1, [r7, #20]
 800544e:	0148      	lsls	r0, r1, #5
 8005450:	69b9      	ldr	r1, [r7, #24]
 8005452:	4401      	add	r1, r0
 8005454:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a3e      	ldr	r2, [pc, #248]	; (8005564 <USB_HC_StartXfer+0x1fc>)
 800546c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800546e:	4b3d      	ldr	r3, [pc, #244]	; (8005564 <USB_HC_StartXfer+0x1fc>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005476:	4a3b      	ldr	r2, [pc, #236]	; (8005564 <USB_HC_StartXfer+0x1fc>)
 8005478:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	78db      	ldrb	r3, [r3, #3]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d006      	beq.n	8005490 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005482:	4b38      	ldr	r3, [pc, #224]	; (8005564 <USB_HC_StartXfer+0x1fc>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548a:	4a36      	ldr	r2, [pc, #216]	; (8005564 <USB_HC_StartXfer+0x1fc>)
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e005      	b.n	800549c <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005490:	4b34      	ldr	r3, [pc, #208]	; (8005564 <USB_HC_StartXfer+0x1fc>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005498:	4a32      	ldr	r2, [pc, #200]	; (8005564 <USB_HC_StartXfer+0x1fc>)
 800549a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800549c:	4b31      	ldr	r3, [pc, #196]	; (8005564 <USB_HC_StartXfer+0x1fc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054a4:	4a2f      	ldr	r2, [pc, #188]	; (8005564 <USB_HC_StartXfer+0x1fc>)
 80054a6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b4:	461a      	mov	r2, r3
 80054b6:	4b2b      	ldr	r3, [pc, #172]	; (8005564 <USB_HC_StartXfer+0x1fc>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	78db      	ldrb	r3, [r3, #3]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d148      	bne.n	8005556 <USB_HC_StartXfer+0x1ee>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d044      	beq.n	8005556 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	79db      	ldrb	r3, [r3, #7]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d831      	bhi.n	8005538 <USB_HC_StartXfer+0x1d0>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <USB_HC_StartXfer+0x174>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	080054ed 	.word	0x080054ed
 80054e0:	08005511 	.word	0x08005511
 80054e4:	080054ed 	.word	0x080054ed
 80054e8:	08005511 	.word	0x08005511
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	3303      	adds	r3, #3
 80054f2:	089b      	lsrs	r3, r3, #2
 80054f4:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80054f6:	89fa      	ldrh	r2, [r7, #14]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	429a      	cmp	r2, r3
 8005500:	d91c      	bls.n	800553c <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f043 0220 	orr.w	r2, r3, #32
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	619a      	str	r2, [r3, #24]
          }
          break;
 800550e:	e015      	b.n	800553c <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	3303      	adds	r3, #3
 8005516:	089b      	lsrs	r3, r3, #2
 8005518:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800551a:	89fa      	ldrh	r2, [r7, #14]
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	b29b      	uxth	r3, r3
 8005526:	429a      	cmp	r2, r3
 8005528:	d90a      	bls.n	8005540 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	619a      	str	r2, [r3, #24]
          }
          break;
 8005536:	e003      	b.n	8005540 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8005538:	bf00      	nop
 800553a:	e002      	b.n	8005542 <USB_HC_StartXfer+0x1da>
          break;
 800553c:	bf00      	nop
 800553e:	e000      	b.n	8005542 <USB_HC_StartXfer+0x1da>
          break;
 8005540:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68d9      	ldr	r1, [r3, #12]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	785a      	ldrb	r2, [r3, #1]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	b29b      	uxth	r3, r3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff fc2d 	bl	8004db0 <USB_WritePacket>
    }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3720      	adds	r7, #32
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	1ff80000 	.word	0x1ff80000
 8005564:	200000b8 	.word	0x200000b8

08005568 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	b29b      	uxth	r3, r3
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	0c9b      	lsrs	r3, r3, #18
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <USB_HC_Halt+0x3a>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d16c      	bne.n	800569c <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055e0:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d143      	bne.n	8005676 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	440a      	add	r2, r1
 8005604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800560c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4413      	add	r3, r2
 8005616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	0151      	lsls	r1, r2, #5
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	440a      	add	r2, r1
 8005624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800562c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	440a      	add	r2, r1
 8005644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005648:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800564c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	3301      	adds	r3, #1
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800565a:	d81d      	bhi.n	8005698 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4413      	add	r3, r2
 8005664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800566e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005672:	d0ec      	beq.n	800564e <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005674:	e080      	b.n	8005778 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	440a      	add	r2, r1
 800568c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005694:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005696:	e06f      	b.n	8005778 <USB_HC_Halt+0x1f0>
          break;
 8005698:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800569a:	e06d      	b.n	8005778 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d143      	bne.n	8005754 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	440a      	add	r2, r1
 8005702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005706:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800570a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4413      	add	r3, r2
 8005714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	440a      	add	r2, r1
 8005722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005726:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800572a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	3301      	adds	r3, #1
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005738:	d81d      	bhi.n	8005776 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800574c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005750:	d0ec      	beq.n	800572c <USB_HC_Halt+0x1a4>
 8005752:	e011      	b.n	8005778 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	4413      	add	r3, r2
 800575c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	0151      	lsls	r1, r2, #5
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	440a      	add	r2, r1
 800576a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800576e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	e000      	b.n	8005778 <USB_HC_Halt+0x1f0>
          break;
 8005776:	bf00      	nop
    }
  }

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fa8d 	bl	8004cb4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800579a:	2110      	movs	r1, #16
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff fac3 	bl	8004d28 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff fae4 	bl	8004d70 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	e01f      	b.n	80057ee <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e2:	461a      	mov	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	3301      	adds	r3, #1
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b0f      	cmp	r3, #15
 80057f2:	d9dc      	bls.n	80057ae <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80057f4:	2300      	movs	r3, #0
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	e034      	b.n	8005864 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005810:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005818:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005820:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582e:	461a      	mov	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	3301      	adds	r3, #1
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005840:	d80c      	bhi.n	800585c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4413      	add	r3, r2
 800584a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005858:	d0ec      	beq.n	8005834 <USB_StopHost+0xb0>
 800585a:	e000      	b.n	800585e <USB_StopHost+0xda>
        break;
 800585c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	3301      	adds	r3, #1
 8005862:	613b      	str	r3, [r7, #16]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b0f      	cmp	r3, #15
 8005868:	d9c7      	bls.n	80057fa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005870:	461a      	mov	r2, r3
 8005872:	f04f 33ff 	mov.w	r3, #4294967295
 8005876:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f04f 32ff 	mov.w	r2, #4294967295
 800587e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff fa07 	bl	8004c94 <USB_EnableGlobalInt>

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b08b      	sub	sp, #44	; 0x2c
 8005894:	af04      	add	r7, sp, #16
 8005896:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058a2:	7919      	ldrb	r1, [r3, #4]
 80058a4:	23ff      	movs	r3, #255	; 0xff
 80058a6:	2201      	movs	r2, #1
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 f87f 	bl	80069ac <USBH_FindInterface>
 80058ae:	4603      	mov	r3, r0
 80058b0:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80058b2:	7dbb      	ldrb	r3, [r7, #22]
 80058b4:	2bff      	cmp	r3, #255	; 0xff
 80058b6:	d002      	beq.n	80058be <USBH_HID_InterfaceInit+0x2e>
 80058b8:	7dbb      	ldrb	r3, [r7, #22]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d90f      	bls.n	80058de <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 80058be:	489c      	ldr	r0, [pc, #624]	; (8005b30 <USBH_HID_InterfaceInit+0x2a0>)
 80058c0:	f002 fe0a 	bl	80084d8 <iprintf>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4619      	mov	r1, r3
 80058ce:	4899      	ldr	r0, [pc, #612]	; (8005b34 <USBH_HID_InterfaceInit+0x2a4>)
 80058d0:	f002 fe02 	bl	80084d8 <iprintf>
 80058d4:	4898      	ldr	r0, [pc, #608]	; (8005b38 <USBH_HID_InterfaceInit+0x2a8>)
 80058d6:	f002 fe73 	bl	80085c0 <puts>
    return USBH_FAIL;
 80058da:	2302      	movs	r3, #2
 80058dc:	e123      	b.n	8005b26 <USBH_HID_InterfaceInit+0x296>
  }

  status = USBH_SelectInterface(phost, interface);
 80058de:	7dbb      	ldrb	r3, [r7, #22]
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fff8 	bl	80068d8 <USBH_SelectInterface>
 80058e8:	4603      	mov	r3, r0
 80058ea:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 80058ec:	7d7b      	ldrb	r3, [r7, #21]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 80058f2:	2302      	movs	r3, #2
 80058f4:	e117      	b.n	8005b26 <USBH_HID_InterfaceInit+0x296>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80058fc:	2034      	movs	r0, #52	; 0x34
 80058fe:	f002 fd2d 	bl	800835c <malloc>
 8005902:	4603      	mov	r3, r0
 8005904:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 8005916:	4886      	ldr	r0, [pc, #536]	; (8005b30 <USBH_HID_InterfaceInit+0x2a0>)
 8005918:	f002 fdde 	bl	80084d8 <iprintf>
 800591c:	4887      	ldr	r0, [pc, #540]	; (8005b3c <USBH_HID_InterfaceInit+0x2ac>)
 800591e:	f002 fddb 	bl	80084d8 <iprintf>
 8005922:	4885      	ldr	r0, [pc, #532]	; (8005b38 <USBH_HID_InterfaceInit+0x2a8>)
 8005924:	f002 fe4c 	bl	80085c0 <puts>
    return USBH_FAIL;
 8005928:	2302      	movs	r3, #2
 800592a:	e0fc      	b.n	8005b26 <USBH_HID_InterfaceInit+0x296>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800592c:	2234      	movs	r2, #52	; 0x34
 800592e:	2100      	movs	r1, #0
 8005930:	6938      	ldr	r0, [r7, #16]
 8005932:	f002 fd23 	bl	800837c <memset>

  HID_Handle->state = HID_ERROR;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	2207      	movs	r2, #7
 800593a:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800593c:	7dbb      	ldrb	r3, [r7, #22]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	211a      	movs	r1, #26
 8005942:	fb01 f303 	mul.w	r3, r1, r3
 8005946:	4413      	add	r3, r2
 8005948:	f203 3347 	addw	r3, r3, #839	; 0x347
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d109      	bne.n	8005966 <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 8005952:	487b      	ldr	r0, [pc, #492]	; (8005b40 <USBH_HID_InterfaceInit+0x2b0>)
 8005954:	f002 fdc0 	bl	80084d8 <iprintf>
 8005958:	4877      	ldr	r0, [pc, #476]	; (8005b38 <USBH_HID_InterfaceInit+0x2a8>)
 800595a:	f002 fe31 	bl	80085c0 <puts>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4a78      	ldr	r2, [pc, #480]	; (8005b44 <USBH_HID_InterfaceInit+0x2b4>)
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
 8005964:	e01c      	b.n	80059a0 <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8005966:	7dbb      	ldrb	r3, [r7, #22]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	211a      	movs	r1, #26
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	4413      	add	r3, r2
 8005972:	f203 3347 	addw	r3, r3, #839	; 0x347
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d109      	bne.n	8005990 <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 800597c:	4872      	ldr	r0, [pc, #456]	; (8005b48 <USBH_HID_InterfaceInit+0x2b8>)
 800597e:	f002 fdab 	bl	80084d8 <iprintf>
 8005982:	486d      	ldr	r0, [pc, #436]	; (8005b38 <USBH_HID_InterfaceInit+0x2a8>)
 8005984:	f002 fe1c 	bl	80085c0 <puts>
    HID_Handle->Init = USBH_HID_MouseInit;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4a70      	ldr	r2, [pc, #448]	; (8005b4c <USBH_HID_InterfaceInit+0x2bc>)
 800598c:	631a      	str	r2, [r3, #48]	; 0x30
 800598e:	e007      	b.n	80059a0 <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 8005990:	486f      	ldr	r0, [pc, #444]	; (8005b50 <USBH_HID_InterfaceInit+0x2c0>)
 8005992:	f002 fda1 	bl	80084d8 <iprintf>
 8005996:	4868      	ldr	r0, [pc, #416]	; (8005b38 <USBH_HID_InterfaceInit+0x2a8>)
 8005998:	f002 fe12 	bl	80085c0 <puts>
    return USBH_FAIL;
 800599c:	2302      	movs	r3, #2
 800599e:	e0c2      	b.n	8005b26 <USBH_HID_InterfaceInit+0x296>
  }

  HID_Handle->state     = HID_INIT;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2200      	movs	r2, #0
 80059a4:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2200      	movs	r2, #0
 80059aa:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80059ac:	7dbb      	ldrb	r3, [r7, #22]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	211a      	movs	r1, #26
 80059b2:	fb01 f303 	mul.w	r3, r1, r3
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80059bc:	781a      	ldrb	r2, [r3, #0]
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80059c2:	7dbb      	ldrb	r3, [r7, #22]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	211a      	movs	r1, #26
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	4413      	add	r3, r2
 80059ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80059d8:	7dbb      	ldrb	r3, [r7, #22]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	211a      	movs	r1, #26
 80059de:	fb01 f303 	mul.w	r3, r1, r3
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	8b9b      	ldrh	r3, [r3, #28]
 80059f4:	2b09      	cmp	r3, #9
 80059f6:	d802      	bhi.n	80059fe <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	220a      	movs	r2, #10
 80059fc:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 80059fe:	7dbb      	ldrb	r3, [r7, #22]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	211a      	movs	r1, #26
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	bf28      	it	cs
 8005a14:	2302      	movcs	r3, #2
 8005a16:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	75fb      	strb	r3, [r7, #23]
 8005a1c:	e07d      	b.n	8005b1a <USBH_HID_InterfaceInit+0x28a>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8005a1e:	7dbb      	ldrb	r3, [r7, #22]
 8005a20:	7df9      	ldrb	r1, [r7, #23]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	3101      	adds	r1, #1
 8005a26:	00c9      	lsls	r1, r1, #3
 8005a28:	201a      	movs	r0, #26
 8005a2a:	fb00 f303 	mul.w	r3, r0, r3
 8005a2e:	440b      	add	r3, r1
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	b25b      	sxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	da35      	bge.n	8005aaa <USBH_HID_InterfaceInit+0x21a>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005a3e:	7dbb      	ldrb	r3, [r7, #22]
 8005a40:	7df9      	ldrb	r1, [r7, #23]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	3101      	adds	r1, #1
 8005a46:	00c9      	lsls	r1, r1, #3
 8005a48:	201a      	movs	r0, #26
 8005a4a:	fb00 f303 	mul.w	r3, r0, r3
 8005a4e:	440b      	add	r3, r1
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8005a56:	781a      	ldrb	r2, [r3, #0]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	791b      	ldrb	r3, [r3, #4]
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f002 f97b 	bl	8007d5e <USBH_AllocPipe>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	7859      	ldrb	r1, [r3, #1]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	7918      	ldrb	r0, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	8b12      	ldrh	r2, [r2, #24]
 8005a88:	9202      	str	r2, [sp, #8]
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	9201      	str	r2, [sp, #4]
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	4623      	mov	r3, r4
 8005a92:	4602      	mov	r2, r0
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f002 f933 	bl	8007d00 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	785b      	ldrb	r3, [r3, #1]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f002 fbeb 	bl	800827e <USBH_LL_SetToggle>
 8005aa8:	e034      	b.n	8005b14 <USBH_HID_InterfaceInit+0x284>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005aaa:	7dbb      	ldrb	r3, [r7, #22]
 8005aac:	7df9      	ldrb	r1, [r7, #23]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	3101      	adds	r1, #1
 8005ab2:	00c9      	lsls	r1, r1, #3
 8005ab4:	201a      	movs	r0, #26
 8005ab6:	fb00 f303 	mul.w	r3, r0, r3
 8005aba:	440b      	add	r3, r1
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	78db      	ldrb	r3, [r3, #3]
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f002 f945 	bl	8007d5e <USBH_AllocPipe>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	7819      	ldrb	r1, [r3, #0]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	78d8      	ldrb	r0, [r3, #3]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	8b12      	ldrh	r2, [r2, #24]
 8005af4:	9202      	str	r2, [sp, #8]
 8005af6:	2203      	movs	r2, #3
 8005af8:	9201      	str	r2, [sp, #4]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	4623      	mov	r3, r4
 8005afe:	4602      	mov	r2, r0
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f002 f8fd 	bl	8007d00 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f002 fbb5 	bl	800827e <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
 8005b16:	3301      	adds	r3, #1
 8005b18:	75fb      	strb	r3, [r7, #23]
 8005b1a:	7dfa      	ldrb	r2, [r7, #23]
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	f4ff af7d 	bcc.w	8005a1e <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd90      	pop	{r4, r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	080092d0 	.word	0x080092d0
 8005b34:	080092dc 	.word	0x080092dc
 8005b38:	08009304 	.word	0x08009304
 8005b3c:	08009308 	.word	0x08009308
 8005b40:	08009330 	.word	0x08009330
 8005b44:	08006235 	.word	0x08006235
 8005b48:	08009348 	.word	0x08009348
 8005b4c:	08006485 	.word	0x08006485
 8005b50:	0800935c 	.word	0x0800935c

08005b54 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	785b      	ldrb	r3, [r3, #1]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00e      	beq.n	8005b8c <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	4619      	mov	r1, r3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f002 f8e2 	bl	8007d3e <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	785b      	ldrb	r3, [r3, #1]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f002 f90c 	bl	8007d9e <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00e      	beq.n	8005bb2 <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f002 f8cf 	bl	8007d3e <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f002 f8f9 	bl	8007d9e <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00b      	beq.n	8005bd6 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f002 fbd0 	bl	800836c <free>
    phost->pActiveClass->pData = 0U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8005be8:	2301      	movs	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	795b      	ldrb	r3, [r3, #5]
 8005bfe:	2b05      	cmp	r3, #5
 8005c00:	d858      	bhi.n	8005cb4 <USBH_HID_ClassRequest+0xd4>
 8005c02:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <USBH_HID_ClassRequest+0x28>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c21 	.word	0x08005c21
 8005c0c:	08005cb5 	.word	0x08005cb5
 8005c10:	08005c4b 	.word	0x08005c4b
 8005c14:	08005c21 	.word	0x08005c21
 8005c18:	08005c65 	.word	0x08005c65
 8005c1c:	08005c8f 	.word	0x08005c8f
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      /* Get HID Desc */
      if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE) == USBH_OK)
 8005c20:	2109      	movs	r1, #9
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f951 	bl	8005eca <USBH_HID_GetHIDDescriptor>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d144      	bne.n	8005cb8 <USBH_HID_ClassRequest+0xd8>
      {

        USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	f000 f9d7 	bl	8005ff0 <USBH_HID_ParseHIDDesc>
        HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2202      	movs	r2, #2
 8005c46:	715a      	strb	r2, [r3, #5]
      }

      break;
 8005c48:	e036      	b.n	8005cb8 <USBH_HID_ClassRequest+0xd8>
    case HID_REQ_GET_REPORT_DESC:


      /* Get Report Desc */
      if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f921 	bl	8005e98 <USBH_HID_GetHIDReportDescriptor>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d12f      	bne.n	8005cbc <USBH_HID_ClassRequest+0xdc>
      {
        /* The descriptor is available in phost->device.Data */

        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	715a      	strb	r2, [r3, #5]
      }

      break;
 8005c62:	e02b      	b.n	8005cbc <USBH_HID_ClassRequest+0xdc>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8005c64:	2200      	movs	r2, #0
 8005c66:	2100      	movs	r1, #0
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f947 	bl	8005efc <USBH_HID_SetIdle>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8005c72:	7bbb      	ldrb	r3, [r7, #14]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2205      	movs	r2, #5
 8005c7c:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8005c7e:	e01f      	b.n	8005cc0 <USBH_HID_ClassRequest+0xe0>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8005c80:	7bbb      	ldrb	r3, [r7, #14]
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d11c      	bne.n	8005cc0 <USBH_HID_ClassRequest+0xe0>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2205      	movs	r2, #5
 8005c8a:	715a      	strb	r2, [r3, #5]
      break;
 8005c8c:	e018      	b.n	8005cc0 <USBH_HID_ClassRequest+0xe0>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      if (USBH_HID_SetProtocol(phost, 0U) == USBH_OK)
 8005c8e:	2100      	movs	r1, #0
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f987 	bl	8005fa4 <USBH_HID_SetProtocol>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d113      	bne.n	8005cc4 <USBH_HID_ClassRequest+0xe4>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8005ca8:	2102      	movs	r1, #2
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
        status = USBH_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cb2:	e007      	b.n	8005cc4 <USBH_HID_ClassRequest+0xe4>

    case HID_REQ_IDLE:
    default:
      break;
 8005cb4:	bf00      	nop
 8005cb6:	e006      	b.n	8005cc6 <USBH_HID_ClassRequest+0xe6>
      break;
 8005cb8:	bf00      	nop
 8005cba:	e004      	b.n	8005cc6 <USBH_HID_ClassRequest+0xe6>
      break;
 8005cbc:	bf00      	nop
 8005cbe:	e002      	b.n	8005cc6 <USBH_HID_ClassRequest+0xe6>
      break;
 8005cc0:	bf00      	nop
 8005cc2:	e000      	b.n	8005cc6 <USBH_HID_ClassRequest+0xe6>
      break;
 8005cc4:	bf00      	nop
  }

  return status;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	789b      	ldrb	r3, [r3, #2]
 8005cea:	2b06      	cmp	r3, #6
 8005cec:	f200 80a9 	bhi.w	8005e42 <USBH_HID_Process+0x172>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <USBH_HID_Process+0x28>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d15 	.word	0x08005d15
 8005cfc:	08005d25 	.word	0x08005d25
 8005d00:	08005e43 	.word	0x08005e43
 8005d04:	08005e43 	.word	0x08005e43
 8005d08:	08005d95 	.word	0x08005d95
 8005d0c:	08005d7f 	.word	0x08005d7f
 8005d10:	08005dc3 	.word	0x08005dc3
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d22:	e093      	b.n	8005e4c <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	8b1b      	ldrh	r3, [r3, #24]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	2200      	movs	r2, #0
 8005d34:	2101      	movs	r1, #1
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f908 	bl	8005f4c <USBH_HID_GetReport>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d103      	bne.n	8005d4e <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2205      	movs	r2, #5
 8005d4a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d4c:	e07e      	b.n	8005e4c <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d105      	bne.n	8005d60 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	2201      	movs	r2, #1
 8005d58:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d5e:	e075      	b.n	8005e4c <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d105      	bne.n	8005d72 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2205      	movs	r2, #5
 8005d6a:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d70:	e06c      	b.n	8005e4c <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2207      	movs	r2, #7
 8005d76:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d7c:	e066      	b.n	8005e4c <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d05c      	beq.n	8005e46 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d92:	e058      	b.n	8005e46 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f001 ff8d 	bl	8007cc2 <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2206      	movs	r2, #6
 8005dac:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8005dc0:	e044      	b.n	8005e4c <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	785b      	ldrb	r3, [r3, #1]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f002 fa37 	bl	800823c <USBH_LL_GetURBState>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d120      	bne.n	8005e16 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f002 f99c 	bl	8008118 <USBH_LL_GetLastXferSize>
 8005de0:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d12e      	bne.n	8005e4a <USBH_HID_Process+0x17a>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02b      	beq.n	8005e4a <USBH_HID_Process+0x17a>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f103 0008 	add.w	r0, r3, #8
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	6959      	ldr	r1, [r3, #20]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	8b1b      	ldrh	r3, [r3, #24]
 8005e00:	461a      	mov	r2, r3
 8005e02:	f000 f9bb 	bl	800617c <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa07 	bl	8006222 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8005e14:	e019      	b.n	8005e4a <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f002 fa0d 	bl	800823c <USBH_LL_GetURBState>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b05      	cmp	r3, #5
 8005e26:	d110      	bne.n	8005e4a <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	7e9b      	ldrb	r3, [r3, #26]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 fb4b 	bl	80074ca <USBH_ClrFeature>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d107      	bne.n	8005e4a <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	709a      	strb	r2, [r3, #2]
      break;
 8005e40:	e003      	b.n	8005e4a <USBH_HID_Process+0x17a>

    default:
      break;
 8005e42:	bf00      	nop
 8005e44:	e002      	b.n	8005e4c <USBH_HID_Process+0x17c>
      break;
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <USBH_HID_Process+0x17c>
      break;
 8005e4a:	bf00      	nop
  }

  return status;
 8005e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop

08005e58 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	789b      	ldrb	r3, [r3, #2]
 8005e6e:	2b06      	cmp	r3, #6
 8005e70:	d10c      	bne.n	8005e8c <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	8b92      	ldrh	r2, [r2, #28]
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d302      	bcc.n	8005e8c <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2204      	movs	r2, #4
 8005e8a:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005eaa:	887b      	ldrh	r3, [r7, #2]
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f001 fa67 	bl	800738a <USBH_GetDescriptor>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor(USBH_HandleTypeDef *phost,
                                             uint16_t length)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b086      	sub	sp, #24
 8005ece:	af02      	add	r7, sp, #8
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID,
                              phost->device.Data,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005edc:	887b      	ldrh	r3, [r7, #2]
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f001 fa4e 	bl	800738a <USBH_GetDescriptor>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	73fb      	strb	r3, [r7, #15]
                              length);

  return status;
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2221      	movs	r2, #33	; 0x21
 8005f10:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	220a      	movs	r2, #10
 8005f16:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	78bb      	ldrb	r3, [r7, #2]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	4313      	orrs	r3, r2
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 fc9f 	bl	8007880 <USBH_CtlReq>
 8005f42:	4603      	mov	r3, r0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	607b      	str	r3, [r7, #4]
 8005f56:	460b      	mov	r3, r1
 8005f58:	72fb      	strb	r3, [r7, #11]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	22a1      	movs	r2, #161	; 0xa1
 8005f62:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2201      	movs	r2, #1
 8005f68:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8005f6a:	7afb      	ldrb	r3, [r7, #11]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	7abb      	ldrb	r3, [r7, #10]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	4313      	orrs	r3, r2
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8005f84:	7e3b      	ldrb	r3, [r7, #24]
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8005f8c:	7e3b      	ldrb	r3, [r7, #24]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	461a      	mov	r2, r3
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f001 fc73 	bl	8007880 <USBH_CtlReq>
 8005f9a:	4603      	mov	r3, r0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2221      	movs	r2, #33	; 0x21
 8005fb4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	220b      	movs	r2, #11
 8005fba:	745a      	strb	r2, [r3, #17]
  if (protocol)
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	825a      	strh	r2, [r3, #18]
 8005fc8:	e002      	b.n	8005fd0 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2100      	movs	r1, #0
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 fc4d 	bl	8007880 <USBH_CtlReq>
 8005fe6:	4603      	mov	r3, r0

}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]

  desc->bLength                  = *(uint8_t *)(buf + 0);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781a      	ldrb	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t *)(buf + 1);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	785a      	ldrb	r2, [r3, #1]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16(buf + 2);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	3302      	adds	r3, #2
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	b29a      	uxth	r2, r3
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	3303      	adds	r3, #3
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	021b      	lsls	r3, r3, #8
 800601c:	b29b      	uxth	r3, r3
 800601e:	4313      	orrs	r3, r2
 8006020:	b29a      	uxth	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t *)(buf + 4);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	791a      	ldrb	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t *)(buf + 5);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	795a      	ldrb	r2, [r3, #5]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t *)(buf + 6);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	799a      	ldrb	r2, [r3, #6]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16(buf + 7);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	3307      	adds	r3, #7
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	b29a      	uxth	r2, r3
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	3308      	adds	r3, #8
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	b29b      	uxth	r3, r3
 8006052:	4313      	orrs	r3, r2
 8006054:	b29a      	uxth	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	811a      	strh	r2, [r3, #8]
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr

08006064 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 800606c:	23ff      	movs	r3, #255	; 0xff
 800606e:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b0b      	cmp	r3, #11
 8006078:	d117      	bne.n	80060aa <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006080:	4619      	mov	r1, r3
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	231a      	movs	r3, #26
 8006086:	fb03 f301 	mul.w	r3, r3, r1
 800608a:	4413      	add	r3, r2
 800608c:	f203 3347 	addw	r3, r3, #839	; 0x347
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8006094:	7bbb      	ldrb	r3, [r7, #14]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d102      	bne.n	80060a0 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 800609a:	2302      	movs	r3, #2
 800609c:	73fb      	strb	r3, [r7, #15]
 800609e:	e004      	b.n	80060aa <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d101      	bne.n	80060aa <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 80060a6:	2301      	movs	r3, #1
 80060a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr

080060b6 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	4613      	mov	r3, r2
 80060c2:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	729a      	strb	r2, [r3, #10]
  f->size = size;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	88fa      	ldrh	r2, [r7, #6]
 80060da:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	601a      	str	r2, [r3, #0]
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr

080060ec <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	7a9b      	ldrb	r3, [r3, #10]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d131      	bne.n	800616a <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800610c:	2300      	movs	r3, #0
 800610e:	82fb      	strh	r3, [r7, #22]
 8006110:	e027      	b.n	8006162 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	88da      	ldrh	r2, [r3, #6]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	889b      	ldrh	r3, [r3, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d019      	beq.n	8006152 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	88d2      	ldrh	r2, [r2, #6]
 8006126:	441a      	add	r2, r3
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	6139      	str	r1, [r7, #16]
 800612e:	7812      	ldrb	r2, [r2, #0]
 8006130:	701a      	strb	r2, [r3, #0]
        f->tail++;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	88db      	ldrh	r3, [r3, #6]
 8006136:	3301      	adds	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	88da      	ldrh	r2, [r3, #6]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	891b      	ldrh	r3, [r3, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	d108      	bne.n	800615c <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	80da      	strh	r2, [r3, #6]
 8006150:	e004      	b.n	800615c <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	729a      	strb	r2, [r3, #10]
        return i;
 8006158:	8afb      	ldrh	r3, [r7, #22]
 800615a:	e00a      	b.n	8006172 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800615c:	8afb      	ldrh	r3, [r7, #22]
 800615e:	3301      	adds	r3, #1
 8006160:	82fb      	strh	r3, [r7, #22]
 8006162:	8afa      	ldrh	r2, [r7, #22]
 8006164:	88fb      	ldrh	r3, [r7, #6]
 8006166:	429a      	cmp	r2, r3
 8006168:	d3d3      	bcc.n	8006112 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8006170:	88fb      	ldrh	r3, [r7, #6]
}
 8006172:	4618      	mov	r0, r3
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	bc80      	pop	{r7}
 800617a:	4770      	bx	lr

0800617c <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	7a9b      	ldrb	r3, [r3, #10]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d13c      	bne.n	8006210 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2201      	movs	r2, #1
 800619a:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800619c:	2300      	movs	r3, #0
 800619e:	82fb      	strh	r3, [r7, #22]
 80061a0:	e032      	b.n	8006208 <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	889b      	ldrh	r3, [r3, #4]
 80061a6:	3301      	adds	r3, #1
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	88d2      	ldrh	r2, [r2, #6]
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00a      	beq.n	80061c6 <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	889b      	ldrh	r3, [r3, #4]
 80061b4:	3301      	adds	r3, #1
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d108      	bne.n	80061d0 <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	88db      	ldrh	r3, [r3, #6]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	729a      	strb	r2, [r3, #10]
        return i;
 80061cc:	8afb      	ldrh	r3, [r7, #22]
 80061ce:	e023      	b.n	8006218 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	613a      	str	r2, [r7, #16]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	68f9      	ldr	r1, [r7, #12]
 80061dc:	8889      	ldrh	r1, [r1, #4]
 80061de:	440a      	add	r2, r1
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	7013      	strb	r3, [r2, #0]
        f->head++;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	889b      	ldrh	r3, [r3, #4]
 80061e8:	3301      	adds	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	889a      	ldrh	r2, [r3, #4]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	891b      	ldrh	r3, [r3, #8]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d102      	bne.n	8006202 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8006202:	8afb      	ldrh	r3, [r7, #22]
 8006204:	3301      	adds	r3, #1
 8006206:	82fb      	strh	r3, [r7, #22]
 8006208:	8afa      	ldrh	r2, [r7, #22]
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	429a      	cmp	r2, r3
 800620e:	d3c8      	bcc.n	80061a2 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8006216:	88fb      	ldrh	r3, [r7, #6]
}
 8006218:	4618      	mov	r0, r3
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr

08006222 <USBH_HID_EventCallback>:
* @brief  The function is a callback about HID Data events
*  @param  phost: Selected device
* @retval None
*/
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr

08006234 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8006246:	4b24      	ldr	r3, [pc, #144]	; (80062d8 <USBH_HID_KeybdInit+0xa4>)
 8006248:	2200      	movs	r2, #0
 800624a:	709a      	strb	r2, [r3, #2]
 800624c:	4b22      	ldr	r3, [pc, #136]	; (80062d8 <USBH_HID_KeybdInit+0xa4>)
 800624e:	789a      	ldrb	r2, [r3, #2]
 8006250:	4b21      	ldr	r3, [pc, #132]	; (80062d8 <USBH_HID_KeybdInit+0xa4>)
 8006252:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8006254:	4b20      	ldr	r3, [pc, #128]	; (80062d8 <USBH_HID_KeybdInit+0xa4>)
 8006256:	2200      	movs	r2, #0
 8006258:	711a      	strb	r2, [r3, #4]
 800625a:	4b1f      	ldr	r3, [pc, #124]	; (80062d8 <USBH_HID_KeybdInit+0xa4>)
 800625c:	791a      	ldrb	r2, [r3, #4]
 800625e:	4b1e      	ldr	r3, [pc, #120]	; (80062d8 <USBH_HID_KeybdInit+0xa4>)
 8006260:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8006262:	4b1d      	ldr	r3, [pc, #116]	; (80062d8 <USBH_HID_KeybdInit+0xa4>)
 8006264:	2200      	movs	r2, #0
 8006266:	719a      	strb	r2, [r3, #6]
 8006268:	4b1b      	ldr	r3, [pc, #108]	; (80062d8 <USBH_HID_KeybdInit+0xa4>)
 800626a:	799a      	ldrb	r2, [r3, #6]
 800626c:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <USBH_HID_KeybdInit+0xa4>)
 800626e:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8006270:	4b19      	ldr	r3, [pc, #100]	; (80062d8 <USBH_HID_KeybdInit+0xa4>)
 8006272:	2200      	movs	r2, #0
 8006274:	721a      	strb	r2, [r3, #8]
 8006276:	4b18      	ldr	r3, [pc, #96]	; (80062d8 <USBH_HID_KeybdInit+0xa4>)
 8006278:	7a1a      	ldrb	r2, [r3, #8]
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <USBH_HID_KeybdInit+0xa4>)
 800627c:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	e00c      	b.n	800629e <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8006284:	4a15      	ldr	r2, [pc, #84]	; (80062dc <USBH_HID_KeybdInit+0xa8>)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2100      	movs	r1, #0
 800628a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800628e:	4a14      	ldr	r2, [pc, #80]	; (80062e0 <USBH_HID_KeybdInit+0xac>)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2100      	movs	r1, #0
 8006294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d9ef      	bls.n	8006284 <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	8b1b      	ldrh	r3, [r3, #24]
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d902      	bls.n	80062b2 <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2208      	movs	r2, #8
 80062b0:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4a0a      	ldr	r2, [pc, #40]	; (80062e0 <USBH_HID_KeybdInit+0xac>)
 80062b6:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f103 0008 	add.w	r0, r3, #8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80062c4:	2250      	movs	r2, #80	; 0x50
 80062c6:	4619      	mov	r1, r3
 80062c8:	f7ff fef5 	bl	80060b6 <USBH_HID_FifoInit>

  return USBH_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000188 	.word	0x20000188
 80062dc:	20000178 	.word	0x20000178
 80062e0:	20000180 	.word	0x20000180

080062e4 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f80d 	bl	800630c <USBH_HID_KeybdDecode>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 80062f8:	4b03      	ldr	r3, [pc, #12]	; (8006308 <USBH_HID_GetKeybdInfo+0x24>)
 80062fa:	e000      	b.n	80062fe <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 80062fc:	2300      	movs	r3, #0
  }
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20000188 	.word	0x20000188

0800630c <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	8b1b      	ldrh	r3, [r3, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 8006326:	2302      	movs	r3, #2
 8006328:	e066      	b.n	80063f8 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f103 0008 	add.w	r0, r3, #8
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	8b1b      	ldrh	r3, [r3, #24]
 8006334:	461a      	mov	r2, r3
 8006336:	4932      	ldr	r1, [pc, #200]	; (8006400 <USBH_HID_KeybdDecode+0xf4>)
 8006338:	f7ff fed8 	bl	80060ec <USBH_HID_FifoRead>
 800633c:	4603      	mov	r3, r0
 800633e:	461a      	mov	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	8b1b      	ldrh	r3, [r3, #24]
 8006344:	429a      	cmp	r2, r3
 8006346:	d156      	bne.n	80063f6 <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8006348:	2100      	movs	r1, #0
 800634a:	482e      	ldr	r0, [pc, #184]	; (8006404 <USBH_HID_KeybdDecode+0xf8>)
 800634c:	f000 f954 	bl	80065f8 <HID_ReadItem>
 8006350:	4603      	mov	r3, r0
 8006352:	b2da      	uxtb	r2, r3
 8006354:	4b2c      	ldr	r3, [pc, #176]	; (8006408 <USBH_HID_KeybdDecode+0xfc>)
 8006356:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8006358:	2100      	movs	r1, #0
 800635a:	482c      	ldr	r0, [pc, #176]	; (800640c <USBH_HID_KeybdDecode+0x100>)
 800635c:	f000 f94c 	bl	80065f8 <HID_ReadItem>
 8006360:	4603      	mov	r3, r0
 8006362:	b2da      	uxtb	r2, r3
 8006364:	4b28      	ldr	r3, [pc, #160]	; (8006408 <USBH_HID_KeybdDecode+0xfc>)
 8006366:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8006368:	2100      	movs	r1, #0
 800636a:	4829      	ldr	r0, [pc, #164]	; (8006410 <USBH_HID_KeybdDecode+0x104>)
 800636c:	f000 f944 	bl	80065f8 <HID_ReadItem>
 8006370:	4603      	mov	r3, r0
 8006372:	b2da      	uxtb	r2, r3
 8006374:	4b24      	ldr	r3, [pc, #144]	; (8006408 <USBH_HID_KeybdDecode+0xfc>)
 8006376:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8006378:	2100      	movs	r1, #0
 800637a:	4826      	ldr	r0, [pc, #152]	; (8006414 <USBH_HID_KeybdDecode+0x108>)
 800637c:	f000 f93c 	bl	80065f8 <HID_ReadItem>
 8006380:	4603      	mov	r3, r0
 8006382:	b2da      	uxtb	r2, r3
 8006384:	4b20      	ldr	r3, [pc, #128]	; (8006408 <USBH_HID_KeybdDecode+0xfc>)
 8006386:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8006388:	2100      	movs	r1, #0
 800638a:	4823      	ldr	r0, [pc, #140]	; (8006418 <USBH_HID_KeybdDecode+0x10c>)
 800638c:	f000 f934 	bl	80065f8 <HID_ReadItem>
 8006390:	4603      	mov	r3, r0
 8006392:	b2da      	uxtb	r2, r3
 8006394:	4b1c      	ldr	r3, [pc, #112]	; (8006408 <USBH_HID_KeybdDecode+0xfc>)
 8006396:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8006398:	2100      	movs	r1, #0
 800639a:	4820      	ldr	r0, [pc, #128]	; (800641c <USBH_HID_KeybdDecode+0x110>)
 800639c:	f000 f92c 	bl	80065f8 <HID_ReadItem>
 80063a0:	4603      	mov	r3, r0
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	4b18      	ldr	r3, [pc, #96]	; (8006408 <USBH_HID_KeybdDecode+0xfc>)
 80063a6:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 80063a8:	2100      	movs	r1, #0
 80063aa:	481d      	ldr	r0, [pc, #116]	; (8006420 <USBH_HID_KeybdDecode+0x114>)
 80063ac:	f000 f924 	bl	80065f8 <HID_ReadItem>
 80063b0:	4603      	mov	r3, r0
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	4b14      	ldr	r3, [pc, #80]	; (8006408 <USBH_HID_KeybdDecode+0xfc>)
 80063b6:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 80063b8:	2100      	movs	r1, #0
 80063ba:	481a      	ldr	r0, [pc, #104]	; (8006424 <USBH_HID_KeybdDecode+0x118>)
 80063bc:	f000 f91c 	bl	80065f8 <HID_ReadItem>
 80063c0:	4603      	mov	r3, r0
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	4b10      	ldr	r3, [pc, #64]	; (8006408 <USBH_HID_KeybdDecode+0xfc>)
 80063c6:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]
 80063cc:	e00e      	b.n	80063ec <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	4619      	mov	r1, r3
 80063d2:	4815      	ldr	r0, [pc, #84]	; (8006428 <USBH_HID_KeybdDecode+0x11c>)
 80063d4:	f000 f910 	bl	80065f8 <HID_ReadItem>
 80063d8:	4602      	mov	r2, r0
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	b2d1      	uxtb	r1, r2
 80063de:	4a0a      	ldr	r2, [pc, #40]	; (8006408 <USBH_HID_KeybdDecode+0xfc>)
 80063e0:	4413      	add	r3, r2
 80063e2:	460a      	mov	r2, r1
 80063e4:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	3301      	adds	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	2b05      	cmp	r3, #5
 80063f0:	d9ed      	bls.n	80063ce <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	e000      	b.n	80063f8 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 80063f6:	2302      	movs	r3, #2
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20000178 	.word	0x20000178
 8006404:	0800967c 	.word	0x0800967c
 8006408:	20000188 	.word	0x20000188
 800640c:	0800969c 	.word	0x0800969c
 8006410:	080096bc 	.word	0x080096bc
 8006414:	080096dc 	.word	0x080096dc
 8006418:	080096fc 	.word	0x080096fc
 800641c:	0800971c 	.word	0x0800971c
 8006420:	0800973c 	.word	0x0800973c
 8006424:	0800975c 	.word	0x0800975c
 8006428:	0800977c 	.word	0x0800977c

0800642c <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift == 1U) || (info->rshift))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	789b      	ldrb	r3, [r3, #2]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d003      	beq.n	8006444 <USBH_HID_GetASCIICode+0x18>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	799b      	ldrb	r3, [r3, #6]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	7a5b      	ldrb	r3, [r3, #9]
 8006448:	461a      	mov	r2, r3
 800644a:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <USBH_HID_GetASCIICode+0x4c>)
 800644c:	5c9b      	ldrb	r3, [r3, r2]
 800644e:	461a      	mov	r2, r3
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <USBH_HID_GetASCIICode+0x50>)
 8006452:	5c9b      	ldrb	r3, [r3, r2]
 8006454:	73fb      	strb	r3, [r7, #15]
 8006456:	e008      	b.n	800646a <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	7a5b      	ldrb	r3, [r3, #9]
 800645c:	461a      	mov	r2, r3
 800645e:	4b06      	ldr	r3, [pc, #24]	; (8006478 <USBH_HID_GetASCIICode+0x4c>)
 8006460:	5c9b      	ldrb	r3, [r3, r2]
 8006462:	461a      	mov	r2, r3
 8006464:	4b06      	ldr	r3, [pc, #24]	; (8006480 <USBH_HID_GetASCIICode+0x54>)
 8006466:	5c9b      	ldrb	r3, [r3, r2]
 8006468:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	bc80      	pop	{r7}
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	080098a4 	.word	0x080098a4
 800647c:	08009820 	.word	0x08009820
 8006480:	0800979c 	.word	0x0800979c

08006484 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8006496:	4b1d      	ldr	r3, [pc, #116]	; (800650c <USBH_HID_MouseInit+0x88>)
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800649c:	4b1b      	ldr	r3, [pc, #108]	; (800650c <USBH_HID_MouseInit+0x88>)
 800649e:	2200      	movs	r2, #0
 80064a0:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 80064a2:	4b1a      	ldr	r3, [pc, #104]	; (800650c <USBH_HID_MouseInit+0x88>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80064a8:	4b18      	ldr	r3, [pc, #96]	; (800650c <USBH_HID_MouseInit+0x88>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80064ae:	4b17      	ldr	r3, [pc, #92]	; (800650c <USBH_HID_MouseInit+0x88>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e00c      	b.n	80064d4 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 80064ba:	4a15      	ldr	r2, [pc, #84]	; (8006510 <USBH_HID_MouseInit+0x8c>)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2100      	movs	r1, #0
 80064c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 80064c4:	4a13      	ldr	r2, [pc, #76]	; (8006514 <USBH_HID_MouseInit+0x90>)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2100      	movs	r1, #0
 80064ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3301      	adds	r3, #1
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d9ef      	bls.n	80064ba <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	8b1b      	ldrh	r3, [r3, #24]
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d902      	bls.n	80064e8 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2208      	movs	r2, #8
 80064e6:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a0a      	ldr	r2, [pc, #40]	; (8006514 <USBH_HID_MouseInit+0x90>)
 80064ec:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f103 0008 	add.w	r0, r3, #8
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80064fa:	2250      	movs	r2, #80	; 0x50
 80064fc:	4619      	mov	r1, r3
 80064fe:	f7ff fdda 	bl	80060b6 <USBH_HID_FifoInit>

  return USBH_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	20000198 	.word	0x20000198
 8006510:	200001a0 	.word	0x200001a0
 8006514:	200001a8 	.word	0x200001a8

08006518 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f80d 	bl	8006540 <USBH_HID_MouseDecode>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 800652c:	4b03      	ldr	r3, [pc, #12]	; (800653c <USBH_HID_GetMouseInfo+0x24>)
 800652e:	e000      	b.n	8006532 <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 8006530:	2300      	movs	r3, #0
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000198 	.word	0x20000198

08006540 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->length == 0U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8b1b      	ldrh	r3, [r3, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <USBH_HID_MouseDecode+0x1e>
  {
    return USBH_FAIL;
 800655a:	2302      	movs	r3, #2
 800655c:	e039      	b.n	80065d2 <USBH_HID_MouseDecode+0x92>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) ==  HID_Handle->length)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f103 0008 	add.w	r0, r3, #8
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8b1b      	ldrh	r3, [r3, #24]
 8006568:	461a      	mov	r2, r3
 800656a:	491c      	ldr	r1, [pc, #112]	; (80065dc <USBH_HID_MouseDecode+0x9c>)
 800656c:	f7ff fdbe 	bl	80060ec <USBH_HID_FifoRead>
 8006570:	4603      	mov	r3, r0
 8006572:	461a      	mov	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8b1b      	ldrh	r3, [r3, #24]
 8006578:	429a      	cmp	r2, r3
 800657a:	d129      	bne.n	80065d0 <USBH_HID_MouseDecode+0x90>
  {
    /*Decode report */
    mouse_info.x = (int8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 800657c:	2100      	movs	r1, #0
 800657e:	4818      	ldr	r0, [pc, #96]	; (80065e0 <USBH_HID_MouseDecode+0xa0>)
 8006580:	f000 f83a 	bl	80065f8 <HID_ReadItem>
 8006584:	4603      	mov	r3, r0
 8006586:	b2da      	uxtb	r2, r3
 8006588:	4b16      	ldr	r3, [pc, #88]	; (80065e4 <USBH_HID_MouseDecode+0xa4>)
 800658a:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (int8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 800658c:	2100      	movs	r1, #0
 800658e:	4816      	ldr	r0, [pc, #88]	; (80065e8 <USBH_HID_MouseDecode+0xa8>)
 8006590:	f000 f832 	bl	80065f8 <HID_ReadItem>
 8006594:	4603      	mov	r3, r0
 8006596:	b2da      	uxtb	r2, r3
 8006598:	4b12      	ldr	r3, [pc, #72]	; (80065e4 <USBH_HID_MouseDecode+0xa4>)
 800659a:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 800659c:	2100      	movs	r1, #0
 800659e:	4813      	ldr	r0, [pc, #76]	; (80065ec <USBH_HID_MouseDecode+0xac>)
 80065a0:	f000 f82a 	bl	80065f8 <HID_ReadItem>
 80065a4:	4603      	mov	r3, r0
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	4b0e      	ldr	r3, [pc, #56]	; (80065e4 <USBH_HID_MouseDecode+0xa4>)
 80065aa:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 80065ac:	2100      	movs	r1, #0
 80065ae:	4810      	ldr	r0, [pc, #64]	; (80065f0 <USBH_HID_MouseDecode+0xb0>)
 80065b0:	f000 f822 	bl	80065f8 <HID_ReadItem>
 80065b4:	4603      	mov	r3, r0
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <USBH_HID_MouseDecode+0xa4>)
 80065ba:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 80065bc:	2100      	movs	r1, #0
 80065be:	480d      	ldr	r0, [pc, #52]	; (80065f4 <USBH_HID_MouseDecode+0xb4>)
 80065c0:	f000 f81a 	bl	80065f8 <HID_ReadItem>
 80065c4:	4603      	mov	r3, r0
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <USBH_HID_MouseDecode+0xa4>)
 80065ca:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	e000      	b.n	80065d2 <USBH_HID_MouseDecode+0x92>
  }
  return   USBH_FAIL;
 80065d0:	2302      	movs	r3, #2
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	200001a0 	.word	0x200001a0
 80065e0:	080099ec 	.word	0x080099ec
 80065e4:	20000198 	.word	0x20000198
 80065e8:	08009a0c 	.word	0x08009a0c
 80065ec:	0800998c 	.word	0x0800998c
 80065f0:	080099ac 	.word	0x080099ac
 80065f4:	080099cc 	.word	0x080099cc

080065f8 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b089      	sub	sp, #36	; 0x24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	7a1b      	ldrb	r3, [r3, #8]
 8006616:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	7a5b      	ldrb	r3, [r3, #9]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01a      	beq.n	8006656 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	7a5b      	ldrb	r3, [r3, #9]
 8006624:	78fa      	ldrb	r2, [r7, #3]
 8006626:	429a      	cmp	r2, r3
 8006628:	d301      	bcc.n	800662e <HID_ReadItem+0x36>
    {
      return (0U);
 800662a:	2300      	movs	r3, #0
 800662c:	e076      	b.n	800671c <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6852      	ldr	r2, [r2, #4]
 8006634:	fb02 f303 	mul.w	r3, r2, r3
 8006638:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800663a:	7cfb      	ldrb	r3, [r7, #19]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	08db      	lsrs	r3, r3, #3
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4413      	add	r3, r2
 800664a:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8006656:	2300      	movs	r3, #0
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	e00a      	b.n	8006672 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	3301      	adds	r3, #1
 8006670:	61bb      	str	r3, [r7, #24]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <HID_ReadItem+0x90>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	08db      	lsrs	r3, r3, #3
 8006684:	3301      	adds	r3, #1
 8006686:	e002      	b.n	800668e <HID_ReadItem+0x96>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	08db      	lsrs	r3, r3, #3
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4293      	cmp	r3, r2
 8006692:	d8e3      	bhi.n	800665c <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 8006694:	7cfb      	ldrb	r3, [r7, #19]
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	40da      	lsrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2101      	movs	r1, #1
 80066a0:	fa01 f303 	lsl.w	r3, r1, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	4013      	ands	r3, r2
 80066a8:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d304      	bcc.n	80066be <HID_ReadItem+0xc6>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d901      	bls.n	80066c2 <HID_ReadItem+0xca>
  {
    return (0U);
 80066be:	2300      	movs	r3, #0
 80066c0:	e02c      	b.n	800671c <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	7a9b      	ldrb	r3, [r3, #10]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d01d      	beq.n	8006706 <HID_ReadItem+0x10e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	2201      	movs	r2, #1
 80066d2:	409a      	lsls	r2, r3
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	4013      	ands	r3, r2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d014      	beq.n	8006706 <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	fa02 f303 	lsl.w	r3, r2, r3
 80066e6:	425b      	negs	r3, r3
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	e010      	b.n	800671c <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	fb02 f303 	mul.w	r3, r2, r3
 8006704:	e00a      	b.n	800671c <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HID_ReadItem+0x11a>
    {
      return (val);
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	e004      	b.n	800671c <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3724      	adds	r7, #36	; 0x24
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr
	...

08006728 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	4613      	mov	r3, r2
 8006734:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800673c:	481c      	ldr	r0, [pc, #112]	; (80067b0 <USBH_Init+0x88>)
 800673e:	f001 fecb 	bl	80084d8 <iprintf>
 8006742:	481c      	ldr	r0, [pc, #112]	; (80067b4 <USBH_Init+0x8c>)
 8006744:	f001 fec8 	bl	80084d8 <iprintf>
 8006748:	481b      	ldr	r0, [pc, #108]	; (80067b8 <USBH_Init+0x90>)
 800674a:	f001 ff39 	bl	80085c0 <puts>
    return USBH_FAIL;
 800674e:	2302      	movs	r3, #2
 8006750:	e029      	b.n	80067a6 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	79fa      	ldrb	r2, [r7, #7]
 8006756:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f826 	bl	80067bc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f001 fc0e 	bl	8007fc0 <USBH_LL_Init>

  return USBH_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	08009374 	.word	0x08009374
 80067b4:	0800937c 	.word	0x0800937c
 80067b8:	08009390 	.word	0x08009390

080067bc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80067c8:	2300      	movs	r3, #0
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	e008      	b.n	80067e0 <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	32e0      	adds	r2, #224	; 0xe0
 80067d4:	2100      	movs	r1, #0
 80067d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3301      	adds	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b0e      	cmp	r3, #14
 80067e4:	d9f3      	bls.n	80067ce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e009      	b.n	8006800 <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80067f6:	2200      	movs	r2, #0
 80067f8:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3301      	adds	r3, #1
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006806:	d3f1      	bcc.n	80067ec <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2240      	movs	r2, #64	; 0x40
 800682c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d020      	beq.n	80068a6 <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10f      	bne.n	800688e <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006874:	1c59      	adds	r1, r3, #1
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	33dc      	adds	r3, #220	; 0xdc
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	73fb      	strb	r3, [r7, #15]
 800688c:	e016      	b.n	80068bc <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800688e:	480e      	ldr	r0, [pc, #56]	; (80068c8 <USBH_RegisterClass+0x78>)
 8006890:	f001 fe22 	bl	80084d8 <iprintf>
 8006894:	480d      	ldr	r0, [pc, #52]	; (80068cc <USBH_RegisterClass+0x7c>)
 8006896:	f001 fe1f 	bl	80084d8 <iprintf>
 800689a:	480d      	ldr	r0, [pc, #52]	; (80068d0 <USBH_RegisterClass+0x80>)
 800689c:	f001 fe90 	bl	80085c0 <puts>
      status = USBH_FAIL;
 80068a0:	2302      	movs	r3, #2
 80068a2:	73fb      	strb	r3, [r7, #15]
 80068a4:	e00a      	b.n	80068bc <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 80068a6:	4808      	ldr	r0, [pc, #32]	; (80068c8 <USBH_RegisterClass+0x78>)
 80068a8:	f001 fe16 	bl	80084d8 <iprintf>
 80068ac:	4809      	ldr	r0, [pc, #36]	; (80068d4 <USBH_RegisterClass+0x84>)
 80068ae:	f001 fe13 	bl	80084d8 <iprintf>
 80068b2:	4807      	ldr	r0, [pc, #28]	; (80068d0 <USBH_RegisterClass+0x80>)
 80068b4:	f001 fe84 	bl	80085c0 <puts>
    status = USBH_FAIL;
 80068b8:	2302      	movs	r3, #2
 80068ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	08009374 	.word	0x08009374
 80068cc:	08009394 	.word	0x08009394
 80068d0:	08009390 	.word	0x08009390
 80068d4:	080093b0 	.word	0x080093b0

080068d8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d23c      	bcs.n	800696e <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	78fa      	ldrb	r2, [r7, #3]
 80068f8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	4619      	mov	r1, r3
 8006900:	4823      	ldr	r0, [pc, #140]	; (8006990 <USBH_SelectInterface+0xb8>)
 8006902:	f001 fde9 	bl	80084d8 <iprintf>
 8006906:	4823      	ldr	r0, [pc, #140]	; (8006994 <USBH_SelectInterface+0xbc>)
 8006908:	f001 fe5a 	bl	80085c0 <puts>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	211a      	movs	r1, #26
 8006912:	fb01 f303 	mul.w	r3, r1, r3
 8006916:	4413      	add	r3, r2
 8006918:	f203 3345 	addw	r3, r3, #837	; 0x345
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	4619      	mov	r1, r3
 8006920:	481d      	ldr	r0, [pc, #116]	; (8006998 <USBH_SelectInterface+0xc0>)
 8006922:	f001 fdd9 	bl	80084d8 <iprintf>
 8006926:	481b      	ldr	r0, [pc, #108]	; (8006994 <USBH_SelectInterface+0xbc>)
 8006928:	f001 fe4a 	bl	80085c0 <puts>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	211a      	movs	r1, #26
 8006932:	fb01 f303 	mul.w	r3, r1, r3
 8006936:	4413      	add	r3, r2
 8006938:	f203 3346 	addw	r3, r3, #838	; 0x346
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	4619      	mov	r1, r3
 8006940:	4816      	ldr	r0, [pc, #88]	; (800699c <USBH_SelectInterface+0xc4>)
 8006942:	f001 fdc9 	bl	80084d8 <iprintf>
 8006946:	4813      	ldr	r0, [pc, #76]	; (8006994 <USBH_SelectInterface+0xbc>)
 8006948:	f001 fe3a 	bl	80085c0 <puts>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	211a      	movs	r1, #26
 8006952:	fb01 f303 	mul.w	r3, r1, r3
 8006956:	4413      	add	r3, r2
 8006958:	f203 3347 	addw	r3, r3, #839	; 0x347
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	4619      	mov	r1, r3
 8006960:	480f      	ldr	r0, [pc, #60]	; (80069a0 <USBH_SelectInterface+0xc8>)
 8006962:	f001 fdb9 	bl	80084d8 <iprintf>
 8006966:	480b      	ldr	r0, [pc, #44]	; (8006994 <USBH_SelectInterface+0xbc>)
 8006968:	f001 fe2a 	bl	80085c0 <puts>
 800696c:	e00a      	b.n	8006984 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800696e:	480d      	ldr	r0, [pc, #52]	; (80069a4 <USBH_SelectInterface+0xcc>)
 8006970:	f001 fdb2 	bl	80084d8 <iprintf>
 8006974:	480c      	ldr	r0, [pc, #48]	; (80069a8 <USBH_SelectInterface+0xd0>)
 8006976:	f001 fdaf 	bl	80084d8 <iprintf>
 800697a:	4806      	ldr	r0, [pc, #24]	; (8006994 <USBH_SelectInterface+0xbc>)
 800697c:	f001 fe20 	bl	80085c0 <puts>
    status = USBH_FAIL;
 8006980:	2302      	movs	r3, #2
 8006982:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006984:	7bfb      	ldrb	r3, [r7, #15]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	080093c8 	.word	0x080093c8
 8006994:	08009390 	.word	0x08009390
 8006998:	080093e8 	.word	0x080093e8
 800699c:	080093f8 	.word	0x080093f8
 80069a0:	08009408 	.word	0x08009408
 80069a4:	08009374 	.word	0x08009374
 80069a8:	08009418 	.word	0x08009418

080069ac <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	4608      	mov	r0, r1
 80069b6:	4611      	mov	r1, r2
 80069b8:	461a      	mov	r2, r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	70fb      	strb	r3, [r7, #3]
 80069be:	460b      	mov	r3, r1
 80069c0:	70bb      	strb	r3, [r7, #2]
 80069c2:	4613      	mov	r3, r2
 80069c4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f203 3336 	addw	r3, r3, #822	; 0x336
 80069d4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069d6:	e025      	b.n	8006a24 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
 80069da:	221a      	movs	r2, #26
 80069dc:	fb02 f303 	mul.w	r3, r2, r3
 80069e0:	3308      	adds	r3, #8
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	3302      	adds	r3, #2
 80069e8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	795b      	ldrb	r3, [r3, #5]
 80069ee:	78fa      	ldrb	r2, [r7, #3]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d002      	beq.n	80069fa <USBH_FindInterface+0x4e>
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	2bff      	cmp	r3, #255	; 0xff
 80069f8:	d111      	bne.n	8006a1e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80069fe:	78ba      	ldrb	r2, [r7, #2]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d002      	beq.n	8006a0a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a04:	78bb      	ldrb	r3, [r7, #2]
 8006a06:	2bff      	cmp	r3, #255	; 0xff
 8006a08:	d109      	bne.n	8006a1e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a0e:	787a      	ldrb	r2, [r7, #1]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d002      	beq.n	8006a1a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a14:	787b      	ldrb	r3, [r7, #1]
 8006a16:	2bff      	cmp	r3, #255	; 0xff
 8006a18:	d101      	bne.n	8006a1e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
 8006a1c:	e006      	b.n	8006a2c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	3301      	adds	r3, #1
 8006a22:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d9d6      	bls.n	80069d8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006a2a:	23ff      	movs	r3, #255	; 0xff
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr

08006a36 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 faf4 	bl	800802c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006a44:	2101      	movs	r1, #1
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 fc0b 	bl	8008262 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af04      	add	r7, sp, #16
 8006a5e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006a60:	2302      	movs	r3, #2
 8006a62:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d102      	bne.n	8006a7a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2203      	movs	r2, #3
 8006a78:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b0b      	cmp	r3, #11
 8006a82:	f200 81e6 	bhi.w	8006e52 <USBH_Process+0x3fa>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <USBH_Process+0x34>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006abd 	.word	0x08006abd
 8006a90:	08006aeb 	.word	0x08006aeb
 8006a94:	08006b0b 	.word	0x08006b0b
 8006a98:	08006de1 	.word	0x08006de1
 8006a9c:	08006e53 	.word	0x08006e53
 8006aa0:	08006baf 	.word	0x08006baf
 8006aa4:	08006d51 	.word	0x08006d51
 8006aa8:	08006bf7 	.word	0x08006bf7
 8006aac:	08006c17 	.word	0x08006c17
 8006ab0:	08006c43 	.word	0x08006c43
 8006ab4:	08006c7d 	.word	0x08006c7d
 8006ab8:	08006dc9 	.word	0x08006dc9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 81c6 	beq.w	8006e56 <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Connected");
 8006aca:	48b2      	ldr	r0, [pc, #712]	; (8006d94 <USBH_Process+0x33c>)
 8006acc:	f001 fd04 	bl	80084d8 <iprintf>
 8006ad0:	48b1      	ldr	r0, [pc, #708]	; (8006d98 <USBH_Process+0x340>)
 8006ad2:	f001 fd75 	bl	80085c0 <puts>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006adc:	20c8      	movs	r0, #200	; 0xc8
 8006ade:	f001 fc00 	bl	80082e2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 fafd 	bl	80080e2 <USBH_LL_ResetPort>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006ae8:	e1b5      	b.n	8006e56 <USBH_Process+0x3fe>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	f040 81b2 	bne.w	8006e5a <USBH_Process+0x402>
      {
        USBH_UsrLog("USB Device Reset Completed");
 8006af6:	48a9      	ldr	r0, [pc, #676]	; (8006d9c <USBH_Process+0x344>)
 8006af8:	f001 fcee 	bl	80084d8 <iprintf>
 8006afc:	48a6      	ldr	r0, [pc, #664]	; (8006d98 <USBH_Process+0x340>)
 8006afe:	f001 fd5f 	bl	80085c0 <puts>
        phost->gState = HOST_DEV_ATTACHED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2202      	movs	r2, #2
 8006b06:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006b08:	e1a7      	b.n	8006e5a <USBH_Process+0x402>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <USBH_Process+0xc8>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006b1a:	2104      	movs	r1, #4
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006b20:	2064      	movs	r0, #100	; 0x64
 8006b22:	f001 fbde 	bl	80082e2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 fab6 	bl	8008098 <USBH_LL_GetSpeed>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2205      	movs	r2, #5
 8006b3a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 f90d 	bl	8007d5e <USBH_AllocPipe>
 8006b44:	4603      	mov	r3, r0
 8006b46:	461a      	mov	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006b4c:	2180      	movs	r1, #128	; 0x80
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 f905 	bl	8007d5e <USBH_AllocPipe>
 8006b54:	4603      	mov	r3, r0
 8006b56:	461a      	mov	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	7919      	ldrb	r1, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8006b70:	b292      	uxth	r2, r2
 8006b72:	9202      	str	r2, [sp, #8]
 8006b74:	2200      	movs	r2, #0
 8006b76:	9201      	str	r2, [sp, #4]
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2280      	movs	r2, #128	; 0x80
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 f8be 	bl	8007d00 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	7959      	ldrb	r1, [r3, #5]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8006b98:	b292      	uxth	r2, r2
 8006b9a:	9202      	str	r2, [sp, #8]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	9201      	str	r2, [sp, #4]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 f8aa 	bl	8007d00 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bac:	e162      	b.n	8006e74 <USBH_Process+0x41c>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f96a 	bl	8006e88 <USBH_HandleEnum>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f040 8151 	bne.w	8006e5e <USBH_Process+0x406>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 8006bbc:	4878      	ldr	r0, [pc, #480]	; (8006da0 <USBH_Process+0x348>)
 8006bbe:	f001 fc8b 	bl	80084d8 <iprintf>
 8006bc2:	4875      	ldr	r0, [pc, #468]	; (8006d98 <USBH_Process+0x340>)
 8006bc4:	f001 fcfc 	bl	80085c0 <puts>

        phost->device.current_interface = 0U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d109      	bne.n	8006bee <USBH_Process+0x196>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 8006bda:	4872      	ldr	r0, [pc, #456]	; (8006da4 <USBH_Process+0x34c>)
 8006bdc:	f001 fc7c 	bl	80084d8 <iprintf>
 8006be0:	486d      	ldr	r0, [pc, #436]	; (8006d98 <USBH_Process+0x340>)
 8006be2:	f001 fced 	bl	80085c0 <puts>
          phost->gState = HOST_SET_CONFIGURATION;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2208      	movs	r2, #8
 8006bea:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 8006bec:	e137      	b.n	8006e5e <USBH_Process+0x406>
          phost->gState = HOST_INPUT;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2207      	movs	r2, #7
 8006bf2:	701a      	strb	r2, [r3, #0]
      break;
 8006bf4:	e133      	b.n	8006e5e <USBH_Process+0x406>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 8130 	beq.w	8006e62 <USBH_Process+0x40a>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006c08:	2101      	movs	r1, #1
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2208      	movs	r2, #8
 8006c12:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006c14:	e125      	b.n	8006e62 <USBH_Process+0x40a>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fc0b 	bl	800743c <USBH_SetCfg>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f040 811c 	bne.w	8006e66 <USBH_Process+0x40e>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2209      	movs	r2, #9
 8006c32:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 8006c34:	485c      	ldr	r0, [pc, #368]	; (8006da8 <USBH_Process+0x350>)
 8006c36:	f001 fc4f 	bl	80084d8 <iprintf>
 8006c3a:	4857      	ldr	r0, [pc, #348]	; (8006d98 <USBH_Process+0x340>)
 8006c3c:	f001 fcc0 	bl	80085c0 <puts>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c40:	e111      	b.n	8006e66 <USBH_Process+0x40e>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006c48:	f003 0320 	and.w	r3, r3, #32
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d011      	beq.n	8006c74 <USBH_Process+0x21c>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006c50:	2101      	movs	r1, #1
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fc15 	bl	8007482 <USBH_SetFeature>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f040 8105 	bne.w	8006e6a <USBH_Process+0x412>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 8006c60:	4852      	ldr	r0, [pc, #328]	; (8006dac <USBH_Process+0x354>)
 8006c62:	f001 fc39 	bl	80084d8 <iprintf>
 8006c66:	484c      	ldr	r0, [pc, #304]	; (8006d98 <USBH_Process+0x340>)
 8006c68:	f001 fcaa 	bl	80085c0 <puts>
          phost->gState = HOST_CHECK_CLASS;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	220a      	movs	r2, #10
 8006c70:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c72:	e0fa      	b.n	8006e6a <USBH_Process+0x412>
        phost->gState = HOST_CHECK_CLASS;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	220a      	movs	r2, #10
 8006c78:	701a      	strb	r2, [r3, #0]
      break;
 8006c7a:	e0f6      	b.n	8006e6a <USBH_Process+0x412>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <USBH_Process+0x23c>
      {
        USBH_UsrLog("No Class has been registered.");
 8006c86:	484a      	ldr	r0, [pc, #296]	; (8006db0 <USBH_Process+0x358>)
 8006c88:	f001 fc26 	bl	80084d8 <iprintf>
 8006c8c:	4842      	ldr	r0, [pc, #264]	; (8006d98 <USBH_Process+0x340>)
 8006c8e:	f001 fc97 	bl	80085c0 <puts>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c92:	e0ef      	b.n	8006e74 <USBH_Process+0x41c>
        phost->pActiveClass = NULL;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	73fb      	strb	r3, [r7, #15]
 8006ca0:	e017      	b.n	8006cd2 <USBH_Process+0x27a>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	33dc      	adds	r3, #220	; 0xdc
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	791a      	ldrb	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d108      	bne.n	8006ccc <USBH_Process+0x274>
            phost->pActiveClass = phost->pClass[idx];
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	33dc      	adds	r3, #220	; 0xdc
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	73fb      	strb	r3, [r7, #15]
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0e4      	beq.n	8006ca2 <USBH_Process+0x24a>
        if (phost->pActiveClass != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d02c      	beq.n	8006d3c <USBH_Process+0x2e4>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d114      	bne.n	8006d1e <USBH_Process+0x2c6>
            phost->gState = HOST_CLASS_REQUEST;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2206      	movs	r2, #6
 8006cf8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4619      	mov	r1, r3
 8006d04:	482b      	ldr	r0, [pc, #172]	; (8006db4 <USBH_Process+0x35c>)
 8006d06:	f001 fbe7 	bl	80084d8 <iprintf>
 8006d0a:	4823      	ldr	r0, [pc, #140]	; (8006d98 <USBH_Process+0x340>)
 8006d0c:	f001 fc58 	bl	80085c0 <puts>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006d16:	2103      	movs	r1, #3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	4798      	blx	r3
      break;
 8006d1c:	e0aa      	b.n	8006e74 <USBH_Process+0x41c>
            phost->gState = HOST_ABORT_STATE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	220d      	movs	r2, #13
 8006d22:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4822      	ldr	r0, [pc, #136]	; (8006db8 <USBH_Process+0x360>)
 8006d30:	f001 fbd2 	bl	80084d8 <iprintf>
 8006d34:	4818      	ldr	r0, [pc, #96]	; (8006d98 <USBH_Process+0x340>)
 8006d36:	f001 fc43 	bl	80085c0 <puts>
      break;
 8006d3a:	e09b      	b.n	8006e74 <USBH_Process+0x41c>
          phost->gState = HOST_ABORT_STATE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	220d      	movs	r2, #13
 8006d40:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 8006d42:	481e      	ldr	r0, [pc, #120]	; (8006dbc <USBH_Process+0x364>)
 8006d44:	f001 fbc8 	bl	80084d8 <iprintf>
 8006d48:	4813      	ldr	r0, [pc, #76]	; (8006d98 <USBH_Process+0x340>)
 8006d4a:	f001 fc39 	bl	80085c0 <puts>
      break;
 8006d4e:	e091      	b.n	8006e74 <USBH_Process+0x41c>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00f      	beq.n	8006d7a <USBH_Process+0x322>
      {
        status = phost->pActiveClass->Requests(phost);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	4798      	blx	r3
 8006d66:	4603      	mov	r3, r0
 8006d68:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d17d      	bne.n	8006e6e <USBH_Process+0x416>
        {
          phost->gState = HOST_CLASS;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	220b      	movs	r2, #11
 8006d76:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006d78:	e079      	b.n	8006e6e <USBH_Process+0x416>
        phost->gState = HOST_ABORT_STATE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	220d      	movs	r2, #13
 8006d7e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 8006d80:	480f      	ldr	r0, [pc, #60]	; (8006dc0 <USBH_Process+0x368>)
 8006d82:	f001 fba9 	bl	80084d8 <iprintf>
 8006d86:	480f      	ldr	r0, [pc, #60]	; (8006dc4 <USBH_Process+0x36c>)
 8006d88:	f001 fba6 	bl	80084d8 <iprintf>
 8006d8c:	4802      	ldr	r0, [pc, #8]	; (8006d98 <USBH_Process+0x340>)
 8006d8e:	f001 fc17 	bl	80085c0 <puts>
      break;
 8006d92:	e06c      	b.n	8006e6e <USBH_Process+0x416>
 8006d94:	08009438 	.word	0x08009438
 8006d98:	08009390 	.word	0x08009390
 8006d9c:	08009450 	.word	0x08009450
 8006da0:	0800946c 	.word	0x0800946c
 8006da4:	08009480 	.word	0x08009480
 8006da8:	080094a8 	.word	0x080094a8
 8006dac:	080094c4 	.word	0x080094c4
 8006db0:	080094e4 	.word	0x080094e4
 8006db4:	08009504 	.word	0x08009504
 8006db8:	08009518 	.word	0x08009518
 8006dbc:	08009538 	.word	0x08009538
 8006dc0:	08009374 	.word	0x08009374
 8006dc4:	08009560 	.word	0x08009560

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d04f      	beq.n	8006e72 <USBH_Process+0x41a>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	4798      	blx	r3
      }
      break;
 8006dde:	e048      	b.n	8006e72 <USBH_Process+0x41a>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff fce7 	bl	80067bc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d009      	beq.n	8006e0c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->DeInit(phost);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <USBH_Process+0x3ca>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006e1c:	2105      	movs	r1, #5
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8006e22:	4817      	ldr	r0, [pc, #92]	; (8006e80 <USBH_Process+0x428>)
 8006e24:	f001 fb58 	bl	80084d8 <iprintf>
 8006e28:	4816      	ldr	r0, [pc, #88]	; (8006e84 <USBH_Process+0x42c>)
 8006e2a:	f001 fbc9 	bl	80085c0 <puts>

      if (phost->device.is_ReEnumerated == 1U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d107      	bne.n	8006e4a <USBH_Process+0x3f2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff fdf7 	bl	8006a36 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e48:	e014      	b.n	8006e74 <USBH_Process+0x41c>
        USBH_LL_Start(phost);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 f8ee 	bl	800802c <USBH_LL_Start>
      break;
 8006e50:	e010      	b.n	8006e74 <USBH_Process+0x41c>

    case HOST_ABORT_STATE:
    default :
      break;
 8006e52:	bf00      	nop
 8006e54:	e00e      	b.n	8006e74 <USBH_Process+0x41c>
      break;
 8006e56:	bf00      	nop
 8006e58:	e00c      	b.n	8006e74 <USBH_Process+0x41c>
      break;
 8006e5a:	bf00      	nop
 8006e5c:	e00a      	b.n	8006e74 <USBH_Process+0x41c>
      break;
 8006e5e:	bf00      	nop
 8006e60:	e008      	b.n	8006e74 <USBH_Process+0x41c>
    break;
 8006e62:	bf00      	nop
 8006e64:	e006      	b.n	8006e74 <USBH_Process+0x41c>
      break;
 8006e66:	bf00      	nop
 8006e68:	e004      	b.n	8006e74 <USBH_Process+0x41c>
      break;
 8006e6a:	bf00      	nop
 8006e6c:	e002      	b.n	8006e74 <USBH_Process+0x41c>
      break;
 8006e6e:	bf00      	nop
 8006e70:	e000      	b.n	8006e74 <USBH_Process+0x41c>
      break;
 8006e72:	bf00      	nop
  }
  return USBH_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	08009578 	.word	0x08009578
 8006e84:	08009390 	.word	0x08009390

08006e88 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af04      	add	r7, sp, #16
 8006e8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006e90:	2301      	movs	r3, #1
 8006e92:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b07      	cmp	r3, #7
 8006e9a:	f200 8148 	bhi.w	800712e <USBH_HandleEnum+0x2a6>
 8006e9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <USBH_HandleEnum+0x1c>)
 8006ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea4:	08006ec5 	.word	0x08006ec5
 8006ea8:	08006f37 	.word	0x08006f37
 8006eac:	08006f77 	.word	0x08006f77
 8006eb0:	08007001 	.word	0x08007001
 8006eb4:	08007019 	.word	0x08007019
 8006eb8:	08007037 	.word	0x08007037
 8006ebc:	0800708b 	.word	0x0800708b
 8006ec0:	080070df 	.word	0x080070df
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006ec4:	2108      	movs	r1, #8
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f9e8 	bl	800729c <USBH_Get_DevDesc>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f040 812f 	bne.w	8007132 <USBH_HandleEnum+0x2aa>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	7919      	ldrb	r1, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006ef8:	b292      	uxth	r2, r2
 8006efa:	9202      	str	r2, [sp, #8]
 8006efc:	2200      	movs	r2, #0
 8006efe:	9201      	str	r2, [sp, #4]
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	4603      	mov	r3, r0
 8006f04:	2280      	movs	r2, #128	; 0x80
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fefa 	bl	8007d00 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	7959      	ldrb	r1, [r3, #5]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006f20:	b292      	uxth	r2, r2
 8006f22:	9202      	str	r2, [sp, #8]
 8006f24:	2200      	movs	r2, #0
 8006f26:	9201      	str	r2, [sp, #4]
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fee6 	bl	8007d00 <USBH_OpenPipe>
      }
      break;
 8006f34:	e0fd      	b.n	8007132 <USBH_HandleEnum+0x2aa>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 8006f36:	2112      	movs	r1, #18
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f9af 	bl	800729c <USBH_Get_DevDesc>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f040 80f8 	bne.w	8007136 <USBH_HandleEnum+0x2ae>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4883      	ldr	r0, [pc, #524]	; (800715c <USBH_HandleEnum+0x2d4>)
 8006f50:	f001 fac2 	bl	80084d8 <iprintf>
 8006f54:	4882      	ldr	r0, [pc, #520]	; (8007160 <USBH_HandleEnum+0x2d8>)
 8006f56:	f001 fb33 	bl	80085c0 <puts>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8b3 332c 	ldrh.w	r3, [r3, #812]	; 0x32c
 8006f60:	4619      	mov	r1, r3
 8006f62:	4880      	ldr	r0, [pc, #512]	; (8007164 <USBH_HandleEnum+0x2dc>)
 8006f64:	f001 fab8 	bl	80084d8 <iprintf>
 8006f68:	487d      	ldr	r0, [pc, #500]	; (8007160 <USBH_HandleEnum+0x2d8>)
 8006f6a:	f001 fb29 	bl	80085c0 <puts>

        phost->EnumState = ENUM_SET_ADDR;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2202      	movs	r2, #2
 8006f72:	705a      	strb	r2, [r3, #1]

      }
      break;
 8006f74:	e0df      	b.n	8007136 <USBH_HandleEnum+0x2ae>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006f76:	2101      	movs	r1, #1
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fa3b 	bl	80073f4 <USBH_SetAddress>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f040 80da 	bne.w	800713a <USBH_HandleEnum+0x2b2>
      {
        USBH_Delay(2U);
 8006f86:	2002      	movs	r0, #2
 8006f88:	f001 f9ab 	bl	80082e2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4872      	ldr	r0, [pc, #456]	; (8007168 <USBH_HandleEnum+0x2e0>)
 8006f9e:	f001 fa9b 	bl	80084d8 <iprintf>
 8006fa2:	486f      	ldr	r0, [pc, #444]	; (8007160 <USBH_HandleEnum+0x2d8>)
 8006fa4:	f001 fb0c 	bl	80085c0 <puts>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2203      	movs	r2, #3
 8006fac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	7919      	ldrb	r1, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006fc2:	b292      	uxth	r2, r2
 8006fc4:	9202      	str	r2, [sp, #8]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	9201      	str	r2, [sp, #4]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2280      	movs	r2, #128	; 0x80
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fe95 	bl	8007d00 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	7959      	ldrb	r1, [r3, #5]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006fea:	b292      	uxth	r2, r2
 8006fec:	9202      	str	r2, [sp, #8]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	9201      	str	r2, [sp, #4]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fe81 	bl	8007d00 <USBH_OpenPipe>
      }
      break;
 8006ffe:	e09c      	b.n	800713a <USBH_HandleEnum+0x2b2>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 8007000:	2109      	movs	r1, #9
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f972 	bl	80072ec <USBH_Get_CfgDesc>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	f040 8097 	bne.w	800713e <USBH_HandleEnum+0x2b6>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2204      	movs	r2, #4
 8007014:	705a      	strb	r2, [r3, #1]
      }
      break;
 8007016:	e092      	b.n	800713e <USBH_HandleEnum+0x2b6>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f963 	bl	80072ec <USBH_Get_CfgDesc>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	f040 808a 	bne.w	8007142 <USBH_HandleEnum+0x2ba>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2205      	movs	r2, #5
 8007032:	705a      	strb	r2, [r3, #1]
      }
      break;
 8007034:	e085      	b.n	8007142 <USBH_HandleEnum+0x2ba>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01a      	beq.n	8007076 <USBH_HandleEnum+0x1ee>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800704c:	23ff      	movs	r3, #255	; 0xff
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f970 	bl	8007334 <USBH_Get_StringDesc>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d175      	bne.n	8007146 <USBH_HandleEnum+0x2be>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007060:	4619      	mov	r1, r3
 8007062:	4842      	ldr	r0, [pc, #264]	; (800716c <USBH_HandleEnum+0x2e4>)
 8007064:	f001 fa38 	bl	80084d8 <iprintf>
 8007068:	483d      	ldr	r0, [pc, #244]	; (8007160 <USBH_HandleEnum+0x2d8>)
 800706a:	f001 faa9 	bl	80085c0 <puts>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2206      	movs	r2, #6
 8007072:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007074:	e067      	b.n	8007146 <USBH_HandleEnum+0x2be>
        USBH_UsrLog("Manufacturer : N/A");
 8007076:	483e      	ldr	r0, [pc, #248]	; (8007170 <USBH_HandleEnum+0x2e8>)
 8007078:	f001 fa2e 	bl	80084d8 <iprintf>
 800707c:	4838      	ldr	r0, [pc, #224]	; (8007160 <USBH_HandleEnum+0x2d8>)
 800707e:	f001 fa9f 	bl	80085c0 <puts>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2206      	movs	r2, #6
 8007086:	705a      	strb	r2, [r3, #1]
      break;
 8007088:	e05d      	b.n	8007146 <USBH_HandleEnum+0x2be>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01a      	beq.n	80070ca <USBH_HandleEnum+0x242>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80070a0:	23ff      	movs	r3, #255	; 0xff
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f946 	bl	8007334 <USBH_Get_StringDesc>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d14d      	bne.n	800714a <USBH_HandleEnum+0x2c2>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070b4:	4619      	mov	r1, r3
 80070b6:	482f      	ldr	r0, [pc, #188]	; (8007174 <USBH_HandleEnum+0x2ec>)
 80070b8:	f001 fa0e 	bl	80084d8 <iprintf>
 80070bc:	4828      	ldr	r0, [pc, #160]	; (8007160 <USBH_HandleEnum+0x2d8>)
 80070be:	f001 fa7f 	bl	80085c0 <puts>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2207      	movs	r2, #7
 80070c6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80070c8:	e03f      	b.n	800714a <USBH_HandleEnum+0x2c2>
        USBH_UsrLog("Product : N/A");
 80070ca:	482b      	ldr	r0, [pc, #172]	; (8007178 <USBH_HandleEnum+0x2f0>)
 80070cc:	f001 fa04 	bl	80084d8 <iprintf>
 80070d0:	4823      	ldr	r0, [pc, #140]	; (8007160 <USBH_HandleEnum+0x2d8>)
 80070d2:	f001 fa75 	bl	80085c0 <puts>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2207      	movs	r2, #7
 80070da:	705a      	strb	r2, [r3, #1]
      break;
 80070dc:	e035      	b.n	800714a <USBH_HandleEnum+0x2c2>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d019      	beq.n	800711c <USBH_HandleEnum+0x294>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80070f4:	23ff      	movs	r3, #255	; 0xff
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f91c 	bl	8007334 <USBH_Get_StringDesc>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d125      	bne.n	800714e <USBH_HandleEnum+0x2c6>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007108:	4619      	mov	r1, r3
 800710a:	481c      	ldr	r0, [pc, #112]	; (800717c <USBH_HandleEnum+0x2f4>)
 800710c:	f001 f9e4 	bl	80084d8 <iprintf>
 8007110:	4813      	ldr	r0, [pc, #76]	; (8007160 <USBH_HandleEnum+0x2d8>)
 8007112:	f001 fa55 	bl	80085c0 <puts>
          Status = USBH_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800711a:	e018      	b.n	800714e <USBH_HandleEnum+0x2c6>
        USBH_UsrLog("Serial Number : N/A");
 800711c:	4818      	ldr	r0, [pc, #96]	; (8007180 <USBH_HandleEnum+0x2f8>)
 800711e:	f001 f9db 	bl	80084d8 <iprintf>
 8007122:	480f      	ldr	r0, [pc, #60]	; (8007160 <USBH_HandleEnum+0x2d8>)
 8007124:	f001 fa4c 	bl	80085c0 <puts>
        Status = USBH_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	73fb      	strb	r3, [r7, #15]
      break;
 800712c:	e00f      	b.n	800714e <USBH_HandleEnum+0x2c6>

    default:
      break;
 800712e:	bf00      	nop
 8007130:	e00e      	b.n	8007150 <USBH_HandleEnum+0x2c8>
      break;
 8007132:	bf00      	nop
 8007134:	e00c      	b.n	8007150 <USBH_HandleEnum+0x2c8>
      break;
 8007136:	bf00      	nop
 8007138:	e00a      	b.n	8007150 <USBH_HandleEnum+0x2c8>
      break;
 800713a:	bf00      	nop
 800713c:	e008      	b.n	8007150 <USBH_HandleEnum+0x2c8>
      break;
 800713e:	bf00      	nop
 8007140:	e006      	b.n	8007150 <USBH_HandleEnum+0x2c8>
      break;
 8007142:	bf00      	nop
 8007144:	e004      	b.n	8007150 <USBH_HandleEnum+0x2c8>
      break;
 8007146:	bf00      	nop
 8007148:	e002      	b.n	8007150 <USBH_HandleEnum+0x2c8>
      break;
 800714a:	bf00      	nop
 800714c:	e000      	b.n	8007150 <USBH_HandleEnum+0x2c8>
      break;
 800714e:	bf00      	nop
  }
  return Status;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	08009590 	.word	0x08009590
 8007160:	08009390 	.word	0x08009390
 8007164:	0800959c 	.word	0x0800959c
 8007168:	080095a8 	.word	0x080095a8
 800716c:	080095c0 	.word	0x080095c0
 8007170:	080095d4 	.word	0x080095d4
 8007174:	080095e8 	.word	0x080095e8
 8007178:	080095f8 	.word	0x080095f8
 800717c:	08009608 	.word	0x08009608
 8007180:	0800961c 	.word	0x0800961c

08007184 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	bc80      	pop	{r7}
 800719e:	4770      	bx	lr

080071a0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f804 	bl	80071c4 <USBH_HandleSof>
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b0b      	cmp	r3, #11
 80071d4:	d10a      	bne.n	80071ec <USBH_HandleSof+0x28>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	4798      	blx	r3
  }
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007204:	bf00      	nop
}
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	bc80      	pop	{r7}
 800720c:	4770      	bx	lr

0800720e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800721e:	bf00      	nop
}
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr

08007228 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr

08007254 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fef4 	bl	8008062 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	791b      	ldrb	r3, [r3, #4]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fd8c 	bl	8007d9e <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	795b      	ldrb	r3, [r3, #5]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fd86 	bl	8007d9e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072ba:	2100      	movs	r1, #0
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f864 	bl	800738a <USBH_GetDescriptor>
 80072c2:	4603      	mov	r3, r0
 80072c4:	73fb      	strb	r3, [r7, #15]
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f503 7049 	add.w	r0, r3, #804	; 0x324
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	b292      	uxth	r2, r2
 80072dc:	4619      	mov	r1, r3
 80072de:	f000 f918 	bl	8007512 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	331c      	adds	r3, #28
 80072fc:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80072fe:	887b      	ldrh	r3, [r7, #2]
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007308:	2100      	movs	r1, #0
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f83d 	bl	800738a <USBH_GetDescriptor>
 8007310:	4603      	mov	r3, r0
 8007312:	72fb      	strb	r3, [r7, #11]
 8007314:	7afb      	ldrb	r3, [r7, #11]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d107      	bne.n	800732a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f203 3336 	addw	r3, r3, #822	; 0x336
 8007320:	887a      	ldrh	r2, [r7, #2]
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	4618      	mov	r0, r3
 8007326:	f000 f963 	bl	80075f0 <USBH_ParseCfgDesc>
  }

  return status;
 800732a:	7afb      	ldrb	r3, [r7, #11]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	607a      	str	r2, [r7, #4]
 800733e:	461a      	mov	r2, r3
 8007340:	460b      	mov	r3, r1
 8007342:	72fb      	strb	r3, [r7, #11]
 8007344:	4613      	mov	r3, r2
 8007346:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007348:	7afb      	ldrb	r3, [r7, #11]
 800734a:	b29b      	uxth	r3, r3
 800734c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007350:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007358:	893b      	ldrh	r3, [r7, #8]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	460b      	mov	r3, r1
 800735e:	2100      	movs	r1, #0
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f812 	bl	800738a <USBH_GetDescriptor>
 8007366:	4603      	mov	r3, r0
 8007368:	75fb      	strb	r3, [r7, #23]
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d107      	bne.n	8007380 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007376:	893a      	ldrh	r2, [r7, #8]
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fa34 	bl	80077e8 <USBH_ParseStringDesc>
  }

  return status;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	607b      	str	r3, [r7, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	72fb      	strb	r3, [r7, #11]
 8007398:	4613      	mov	r3, r2
 800739a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	789b      	ldrb	r3, [r3, #2]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d11c      	bne.n	80073de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80073a4:	7afb      	ldrb	r3, [r7, #11]
 80073a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2206      	movs	r2, #6
 80073b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	893a      	ldrh	r2, [r7, #8]
 80073ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80073bc:	893b      	ldrh	r3, [r7, #8]
 80073be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80073c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073c6:	d104      	bne.n	80073d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f240 4209 	movw	r2, #1033	; 0x409
 80073ce:	829a      	strh	r2, [r3, #20]
 80073d0:	e002      	b.n	80073d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8b3a      	ldrh	r2, [r7, #24]
 80073dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80073de:	8b3b      	ldrh	r3, [r7, #24]
 80073e0:	461a      	mov	r2, r3
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fa4b 	bl	8007880 <USBH_CtlReq>
 80073ea:	4603      	mov	r3, r0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	789b      	ldrb	r3, [r3, #2]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d10f      	bne.n	8007428 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2205      	movs	r2, #5
 8007412:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	b29a      	uxth	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007428:	2200      	movs	r2, #0
 800742a:	2100      	movs	r1, #0
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa27 	bl	8007880 <USBH_CtlReq>
 8007432:	4603      	mov	r3, r0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	789b      	ldrb	r3, [r3, #2]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d10e      	bne.n	800746e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2209      	movs	r2, #9
 800745a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	887a      	ldrh	r2, [r7, #2]
 8007460:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800746e:	2200      	movs	r2, #0
 8007470:	2100      	movs	r1, #0
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fa04 	bl	8007880 <USBH_CtlReq>
 8007478:	4603      	mov	r3, r0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	789b      	ldrb	r3, [r3, #2]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d10f      	bne.n	80074b6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2203      	movs	r2, #3
 80074a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80074b6:	2200      	movs	r2, #0
 80074b8:	2100      	movs	r1, #0
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f9e0 	bl	8007880 <USBH_CtlReq>
 80074c0:	4603      	mov	r3, r0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	789b      	ldrb	r3, [r3, #2]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d10f      	bne.n	80074fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2202      	movs	r2, #2
 80074e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80074fe:	2200      	movs	r2, #0
 8007500:	2100      	movs	r1, #0
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f9bc 	bl	8007880 <USBH_CtlReq>
 8007508:	4603      	mov	r3, r0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007512:	b480      	push	{r7}
 8007514:	b085      	sub	sp, #20
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	4613      	mov	r3, r2
 800751e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	781a      	ldrb	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	785a      	ldrb	r2, [r3, #1]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	3302      	adds	r3, #2
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b29a      	uxth	r2, r3
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	3303      	adds	r3, #3
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	b29b      	uxth	r3, r3
 8007544:	4313      	orrs	r3, r2
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	791a      	ldrb	r2, [r3, #4]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	795a      	ldrb	r2, [r3, #5]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	799a      	ldrb	r2, [r3, #6]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	79da      	ldrb	r2, [r3, #7]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800756c:	88fb      	ldrh	r3, [r7, #6]
 800756e:	2b08      	cmp	r3, #8
 8007570:	d939      	bls.n	80075e6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	3308      	adds	r3, #8
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b29a      	uxth	r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	3309      	adds	r3, #9
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	b29b      	uxth	r3, r3
 8007586:	4313      	orrs	r3, r2
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	330a      	adds	r3, #10
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	b29a      	uxth	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	330b      	adds	r3, #11
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	4313      	orrs	r3, r2
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	330c      	adds	r3, #12
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	330d      	adds	r3, #13
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	b29b      	uxth	r3, r3
 80075be:	4313      	orrs	r3, r2
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	7b9a      	ldrb	r2, [r3, #14]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	7bda      	ldrb	r2, [r3, #15]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	7c1a      	ldrb	r2, [r3, #16]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	7c5a      	ldrb	r2, [r3, #17]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	745a      	strb	r2, [r3, #17]
  }
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr

080075f0 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	; 0x28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	785a      	ldrb	r2, [r3, #1]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	3302      	adds	r3, #2
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	b29a      	uxth	r2, r3
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	3303      	adds	r3, #3
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	b29b      	uxth	r3, r3
 8007632:	021b      	lsls	r3, r3, #8
 8007634:	b29b      	uxth	r3, r3
 8007636:	4313      	orrs	r3, r2
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	791a      	ldrb	r2, [r3, #4]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	795a      	ldrb	r2, [r3, #5]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	799a      	ldrb	r2, [r3, #6]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	79da      	ldrb	r2, [r3, #7]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	7a1a      	ldrb	r2, [r3, #8]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007666:	88fb      	ldrh	r3, [r7, #6]
 8007668:	2b09      	cmp	r3, #9
 800766a:	d95f      	bls.n	800772c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800766c:	2309      	movs	r3, #9
 800766e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007670:	2300      	movs	r3, #0
 8007672:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007674:	e051      	b.n	800771a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007676:	f107 0316 	add.w	r3, r7, #22
 800767a:	4619      	mov	r1, r3
 800767c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800767e:	f000 f8e5 	bl	800784c <USBH_GetNextDesc>
 8007682:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	2b04      	cmp	r3, #4
 800768a:	d146      	bne.n	800771a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800768c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007690:	221a      	movs	r2, #26
 8007692:	fb02 f303 	mul.w	r3, r2, r3
 8007696:	3308      	adds	r3, #8
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	3302      	adds	r3, #2
 800769e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80076a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076a2:	69f8      	ldr	r0, [r7, #28]
 80076a4:	f000 f846 	bl	8007734 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076b2:	e022      	b.n	80076fa <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80076b4:	f107 0316 	add.w	r3, r7, #22
 80076b8:	4619      	mov	r1, r3
 80076ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076bc:	f000 f8c6 	bl	800784c <USBH_GetNextDesc>
 80076c0:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2b05      	cmp	r3, #5
 80076c8:	d117      	bne.n	80076fa <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80076ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076ce:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80076d2:	3201      	adds	r2, #1
 80076d4:	00d2      	lsls	r2, r2, #3
 80076d6:	211a      	movs	r1, #26
 80076d8:	fb01 f303 	mul.w	r3, r1, r3
 80076dc:	4413      	add	r3, r2
 80076de:	3308      	adds	r3, #8
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	3304      	adds	r3, #4
 80076e6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80076e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ea:	69b8      	ldr	r0, [r7, #24]
 80076ec:	f000 f850 	bl	8007790 <USBH_ParseEPDesc>
            ep_ix++;
 80076f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80076f4:	3301      	adds	r3, #1
 80076f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	791b      	ldrb	r3, [r3, #4]
 80076fe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007702:	429a      	cmp	r2, r3
 8007704:	d204      	bcs.n	8007710 <USBH_ParseCfgDesc+0x120>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	885a      	ldrh	r2, [r3, #2]
 800770a:	8afb      	ldrh	r3, [r7, #22]
 800770c:	429a      	cmp	r2, r3
 800770e:	d8d1      	bhi.n	80076b4 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007714:	3301      	adds	r3, #1
 8007716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800771a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800771e:	2b01      	cmp	r3, #1
 8007720:	d804      	bhi.n	800772c <USBH_ParseCfgDesc+0x13c>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	885a      	ldrh	r2, [r3, #2]
 8007726:	8afb      	ldrh	r3, [r7, #22]
 8007728:	429a      	cmp	r2, r3
 800772a:	d8a4      	bhi.n	8007676 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800772c:	bf00      	nop
 800772e:	3728      	adds	r7, #40	; 0x28
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781a      	ldrb	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	785a      	ldrb	r2, [r3, #1]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	789a      	ldrb	r2, [r3, #2]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	78da      	ldrb	r2, [r3, #3]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	791a      	ldrb	r2, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	795a      	ldrb	r2, [r3, #5]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	799a      	ldrb	r2, [r3, #6]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	79da      	ldrb	r2, [r3, #7]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	7a1a      	ldrb	r2, [r3, #8]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	721a      	strb	r2, [r3, #8]
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr

08007790 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781a      	ldrb	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	785a      	ldrb	r2, [r3, #1]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	789a      	ldrb	r2, [r3, #2]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	78da      	ldrb	r2, [r3, #3]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	3304      	adds	r3, #4
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	3305      	adds	r3, #5
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	021b      	lsls	r3, r3, #8
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	4313      	orrs	r3, r2
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	799a      	ldrb	r2, [r3, #6]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	719a      	strb	r2, [r3, #6]
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr

080077e8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3301      	adds	r3, #1
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d120      	bne.n	8007842 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	1e9a      	subs	r2, r3, #2
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	4293      	cmp	r3, r2
 800780a:	bf28      	it	cs
 800780c:	4613      	movcs	r3, r2
 800780e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3302      	adds	r3, #2
 8007814:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007816:	2300      	movs	r3, #0
 8007818:	82fb      	strh	r3, [r7, #22]
 800781a:	e00b      	b.n	8007834 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800781c:	8afb      	ldrh	r3, [r7, #22]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4413      	add	r3, r2
 8007822:	781a      	ldrb	r2, [r3, #0]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	3301      	adds	r3, #1
 800782c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800782e:	8afb      	ldrh	r3, [r7, #22]
 8007830:	3302      	adds	r3, #2
 8007832:	82fb      	strh	r3, [r7, #22]
 8007834:	8afa      	ldrh	r2, [r7, #22]
 8007836:	8abb      	ldrh	r3, [r7, #20]
 8007838:	429a      	cmp	r2, r3
 800783a:	d3ef      	bcc.n	800781c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2200      	movs	r2, #0
 8007840:	701a      	strb	r2, [r3, #0]
  }
}
 8007842:	bf00      	nop
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr

0800784c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	881a      	ldrh	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	b29b      	uxth	r3, r3
 8007860:	4413      	add	r3, r2
 8007862:	b29a      	uxth	r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4413      	add	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007874:	68fb      	ldr	r3, [r7, #12]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr

08007880 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	4613      	mov	r3, r2
 800788c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800788e:	2301      	movs	r3, #1
 8007890:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	789b      	ldrb	r3, [r3, #2]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d002      	beq.n	80078a0 <USBH_CtlReq+0x20>
 800789a:	2b02      	cmp	r3, #2
 800789c:	d00f      	beq.n	80078be <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 800789e:	e034      	b.n	800790a <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	88fa      	ldrh	r2, [r7, #6]
 80078aa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2202      	movs	r2, #2
 80078b6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80078b8:	2301      	movs	r3, #1
 80078ba:	75fb      	strb	r3, [r7, #23]
      break;
 80078bc:	e025      	b.n	800790a <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f828 	bl	8007914 <USBH_HandleControl>
 80078c4:	4603      	mov	r3, r0
 80078c6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d108      	bne.n	80078e0 <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	75fb      	strb	r3, [r7, #23]
      break;
 80078de:	e013      	b.n	8007908 <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d108      	bne.n	80078f8 <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80078f2:	2303      	movs	r3, #3
 80078f4:	75fb      	strb	r3, [r7, #23]
      break;
 80078f6:	e007      	b.n	8007908 <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d104      	bne.n	8007908 <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 8007904:	2302      	movs	r3, #2
 8007906:	75fb      	strb	r3, [r7, #23]
      break;
 8007908:	bf00      	nop
  }
  return status;
 800790a:	7dfb      	ldrb	r3, [r7, #23]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af02      	add	r7, sp, #8
 800791a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800791c:	2301      	movs	r3, #1
 800791e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007920:	2300      	movs	r3, #0
 8007922:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	7e1b      	ldrb	r3, [r3, #24]
 8007928:	3b01      	subs	r3, #1
 800792a:	2b0a      	cmp	r3, #10
 800792c:	f200 8155 	bhi.w	8007bda <USBH_HandleControl+0x2c6>
 8007930:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <USBH_HandleControl+0x24>)
 8007932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007936:	bf00      	nop
 8007938:	08007965 	.word	0x08007965
 800793c:	0800797f 	.word	0x0800797f
 8007940:	080079e9 	.word	0x080079e9
 8007944:	08007a0f 	.word	0x08007a0f
 8007948:	08007a47 	.word	0x08007a47
 800794c:	08007a73 	.word	0x08007a73
 8007950:	08007ac5 	.word	0x08007ac5
 8007954:	08007ae7 	.word	0x08007ae7
 8007958:	08007b23 	.word	0x08007b23
 800795c:	08007b4b 	.word	0x08007b4b
 8007960:	08007b89 	.word	0x08007b89
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f103 0110 	add.w	r1, r3, #16
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	795b      	ldrb	r3, [r3, #5]
 800796e:	461a      	mov	r2, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f949 	bl	8007c08 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2202      	movs	r2, #2
 800797a:	761a      	strb	r2, [r3, #24]
      break;
 800797c:	e138      	b.n	8007bf0 <USBH_HandleControl+0x2dc>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	795b      	ldrb	r3, [r3, #5]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fc59 	bl	800823c <USBH_LL_GetURBState>
 800798a:	4603      	mov	r3, r0
 800798c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d11e      	bne.n	80079d2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	7c1b      	ldrb	r3, [r3, #16]
 8007998:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800799c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8adb      	ldrh	r3, [r3, #22]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80079a6:	7b7b      	ldrb	r3, [r7, #13]
 80079a8:	2b80      	cmp	r3, #128	; 0x80
 80079aa:	d103      	bne.n	80079b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2203      	movs	r2, #3
 80079b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079b2:	e114      	b.n	8007bde <USBH_HandleControl+0x2ca>
            phost->Control.state = CTRL_DATA_OUT;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2205      	movs	r2, #5
 80079b8:	761a      	strb	r2, [r3, #24]
      break;
 80079ba:	e110      	b.n	8007bde <USBH_HandleControl+0x2ca>
          if (direction == USB_D2H)
 80079bc:	7b7b      	ldrb	r3, [r7, #13]
 80079be:	2b80      	cmp	r3, #128	; 0x80
 80079c0:	d103      	bne.n	80079ca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2209      	movs	r2, #9
 80079c6:	761a      	strb	r2, [r3, #24]
      break;
 80079c8:	e109      	b.n	8007bde <USBH_HandleControl+0x2ca>
            phost->Control.state = CTRL_STATUS_IN;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2207      	movs	r2, #7
 80079ce:	761a      	strb	r2, [r3, #24]
      break;
 80079d0:	e105      	b.n	8007bde <USBH_HandleControl+0x2ca>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d003      	beq.n	80079e0 <USBH_HandleControl+0xcc>
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	f040 80ff 	bne.w	8007bde <USBH_HandleControl+0x2ca>
          phost->Control.state = CTRL_ERROR;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	220b      	movs	r2, #11
 80079e4:	761a      	strb	r2, [r3, #24]
      break;
 80079e6:	e0fa      	b.n	8007bde <USBH_HandleControl+0x2ca>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6899      	ldr	r1, [r3, #8]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	899a      	ldrh	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	791b      	ldrb	r3, [r3, #4]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f940 	bl	8007c86 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2204      	movs	r2, #4
 8007a0a:	761a      	strb	r2, [r3, #24]
      break;
 8007a0c:	e0f0      	b.n	8007bf0 <USBH_HandleControl+0x2dc>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	791b      	ldrb	r3, [r3, #4]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fc11 	bl	800823c <USBH_LL_GetURBState>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d102      	bne.n	8007a2a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2209      	movs	r2, #9
 8007a28:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b05      	cmp	r3, #5
 8007a2e:	d102      	bne.n	8007a36 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007a30:	2303      	movs	r3, #3
 8007a32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a34:	e0d5      	b.n	8007be2 <USBH_HandleControl+0x2ce>
        if (URB_Status == USBH_URB_ERROR)
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	f040 80d2 	bne.w	8007be2 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	220b      	movs	r2, #11
 8007a42:	761a      	strb	r2, [r3, #24]
      break;
 8007a44:	e0cd      	b.n	8007be2 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6899      	ldr	r1, [r3, #8]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	899a      	ldrh	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	7958      	ldrb	r0, [r3, #5]
 8007a52:	2301      	movs	r3, #1
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	4603      	mov	r3, r0
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f8ef 	bl	8007c3c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2206      	movs	r2, #6
 8007a6e:	761a      	strb	r2, [r3, #24]
      break;
 8007a70:	e0be      	b.n	8007bf0 <USBH_HandleControl+0x2dc>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	795b      	ldrb	r3, [r3, #5]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fbdf 	bl	800823c <USBH_LL_GetURBState>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d103      	bne.n	8007a90 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2207      	movs	r2, #7
 8007a8c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a8e:	e0aa      	b.n	8007be6 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b05      	cmp	r3, #5
 8007a94:	d105      	bne.n	8007aa2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	220c      	movs	r2, #12
 8007a9a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa0:	e0a1      	b.n	8007be6 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007aa2:	7bbb      	ldrb	r3, [r7, #14]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d103      	bne.n	8007ab0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2205      	movs	r2, #5
 8007aac:	761a      	strb	r2, [r3, #24]
      break;
 8007aae:	e09a      	b.n	8007be6 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	f040 8097 	bne.w	8007be6 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	220b      	movs	r2, #11
 8007abc:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007abe:	2302      	movs	r3, #2
 8007ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac2:	e090      	b.n	8007be6 <USBH_HandleControl+0x2d2>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	791b      	ldrb	r3, [r3, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2100      	movs	r1, #0
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f8da 	bl	8007c86 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	761a      	strb	r2, [r3, #24]

      break;
 8007ae4:	e084      	b.n	8007bf0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	791b      	ldrb	r3, [r3, #4]
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fba5 	bl	800823c <USBH_LL_GetURBState>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d105      	bne.n	8007b08 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	220d      	movs	r2, #13
 8007b00:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b06:	e070      	b.n	8007bea <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_ERROR)
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d103      	bne.n	8007b16 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	220b      	movs	r2, #11
 8007b12:	761a      	strb	r2, [r3, #24]
      break;
 8007b14:	e069      	b.n	8007bea <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_STALL)
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	2b05      	cmp	r3, #5
 8007b1a:	d166      	bne.n	8007bea <USBH_HandleControl+0x2d6>
          status = USBH_NOT_SUPPORTED;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b20:	e063      	b.n	8007bea <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	795a      	ldrb	r2, [r3, #5]
 8007b26:	2301      	movs	r3, #1
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2100      	movs	r1, #0
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f883 	bl	8007c3c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	220a      	movs	r2, #10
 8007b46:	761a      	strb	r2, [r3, #24]
      break;
 8007b48:	e052      	b.n	8007bf0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	795b      	ldrb	r3, [r3, #5]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fb73 	bl	800823c <USBH_LL_GetURBState>
 8007b56:	4603      	mov	r3, r0
 8007b58:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d105      	bne.n	8007b6c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	220d      	movs	r2, #13
 8007b68:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b6a:	e040      	b.n	8007bee <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d103      	bne.n	8007b7a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2209      	movs	r2, #9
 8007b76:	761a      	strb	r2, [r3, #24]
      break;
 8007b78:	e039      	b.n	8007bee <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_ERROR)
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d136      	bne.n	8007bee <USBH_HandleControl+0x2da>
          phost->Control.state = CTRL_ERROR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	220b      	movs	r2, #11
 8007b84:	761a      	strb	r2, [r3, #24]
      break;
 8007b86:	e032      	b.n	8007bee <USBH_HandleControl+0x2da>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7e5b      	ldrb	r3, [r3, #25]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	765a      	strb	r2, [r3, #25]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	7e5b      	ldrb	r3, [r3, #25]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d806      	bhi.n	8007baa <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007ba8:	e022      	b.n	8007bf0 <USBH_HandleControl+0x2dc>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8007bb0:	2106      	movs	r1, #6
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 8007bbc:	480f      	ldr	r0, [pc, #60]	; (8007bfc <USBH_HandleControl+0x2e8>)
 8007bbe:	f000 fc8b 	bl	80084d8 <iprintf>
 8007bc2:	480f      	ldr	r0, [pc, #60]	; (8007c00 <USBH_HandleControl+0x2ec>)
 8007bc4:	f000 fc88 	bl	80084d8 <iprintf>
 8007bc8:	480e      	ldr	r0, [pc, #56]	; (8007c04 <USBH_HandleControl+0x2f0>)
 8007bca:	f000 fcf9 	bl	80085c0 <puts>
        phost->gState = HOST_IDLE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd8:	e00a      	b.n	8007bf0 <USBH_HandleControl+0x2dc>

    default:
      break;
 8007bda:	bf00      	nop
 8007bdc:	e008      	b.n	8007bf0 <USBH_HandleControl+0x2dc>
      break;
 8007bde:	bf00      	nop
 8007be0:	e006      	b.n	8007bf0 <USBH_HandleControl+0x2dc>
      break;
 8007be2:	bf00      	nop
 8007be4:	e004      	b.n	8007bf0 <USBH_HandleControl+0x2dc>
      break;
 8007be6:	bf00      	nop
 8007be8:	e002      	b.n	8007bf0 <USBH_HandleControl+0x2dc>
      break;
 8007bea:	bf00      	nop
 8007bec:	e000      	b.n	8007bf0 <USBH_HandleControl+0x2dc>
      break;
 8007bee:	bf00      	nop
  }

  return status;
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	08009630 	.word	0x08009630
 8007c00:	08009638 	.word	0x08009638
 8007c04:	08009660 	.word	0x08009660

08007c08 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af04      	add	r7, sp, #16
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	4613      	mov	r3, r2
 8007c14:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c16:	79f9      	ldrb	r1, [r7, #7]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	9303      	str	r3, [sp, #12]
 8007c1c:	2308      	movs	r3, #8
 8007c1e:	9302      	str	r3, [sp, #8]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	2300      	movs	r3, #0
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 fad4 	bl	80081da <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af04      	add	r7, sp, #16
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	4611      	mov	r1, r2
 8007c48:	461a      	mov	r2, r3
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	80fb      	strh	r3, [r7, #6]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c60:	7979      	ldrb	r1, [r7, #5]
 8007c62:	7e3b      	ldrb	r3, [r7, #24]
 8007c64:	9303      	str	r3, [sp, #12]
 8007c66:	88fb      	ldrh	r3, [r7, #6]
 8007c68:	9302      	str	r3, [sp, #8]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	9301      	str	r3, [sp, #4]
 8007c6e:	2301      	movs	r3, #1
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	2300      	movs	r3, #0
 8007c74:	2200      	movs	r2, #0
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 faaf 	bl	80081da <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b088      	sub	sp, #32
 8007c8a:	af04      	add	r7, sp, #16
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	4611      	mov	r1, r2
 8007c92:	461a      	mov	r2, r3
 8007c94:	460b      	mov	r3, r1
 8007c96:	80fb      	strh	r3, [r7, #6]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c9c:	7979      	ldrb	r1, [r7, #5]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	9303      	str	r3, [sp, #12]
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	9302      	str	r3, [sp, #8]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	2301      	movs	r3, #1
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 fa91 	bl	80081da <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007cb8:	2300      	movs	r3, #0

}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b088      	sub	sp, #32
 8007cc6:	af04      	add	r7, sp, #16
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	4611      	mov	r1, r2
 8007cce:	461a      	mov	r2, r3
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	71fb      	strb	r3, [r7, #7]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	79b9      	ldrb	r1, [r7, #6]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	9203      	str	r2, [sp, #12]
 8007ce2:	9302      	str	r3, [sp, #8]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	2301      	movs	r3, #1
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	2303      	movs	r3, #3
 8007cee:	2201      	movs	r2, #1
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 fa72 	bl	80081da <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af04      	add	r7, sp, #16
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	4608      	mov	r0, r1
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4603      	mov	r3, r0
 8007d10:	70fb      	strb	r3, [r7, #3]
 8007d12:	460b      	mov	r3, r1
 8007d14:	70bb      	strb	r3, [r7, #2]
 8007d16:	4613      	mov	r3, r2
 8007d18:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007d1a:	7878      	ldrb	r0, [r7, #1]
 8007d1c:	78ba      	ldrb	r2, [r7, #2]
 8007d1e:	78f9      	ldrb	r1, [r7, #3]
 8007d20:	8b3b      	ldrh	r3, [r7, #24]
 8007d22:	9302      	str	r3, [sp, #8]
 8007d24:	7d3b      	ldrb	r3, [r7, #20]
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	7c3b      	ldrb	r3, [r7, #16]
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa05 	bl	800813e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	460b      	mov	r3, r1
 8007d48:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007d4a:	78fb      	ldrb	r3, [r7, #3]
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fa24 	bl	800819c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f832 	bl	8007dd4 <USBH_GetFreePipe>
 8007d70:	4603      	mov	r3, r0
 8007d72:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d74:	89fb      	ldrh	r3, [r7, #14]
 8007d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d009      	beq.n	8007d92 <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	89fa      	ldrh	r2, [r7, #14]
 8007d82:	f002 020f 	and.w	r2, r2, #15
 8007d86:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	32e0      	adds	r2, #224	; 0xe0
 8007d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 8007d92:	89fb      	ldrh	r3, [r7, #14]
 8007d94:	b2db      	uxtb	r3, r3
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	2b0a      	cmp	r3, #10
 8007dae:	d80b      	bhi.n	8007dc8 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	32e0      	adds	r2, #224	; 0xe0
 8007db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dba:	78fa      	ldrb	r2, [r7, #3]
 8007dbc:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	32e0      	adds	r2, #224	; 0xe0
 8007dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bc80      	pop	{r7}
 8007dd2:	4770      	bx	lr

08007dd4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]
 8007de4:	e00e      	b.n	8007e04 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007de6:	7bfa      	ldrb	r2, [r7, #15]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	32e0      	adds	r2, #224	; 0xe0
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	e007      	b.n	8007e0e <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	3301      	adds	r3, #1
 8007e02:	73fb      	strb	r3, [r7, #15]
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	2b0a      	cmp	r3, #10
 8007e08:	d9ed      	bls.n	8007de6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr

08007e18 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	490e      	ldr	r1, [pc, #56]	; (8007e58 <MX_USB_HOST_Init+0x40>)
 8007e20:	480e      	ldr	r0, [pc, #56]	; (8007e5c <MX_USB_HOST_Init+0x44>)
 8007e22:	f7fe fc81 	bl	8006728 <USBH_Init>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007e2c:	f7f8 fd1c 	bl	8000868 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8007e30:	490b      	ldr	r1, [pc, #44]	; (8007e60 <MX_USB_HOST_Init+0x48>)
 8007e32:	480a      	ldr	r0, [pc, #40]	; (8007e5c <MX_USB_HOST_Init+0x44>)
 8007e34:	f7fe fd0c 	bl	8006850 <USBH_RegisterClass>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e3e:	f7f8 fd13 	bl	8000868 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e42:	4806      	ldr	r0, [pc, #24]	; (8007e5c <MX_USB_HOST_Init+0x44>)
 8007e44:	f7fe fdf7 	bl	8006a36 <USBH_Start>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e4e:	f7f8 fd0b 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e52:	bf00      	nop
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	08007e79 	.word	0x08007e79
 8007e5c:	200001b0 	.word	0x200001b0
 8007e60:	2000000c 	.word	0x2000000c

08007e64 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e68:	4802      	ldr	r0, [pc, #8]	; (8007e74 <MX_USB_HOST_Process+0x10>)
 8007e6a:	f7fe fdf5 	bl	8006a58 <USBH_Process>
}
 8007e6e:	bf00      	nop
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	200001b0 	.word	0x200001b0

08007e78 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d819      	bhi.n	8007ec0 <USBH_UserProcess+0x48>
 8007e8c:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <USBH_UserProcess+0x1c>)
 8007e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e92:	bf00      	nop
 8007e94:	08007ec1 	.word	0x08007ec1
 8007e98:	08007eb1 	.word	0x08007eb1
 8007e9c:	08007ec1 	.word	0x08007ec1
 8007ea0:	08007eb9 	.word	0x08007eb9
 8007ea4:	08007ea9 	.word	0x08007ea9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007ea8:	4b08      	ldr	r3, [pc, #32]	; (8007ecc <USBH_UserProcess+0x54>)
 8007eaa:	2203      	movs	r2, #3
 8007eac:	701a      	strb	r2, [r3, #0]
  break;
 8007eae:	e008      	b.n	8007ec2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007eb0:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <USBH_UserProcess+0x54>)
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	701a      	strb	r2, [r3, #0]
  break;
 8007eb6:	e004      	b.n	8007ec2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007eb8:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <USBH_UserProcess+0x54>)
 8007eba:	2201      	movs	r2, #1
 8007ebc:	701a      	strb	r2, [r3, #0]
  break;
 8007ebe:	e000      	b.n	8007ec2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007ec0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr
 8007ecc:	200000bc 	.word	0x200000bc

08007ed0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ee0:	d113      	bne.n	8007f0a <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <HAL_HCD_MspInit+0x44>)
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	4a0b      	ldr	r2, [pc, #44]	; (8007f14 <HAL_HCD_MspInit+0x44>)
 8007ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007eec:	6153      	str	r3, [r2, #20]
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <HAL_HCD_MspInit+0x44>)
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007efa:	2200      	movs	r2, #0
 8007efc:	2100      	movs	r1, #0
 8007efe:	2043      	movs	r0, #67	; 0x43
 8007f00:	f7f9 f933 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f04:	2043      	movs	r0, #67	; 0x43
 8007f06:	f7f9 f94c 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f0a:	bf00      	nop
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	40021000 	.word	0x40021000

08007f18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7ff f93a 	bl	80071a0 <USBH_LL_IncTimer>
}
 8007f2c:	bf00      	nop
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7ff f970 	bl	8007228 <USBH_LL_Connect>
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff f978 	bl	8007254 <USBH_LL_Disconnect>
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bc80      	pop	{r7}
 8007f84:	4770      	bx	lr

08007f86 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7ff f92d 	bl	80071f4 <USBH_LL_PortEnabled>
} 
 8007f9a:	bf00      	nop
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b082      	sub	sp, #8
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7ff f92c 	bl	800720e <USBH_LL_PortDisabled>
} 
 8007fb6:	bf00      	nop
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d124      	bne.n	800801c <USBH_LL_Init+0x5c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007fd2:	4a15      	ldr	r2, [pc, #84]	; (8008028 <USBH_LL_Init+0x68>)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a12      	ldr	r2, [pc, #72]	; (8008028 <USBH_LL_Init+0x68>)
 8007fde:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fe2:	4b11      	ldr	r3, [pc, #68]	; (8008028 <USBH_LL_Init+0x68>)
 8007fe4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fe8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007fea:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <USBH_LL_Init+0x68>)
 8007fec:	2208      	movs	r2, #8
 8007fee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007ff0:	4b0d      	ldr	r3, [pc, #52]	; (8008028 <USBH_LL_Init+0x68>)
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ff6:	4b0c      	ldr	r3, [pc, #48]	; (8008028 <USBH_LL_Init+0x68>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007ffc:	480a      	ldr	r0, [pc, #40]	; (8008028 <USBH_LL_Init+0x68>)
 8007ffe:	f7f9 fa45 	bl	800148c <HAL_HCD_Init>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <USBH_LL_Init+0x4c>
  {
    Error_Handler( );
 8008008:	f7f8 fc2e 	bl	8000868 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800800c:	4806      	ldr	r0, [pc, #24]	; (8008028 <USBH_LL_Init+0x68>)
 800800e:	f7f9 fe43 	bl	8001c98 <HAL_HCD_GetCurrentFrame>
 8008012:	4603      	mov	r3, r0
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff f8b4 	bl	8007184 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	20000580 	.word	0x20000580

0800802c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008042:	4618      	mov	r0, r3
 8008044:	f7f9 fdb2 	bl	8001bac <HAL_HCD_Start>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f952 	bl	80082f8 <USBH_Get_USB_Status>
 8008054:	4603      	mov	r3, r0
 8008056:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008058:	7bbb      	ldrb	r3, [r7, #14]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008078:	4618      	mov	r0, r3
 800807a:	f7f9 fdba 	bl	8001bf2 <HAL_HCD_Stop>
 800807e:	4603      	mov	r3, r0
 8008080:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	4618      	mov	r0, r3
 8008086:	f000 f937 	bl	80082f8 <USBH_Get_USB_Status>
 800808a:	4603      	mov	r3, r0
 800808c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800808e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80080a0:	2301      	movs	r3, #1
 80080a2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7f9 fe02 	bl	8001cb4 <HAL_HCD_GetCurrentSpeed>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d007      	beq.n	80080c6 <USBH_LL_GetSpeed+0x2e>
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d302      	bcc.n	80080c0 <USBH_LL_GetSpeed+0x28>
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d006      	beq.n	80080cc <USBH_LL_GetSpeed+0x34>
 80080be:	e008      	b.n	80080d2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]
    break;
 80080c4:	e008      	b.n	80080d8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80080c6:	2301      	movs	r3, #1
 80080c8:	73fb      	strb	r3, [r7, #15]
    break;
 80080ca:	e005      	b.n	80080d8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80080cc:	2302      	movs	r3, #2
 80080ce:	73fb      	strb	r3, [r7, #15]
    break;
 80080d0:	e002      	b.n	80080d8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80080d2:	2301      	movs	r3, #1
 80080d4:	73fb      	strb	r3, [r7, #15]
    break;
 80080d6:	bf00      	nop
  }
  return  speed;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7f9 fd97 	bl	8001c2c <HAL_HCD_ResetPort>
 80080fe:	4603      	mov	r3, r0
 8008100:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008102:	7bfb      	ldrb	r3, [r7, #15]
 8008104:	4618      	mov	r0, r3
 8008106:	f000 f8f7 	bl	80082f8 <USBH_Get_USB_Status>
 800810a:	4603      	mov	r3, r0
 800810c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800810e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800812a:	78fa      	ldrb	r2, [r7, #3]
 800812c:	4611      	mov	r1, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f7f9 fd9e 	bl	8001c70 <HAL_HCD_HC_GetXferCount>
 8008134:	4603      	mov	r3, r0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800813e:	b590      	push	{r4, r7, lr}
 8008140:	b089      	sub	sp, #36	; 0x24
 8008142:	af04      	add	r7, sp, #16
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	4608      	mov	r0, r1
 8008148:	4611      	mov	r1, r2
 800814a:	461a      	mov	r2, r3
 800814c:	4603      	mov	r3, r0
 800814e:	70fb      	strb	r3, [r7, #3]
 8008150:	460b      	mov	r3, r1
 8008152:	70bb      	strb	r3, [r7, #2]
 8008154:	4613      	mov	r3, r2
 8008156:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 8008166:	787c      	ldrb	r4, [r7, #1]
 8008168:	78ba      	ldrb	r2, [r7, #2]
 800816a:	78f9      	ldrb	r1, [r7, #3]
 800816c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800816e:	9302      	str	r3, [sp, #8]
 8008170:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	4623      	mov	r3, r4
 800817e:	f7f9 f9e7 	bl	8001550 <HAL_HCD_HC_Init>
 8008182:	4603      	mov	r3, r0
 8008184:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	4618      	mov	r0, r3
 800818a:	f000 f8b5 	bl	80082f8 <USBH_Get_USB_Status>
 800818e:	4603      	mov	r3, r0
 8008190:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008192:	7bbb      	ldrb	r3, [r7, #14]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	bd90      	pop	{r4, r7, pc}

0800819c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7f9 fa60 	bl	8001680 <HAL_HCD_HC_Halt>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 f896 	bl	80082f8 <USBH_Get_USB_Status>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081da:	b590      	push	{r4, r7, lr}
 80081dc:	b089      	sub	sp, #36	; 0x24
 80081de:	af04      	add	r7, sp, #16
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	4608      	mov	r0, r1
 80081e4:	4611      	mov	r1, r2
 80081e6:	461a      	mov	r2, r3
 80081e8:	4603      	mov	r3, r0
 80081ea:	70fb      	strb	r3, [r7, #3]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70bb      	strb	r3, [r7, #2]
 80081f0:	4613      	mov	r3, r2
 80081f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 8008202:	787c      	ldrb	r4, [r7, #1]
 8008204:	78ba      	ldrb	r2, [r7, #2]
 8008206:	78f9      	ldrb	r1, [r7, #3]
 8008208:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800820c:	9303      	str	r3, [sp, #12]
 800820e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008210:	9302      	str	r3, [sp, #8]
 8008212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	f897 3020 	ldrb.w	r3, [r7, #32]
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	4623      	mov	r3, r4
 800821e:	f7f9 fa53 	bl	80016c8 <HAL_HCD_HC_SubmitRequest>
 8008222:	4603      	mov	r3, r0
 8008224:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	4618      	mov	r0, r3
 800822a:	f000 f865 	bl	80082f8 <USBH_Get_USB_Status>
 800822e:	4603      	mov	r3, r0
 8008230:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008232:	7bbb      	ldrb	r3, [r7, #14]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	bd90      	pop	{r4, r7, pc}

0800823c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f7f9 fcf8 	bl	8001c48 <HAL_HCD_HC_GetURBState>
 8008258:	4603      	mov	r3, r0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b082      	sub	sp, #8
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	460b      	mov	r3, r1
 800826c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800826e:	20c8      	movs	r0, #200	; 0xc8
 8008270:	f7f8 fe82 	bl	8000f78 <HAL_Delay>
  return USBH_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800827e:	b480      	push	{r7}
 8008280:	b085      	sub	sp, #20
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
 800828a:	4613      	mov	r3, r2
 800828c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008294:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	68f9      	ldr	r1, [r7, #12]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	440b      	add	r3, r1
 80082a4:	333b      	adds	r3, #59	; 0x3b
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	440b      	add	r3, r1
 80082ba:	3350      	adds	r3, #80	; 0x50
 80082bc:	78ba      	ldrb	r2, [r7, #2]
 80082be:	701a      	strb	r2, [r3, #0]
 80082c0:	e009      	b.n	80082d6 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	68f9      	ldr	r1, [r7, #12]
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	440b      	add	r3, r1
 80082d0:	3351      	adds	r3, #81	; 0x51
 80082d2:	78ba      	ldrb	r2, [r7, #2]
 80082d4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr

080082e2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7f8 fe44 	bl	8000f78 <HAL_Delay>
}
 80082f0:	bf00      	nop
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	4603      	mov	r3, r0
 8008300:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008306:	79fb      	ldrb	r3, [r7, #7]
 8008308:	2b03      	cmp	r3, #3
 800830a:	d817      	bhi.n	800833c <USBH_Get_USB_Status+0x44>
 800830c:	a201      	add	r2, pc, #4	; (adr r2, 8008314 <USBH_Get_USB_Status+0x1c>)
 800830e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008312:	bf00      	nop
 8008314:	08008325 	.word	0x08008325
 8008318:	0800832b 	.word	0x0800832b
 800831c:	08008331 	.word	0x08008331
 8008320:	08008337 	.word	0x08008337
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]
    break;
 8008328:	e00b      	b.n	8008342 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800832a:	2302      	movs	r3, #2
 800832c:	73fb      	strb	r3, [r7, #15]
    break;
 800832e:	e008      	b.n	8008342 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008330:	2301      	movs	r3, #1
 8008332:	73fb      	strb	r3, [r7, #15]
    break;
 8008334:	e005      	b.n	8008342 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008336:	2302      	movs	r3, #2
 8008338:	73fb      	strb	r3, [r7, #15]
    break;
 800833a:	e002      	b.n	8008342 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800833c:	2302      	movs	r3, #2
 800833e:	73fb      	strb	r3, [r7, #15]
    break;
 8008340:	bf00      	nop
  }
  return usb_status;
 8008342:	7bfb      	ldrb	r3, [r7, #15]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	bc80      	pop	{r7}
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop

08008350 <__errno>:
 8008350:	4b01      	ldr	r3, [pc, #4]	; (8008358 <__errno+0x8>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	2000002c 	.word	0x2000002c

0800835c <malloc>:
 800835c:	4b02      	ldr	r3, [pc, #8]	; (8008368 <malloc+0xc>)
 800835e:	4601      	mov	r1, r0
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	f000 b85f 	b.w	8008424 <_malloc_r>
 8008366:	bf00      	nop
 8008368:	2000002c 	.word	0x2000002c

0800836c <free>:
 800836c:	4b02      	ldr	r3, [pc, #8]	; (8008378 <free+0xc>)
 800836e:	4601      	mov	r1, r0
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	f000 b80b 	b.w	800838c <_free_r>
 8008376:	bf00      	nop
 8008378:	2000002c 	.word	0x2000002c

0800837c <memset>:
 800837c:	4603      	mov	r3, r0
 800837e:	4402      	add	r2, r0
 8008380:	4293      	cmp	r3, r2
 8008382:	d100      	bne.n	8008386 <memset+0xa>
 8008384:	4770      	bx	lr
 8008386:	f803 1b01 	strb.w	r1, [r3], #1
 800838a:	e7f9      	b.n	8008380 <memset+0x4>

0800838c <_free_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	4605      	mov	r5, r0
 8008390:	2900      	cmp	r1, #0
 8008392:	d043      	beq.n	800841c <_free_r+0x90>
 8008394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008398:	1f0c      	subs	r4, r1, #4
 800839a:	2b00      	cmp	r3, #0
 800839c:	bfb8      	it	lt
 800839e:	18e4      	addlt	r4, r4, r3
 80083a0:	f000 fbc4 	bl	8008b2c <__malloc_lock>
 80083a4:	4a1e      	ldr	r2, [pc, #120]	; (8008420 <_free_r+0x94>)
 80083a6:	6813      	ldr	r3, [r2, #0]
 80083a8:	4610      	mov	r0, r2
 80083aa:	b933      	cbnz	r3, 80083ba <_free_r+0x2e>
 80083ac:	6063      	str	r3, [r4, #4]
 80083ae:	6014      	str	r4, [r2, #0]
 80083b0:	4628      	mov	r0, r5
 80083b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083b6:	f000 bbba 	b.w	8008b2e <__malloc_unlock>
 80083ba:	42a3      	cmp	r3, r4
 80083bc:	d90b      	bls.n	80083d6 <_free_r+0x4a>
 80083be:	6821      	ldr	r1, [r4, #0]
 80083c0:	1862      	adds	r2, r4, r1
 80083c2:	4293      	cmp	r3, r2
 80083c4:	bf01      	itttt	eq
 80083c6:	681a      	ldreq	r2, [r3, #0]
 80083c8:	685b      	ldreq	r3, [r3, #4]
 80083ca:	1852      	addeq	r2, r2, r1
 80083cc:	6022      	streq	r2, [r4, #0]
 80083ce:	6063      	str	r3, [r4, #4]
 80083d0:	6004      	str	r4, [r0, #0]
 80083d2:	e7ed      	b.n	80083b0 <_free_r+0x24>
 80083d4:	4613      	mov	r3, r2
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	b10a      	cbz	r2, 80083de <_free_r+0x52>
 80083da:	42a2      	cmp	r2, r4
 80083dc:	d9fa      	bls.n	80083d4 <_free_r+0x48>
 80083de:	6819      	ldr	r1, [r3, #0]
 80083e0:	1858      	adds	r0, r3, r1
 80083e2:	42a0      	cmp	r0, r4
 80083e4:	d10b      	bne.n	80083fe <_free_r+0x72>
 80083e6:	6820      	ldr	r0, [r4, #0]
 80083e8:	4401      	add	r1, r0
 80083ea:	1858      	adds	r0, r3, r1
 80083ec:	4282      	cmp	r2, r0
 80083ee:	6019      	str	r1, [r3, #0]
 80083f0:	d1de      	bne.n	80083b0 <_free_r+0x24>
 80083f2:	6810      	ldr	r0, [r2, #0]
 80083f4:	6852      	ldr	r2, [r2, #4]
 80083f6:	4401      	add	r1, r0
 80083f8:	6019      	str	r1, [r3, #0]
 80083fa:	605a      	str	r2, [r3, #4]
 80083fc:	e7d8      	b.n	80083b0 <_free_r+0x24>
 80083fe:	d902      	bls.n	8008406 <_free_r+0x7a>
 8008400:	230c      	movs	r3, #12
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	e7d4      	b.n	80083b0 <_free_r+0x24>
 8008406:	6820      	ldr	r0, [r4, #0]
 8008408:	1821      	adds	r1, r4, r0
 800840a:	428a      	cmp	r2, r1
 800840c:	bf01      	itttt	eq
 800840e:	6811      	ldreq	r1, [r2, #0]
 8008410:	6852      	ldreq	r2, [r2, #4]
 8008412:	1809      	addeq	r1, r1, r0
 8008414:	6021      	streq	r1, [r4, #0]
 8008416:	6062      	str	r2, [r4, #4]
 8008418:	605c      	str	r4, [r3, #4]
 800841a:	e7c9      	b.n	80083b0 <_free_r+0x24>
 800841c:	bd38      	pop	{r3, r4, r5, pc}
 800841e:	bf00      	nop
 8008420:	200000c0 	.word	0x200000c0

08008424 <_malloc_r>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	1ccd      	adds	r5, r1, #3
 8008428:	f025 0503 	bic.w	r5, r5, #3
 800842c:	3508      	adds	r5, #8
 800842e:	2d0c      	cmp	r5, #12
 8008430:	bf38      	it	cc
 8008432:	250c      	movcc	r5, #12
 8008434:	2d00      	cmp	r5, #0
 8008436:	4606      	mov	r6, r0
 8008438:	db01      	blt.n	800843e <_malloc_r+0x1a>
 800843a:	42a9      	cmp	r1, r5
 800843c:	d903      	bls.n	8008446 <_malloc_r+0x22>
 800843e:	230c      	movs	r3, #12
 8008440:	6033      	str	r3, [r6, #0]
 8008442:	2000      	movs	r0, #0
 8008444:	bd70      	pop	{r4, r5, r6, pc}
 8008446:	f000 fb71 	bl	8008b2c <__malloc_lock>
 800844a:	4a21      	ldr	r2, [pc, #132]	; (80084d0 <_malloc_r+0xac>)
 800844c:	6814      	ldr	r4, [r2, #0]
 800844e:	4621      	mov	r1, r4
 8008450:	b991      	cbnz	r1, 8008478 <_malloc_r+0x54>
 8008452:	4c20      	ldr	r4, [pc, #128]	; (80084d4 <_malloc_r+0xb0>)
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	b91b      	cbnz	r3, 8008460 <_malloc_r+0x3c>
 8008458:	4630      	mov	r0, r6
 800845a:	f000 f8b9 	bl	80085d0 <_sbrk_r>
 800845e:	6020      	str	r0, [r4, #0]
 8008460:	4629      	mov	r1, r5
 8008462:	4630      	mov	r0, r6
 8008464:	f000 f8b4 	bl	80085d0 <_sbrk_r>
 8008468:	1c43      	adds	r3, r0, #1
 800846a:	d124      	bne.n	80084b6 <_malloc_r+0x92>
 800846c:	230c      	movs	r3, #12
 800846e:	4630      	mov	r0, r6
 8008470:	6033      	str	r3, [r6, #0]
 8008472:	f000 fb5c 	bl	8008b2e <__malloc_unlock>
 8008476:	e7e4      	b.n	8008442 <_malloc_r+0x1e>
 8008478:	680b      	ldr	r3, [r1, #0]
 800847a:	1b5b      	subs	r3, r3, r5
 800847c:	d418      	bmi.n	80084b0 <_malloc_r+0x8c>
 800847e:	2b0b      	cmp	r3, #11
 8008480:	d90f      	bls.n	80084a2 <_malloc_r+0x7e>
 8008482:	600b      	str	r3, [r1, #0]
 8008484:	18cc      	adds	r4, r1, r3
 8008486:	50cd      	str	r5, [r1, r3]
 8008488:	4630      	mov	r0, r6
 800848a:	f000 fb50 	bl	8008b2e <__malloc_unlock>
 800848e:	f104 000b 	add.w	r0, r4, #11
 8008492:	1d23      	adds	r3, r4, #4
 8008494:	f020 0007 	bic.w	r0, r0, #7
 8008498:	1ac3      	subs	r3, r0, r3
 800849a:	d0d3      	beq.n	8008444 <_malloc_r+0x20>
 800849c:	425a      	negs	r2, r3
 800849e:	50e2      	str	r2, [r4, r3]
 80084a0:	e7d0      	b.n	8008444 <_malloc_r+0x20>
 80084a2:	684b      	ldr	r3, [r1, #4]
 80084a4:	428c      	cmp	r4, r1
 80084a6:	bf16      	itet	ne
 80084a8:	6063      	strne	r3, [r4, #4]
 80084aa:	6013      	streq	r3, [r2, #0]
 80084ac:	460c      	movne	r4, r1
 80084ae:	e7eb      	b.n	8008488 <_malloc_r+0x64>
 80084b0:	460c      	mov	r4, r1
 80084b2:	6849      	ldr	r1, [r1, #4]
 80084b4:	e7cc      	b.n	8008450 <_malloc_r+0x2c>
 80084b6:	1cc4      	adds	r4, r0, #3
 80084b8:	f024 0403 	bic.w	r4, r4, #3
 80084bc:	42a0      	cmp	r0, r4
 80084be:	d005      	beq.n	80084cc <_malloc_r+0xa8>
 80084c0:	1a21      	subs	r1, r4, r0
 80084c2:	4630      	mov	r0, r6
 80084c4:	f000 f884 	bl	80085d0 <_sbrk_r>
 80084c8:	3001      	adds	r0, #1
 80084ca:	d0cf      	beq.n	800846c <_malloc_r+0x48>
 80084cc:	6025      	str	r5, [r4, #0]
 80084ce:	e7db      	b.n	8008488 <_malloc_r+0x64>
 80084d0:	200000c0 	.word	0x200000c0
 80084d4:	200000c4 	.word	0x200000c4

080084d8 <iprintf>:
 80084d8:	b40f      	push	{r0, r1, r2, r3}
 80084da:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <iprintf+0x2c>)
 80084dc:	b513      	push	{r0, r1, r4, lr}
 80084de:	681c      	ldr	r4, [r3, #0]
 80084e0:	b124      	cbz	r4, 80084ec <iprintf+0x14>
 80084e2:	69a3      	ldr	r3, [r4, #24]
 80084e4:	b913      	cbnz	r3, 80084ec <iprintf+0x14>
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 fa32 	bl	8008950 <__sinit>
 80084ec:	ab05      	add	r3, sp, #20
 80084ee:	9a04      	ldr	r2, [sp, #16]
 80084f0:	68a1      	ldr	r1, [r4, #8]
 80084f2:	4620      	mov	r0, r4
 80084f4:	9301      	str	r3, [sp, #4]
 80084f6:	f000 fb43 	bl	8008b80 <_vfiprintf_r>
 80084fa:	b002      	add	sp, #8
 80084fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008500:	b004      	add	sp, #16
 8008502:	4770      	bx	lr
 8008504:	2000002c 	.word	0x2000002c

08008508 <_puts_r>:
 8008508:	b570      	push	{r4, r5, r6, lr}
 800850a:	460e      	mov	r6, r1
 800850c:	4605      	mov	r5, r0
 800850e:	b118      	cbz	r0, 8008518 <_puts_r+0x10>
 8008510:	6983      	ldr	r3, [r0, #24]
 8008512:	b90b      	cbnz	r3, 8008518 <_puts_r+0x10>
 8008514:	f000 fa1c 	bl	8008950 <__sinit>
 8008518:	69ab      	ldr	r3, [r5, #24]
 800851a:	68ac      	ldr	r4, [r5, #8]
 800851c:	b913      	cbnz	r3, 8008524 <_puts_r+0x1c>
 800851e:	4628      	mov	r0, r5
 8008520:	f000 fa16 	bl	8008950 <__sinit>
 8008524:	4b23      	ldr	r3, [pc, #140]	; (80085b4 <_puts_r+0xac>)
 8008526:	429c      	cmp	r4, r3
 8008528:	d117      	bne.n	800855a <_puts_r+0x52>
 800852a:	686c      	ldr	r4, [r5, #4]
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	071b      	lsls	r3, r3, #28
 8008530:	d51d      	bpl.n	800856e <_puts_r+0x66>
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	b1db      	cbz	r3, 800856e <_puts_r+0x66>
 8008536:	3e01      	subs	r6, #1
 8008538:	68a3      	ldr	r3, [r4, #8]
 800853a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800853e:	3b01      	subs	r3, #1
 8008540:	60a3      	str	r3, [r4, #8]
 8008542:	b9e9      	cbnz	r1, 8008580 <_puts_r+0x78>
 8008544:	2b00      	cmp	r3, #0
 8008546:	da2e      	bge.n	80085a6 <_puts_r+0x9e>
 8008548:	4622      	mov	r2, r4
 800854a:	210a      	movs	r1, #10
 800854c:	4628      	mov	r0, r5
 800854e:	f000 f84f 	bl	80085f0 <__swbuf_r>
 8008552:	3001      	adds	r0, #1
 8008554:	d011      	beq.n	800857a <_puts_r+0x72>
 8008556:	200a      	movs	r0, #10
 8008558:	e011      	b.n	800857e <_puts_r+0x76>
 800855a:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <_puts_r+0xb0>)
 800855c:	429c      	cmp	r4, r3
 800855e:	d101      	bne.n	8008564 <_puts_r+0x5c>
 8008560:	68ac      	ldr	r4, [r5, #8]
 8008562:	e7e3      	b.n	800852c <_puts_r+0x24>
 8008564:	4b15      	ldr	r3, [pc, #84]	; (80085bc <_puts_r+0xb4>)
 8008566:	429c      	cmp	r4, r3
 8008568:	bf08      	it	eq
 800856a:	68ec      	ldreq	r4, [r5, #12]
 800856c:	e7de      	b.n	800852c <_puts_r+0x24>
 800856e:	4621      	mov	r1, r4
 8008570:	4628      	mov	r0, r5
 8008572:	f000 f88f 	bl	8008694 <__swsetup_r>
 8008576:	2800      	cmp	r0, #0
 8008578:	d0dd      	beq.n	8008536 <_puts_r+0x2e>
 800857a:	f04f 30ff 	mov.w	r0, #4294967295
 800857e:	bd70      	pop	{r4, r5, r6, pc}
 8008580:	2b00      	cmp	r3, #0
 8008582:	da04      	bge.n	800858e <_puts_r+0x86>
 8008584:	69a2      	ldr	r2, [r4, #24]
 8008586:	429a      	cmp	r2, r3
 8008588:	dc06      	bgt.n	8008598 <_puts_r+0x90>
 800858a:	290a      	cmp	r1, #10
 800858c:	d004      	beq.n	8008598 <_puts_r+0x90>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	6022      	str	r2, [r4, #0]
 8008594:	7019      	strb	r1, [r3, #0]
 8008596:	e7cf      	b.n	8008538 <_puts_r+0x30>
 8008598:	4622      	mov	r2, r4
 800859a:	4628      	mov	r0, r5
 800859c:	f000 f828 	bl	80085f0 <__swbuf_r>
 80085a0:	3001      	adds	r0, #1
 80085a2:	d1c9      	bne.n	8008538 <_puts_r+0x30>
 80085a4:	e7e9      	b.n	800857a <_puts_r+0x72>
 80085a6:	200a      	movs	r0, #10
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	6022      	str	r2, [r4, #0]
 80085ae:	7018      	strb	r0, [r3, #0]
 80085b0:	e7e5      	b.n	800857e <_puts_r+0x76>
 80085b2:	bf00      	nop
 80085b4:	08009a50 	.word	0x08009a50
 80085b8:	08009a70 	.word	0x08009a70
 80085bc:	08009a30 	.word	0x08009a30

080085c0 <puts>:
 80085c0:	4b02      	ldr	r3, [pc, #8]	; (80085cc <puts+0xc>)
 80085c2:	4601      	mov	r1, r0
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	f7ff bf9f 	b.w	8008508 <_puts_r>
 80085ca:	bf00      	nop
 80085cc:	2000002c 	.word	0x2000002c

080085d0 <_sbrk_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	2300      	movs	r3, #0
 80085d4:	4c05      	ldr	r4, [pc, #20]	; (80085ec <_sbrk_r+0x1c>)
 80085d6:	4605      	mov	r5, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	6023      	str	r3, [r4, #0]
 80085dc:	f7f8 fb0c 	bl	8000bf8 <_sbrk>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_sbrk_r+0x1a>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_sbrk_r+0x1a>
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20000844 	.word	0x20000844

080085f0 <__swbuf_r>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	460e      	mov	r6, r1
 80085f4:	4614      	mov	r4, r2
 80085f6:	4605      	mov	r5, r0
 80085f8:	b118      	cbz	r0, 8008602 <__swbuf_r+0x12>
 80085fa:	6983      	ldr	r3, [r0, #24]
 80085fc:	b90b      	cbnz	r3, 8008602 <__swbuf_r+0x12>
 80085fe:	f000 f9a7 	bl	8008950 <__sinit>
 8008602:	4b21      	ldr	r3, [pc, #132]	; (8008688 <__swbuf_r+0x98>)
 8008604:	429c      	cmp	r4, r3
 8008606:	d12a      	bne.n	800865e <__swbuf_r+0x6e>
 8008608:	686c      	ldr	r4, [r5, #4]
 800860a:	69a3      	ldr	r3, [r4, #24]
 800860c:	60a3      	str	r3, [r4, #8]
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	071a      	lsls	r2, r3, #28
 8008612:	d52e      	bpl.n	8008672 <__swbuf_r+0x82>
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	b363      	cbz	r3, 8008672 <__swbuf_r+0x82>
 8008618:	6923      	ldr	r3, [r4, #16]
 800861a:	6820      	ldr	r0, [r4, #0]
 800861c:	b2f6      	uxtb	r6, r6
 800861e:	1ac0      	subs	r0, r0, r3
 8008620:	6963      	ldr	r3, [r4, #20]
 8008622:	4637      	mov	r7, r6
 8008624:	4283      	cmp	r3, r0
 8008626:	dc04      	bgt.n	8008632 <__swbuf_r+0x42>
 8008628:	4621      	mov	r1, r4
 800862a:	4628      	mov	r0, r5
 800862c:	f000 f926 	bl	800887c <_fflush_r>
 8008630:	bb28      	cbnz	r0, 800867e <__swbuf_r+0x8e>
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	3001      	adds	r0, #1
 8008636:	3b01      	subs	r3, #1
 8008638:	60a3      	str	r3, [r4, #8]
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	6022      	str	r2, [r4, #0]
 8008640:	701e      	strb	r6, [r3, #0]
 8008642:	6963      	ldr	r3, [r4, #20]
 8008644:	4283      	cmp	r3, r0
 8008646:	d004      	beq.n	8008652 <__swbuf_r+0x62>
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	07db      	lsls	r3, r3, #31
 800864c:	d519      	bpl.n	8008682 <__swbuf_r+0x92>
 800864e:	2e0a      	cmp	r6, #10
 8008650:	d117      	bne.n	8008682 <__swbuf_r+0x92>
 8008652:	4621      	mov	r1, r4
 8008654:	4628      	mov	r0, r5
 8008656:	f000 f911 	bl	800887c <_fflush_r>
 800865a:	b190      	cbz	r0, 8008682 <__swbuf_r+0x92>
 800865c:	e00f      	b.n	800867e <__swbuf_r+0x8e>
 800865e:	4b0b      	ldr	r3, [pc, #44]	; (800868c <__swbuf_r+0x9c>)
 8008660:	429c      	cmp	r4, r3
 8008662:	d101      	bne.n	8008668 <__swbuf_r+0x78>
 8008664:	68ac      	ldr	r4, [r5, #8]
 8008666:	e7d0      	b.n	800860a <__swbuf_r+0x1a>
 8008668:	4b09      	ldr	r3, [pc, #36]	; (8008690 <__swbuf_r+0xa0>)
 800866a:	429c      	cmp	r4, r3
 800866c:	bf08      	it	eq
 800866e:	68ec      	ldreq	r4, [r5, #12]
 8008670:	e7cb      	b.n	800860a <__swbuf_r+0x1a>
 8008672:	4621      	mov	r1, r4
 8008674:	4628      	mov	r0, r5
 8008676:	f000 f80d 	bl	8008694 <__swsetup_r>
 800867a:	2800      	cmp	r0, #0
 800867c:	d0cc      	beq.n	8008618 <__swbuf_r+0x28>
 800867e:	f04f 37ff 	mov.w	r7, #4294967295
 8008682:	4638      	mov	r0, r7
 8008684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008686:	bf00      	nop
 8008688:	08009a50 	.word	0x08009a50
 800868c:	08009a70 	.word	0x08009a70
 8008690:	08009a30 	.word	0x08009a30

08008694 <__swsetup_r>:
 8008694:	4b32      	ldr	r3, [pc, #200]	; (8008760 <__swsetup_r+0xcc>)
 8008696:	b570      	push	{r4, r5, r6, lr}
 8008698:	681d      	ldr	r5, [r3, #0]
 800869a:	4606      	mov	r6, r0
 800869c:	460c      	mov	r4, r1
 800869e:	b125      	cbz	r5, 80086aa <__swsetup_r+0x16>
 80086a0:	69ab      	ldr	r3, [r5, #24]
 80086a2:	b913      	cbnz	r3, 80086aa <__swsetup_r+0x16>
 80086a4:	4628      	mov	r0, r5
 80086a6:	f000 f953 	bl	8008950 <__sinit>
 80086aa:	4b2e      	ldr	r3, [pc, #184]	; (8008764 <__swsetup_r+0xd0>)
 80086ac:	429c      	cmp	r4, r3
 80086ae:	d10f      	bne.n	80086d0 <__swsetup_r+0x3c>
 80086b0:	686c      	ldr	r4, [r5, #4]
 80086b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	0715      	lsls	r5, r2, #28
 80086ba:	d42c      	bmi.n	8008716 <__swsetup_r+0x82>
 80086bc:	06d0      	lsls	r0, r2, #27
 80086be:	d411      	bmi.n	80086e4 <__swsetup_r+0x50>
 80086c0:	2209      	movs	r2, #9
 80086c2:	6032      	str	r2, [r6, #0]
 80086c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c8:	81a3      	strh	r3, [r4, #12]
 80086ca:	f04f 30ff 	mov.w	r0, #4294967295
 80086ce:	e03e      	b.n	800874e <__swsetup_r+0xba>
 80086d0:	4b25      	ldr	r3, [pc, #148]	; (8008768 <__swsetup_r+0xd4>)
 80086d2:	429c      	cmp	r4, r3
 80086d4:	d101      	bne.n	80086da <__swsetup_r+0x46>
 80086d6:	68ac      	ldr	r4, [r5, #8]
 80086d8:	e7eb      	b.n	80086b2 <__swsetup_r+0x1e>
 80086da:	4b24      	ldr	r3, [pc, #144]	; (800876c <__swsetup_r+0xd8>)
 80086dc:	429c      	cmp	r4, r3
 80086de:	bf08      	it	eq
 80086e0:	68ec      	ldreq	r4, [r5, #12]
 80086e2:	e7e6      	b.n	80086b2 <__swsetup_r+0x1e>
 80086e4:	0751      	lsls	r1, r2, #29
 80086e6:	d512      	bpl.n	800870e <__swsetup_r+0x7a>
 80086e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086ea:	b141      	cbz	r1, 80086fe <__swsetup_r+0x6a>
 80086ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086f0:	4299      	cmp	r1, r3
 80086f2:	d002      	beq.n	80086fa <__swsetup_r+0x66>
 80086f4:	4630      	mov	r0, r6
 80086f6:	f7ff fe49 	bl	800838c <_free_r>
 80086fa:	2300      	movs	r3, #0
 80086fc:	6363      	str	r3, [r4, #52]	; 0x34
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008704:	81a3      	strh	r3, [r4, #12]
 8008706:	2300      	movs	r3, #0
 8008708:	6063      	str	r3, [r4, #4]
 800870a:	6923      	ldr	r3, [r4, #16]
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	89a3      	ldrh	r3, [r4, #12]
 8008710:	f043 0308 	orr.w	r3, r3, #8
 8008714:	81a3      	strh	r3, [r4, #12]
 8008716:	6923      	ldr	r3, [r4, #16]
 8008718:	b94b      	cbnz	r3, 800872e <__swsetup_r+0x9a>
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008724:	d003      	beq.n	800872e <__swsetup_r+0x9a>
 8008726:	4621      	mov	r1, r4
 8008728:	4630      	mov	r0, r6
 800872a:	f000 f9bf 	bl	8008aac <__smakebuf_r>
 800872e:	89a2      	ldrh	r2, [r4, #12]
 8008730:	f012 0301 	ands.w	r3, r2, #1
 8008734:	d00c      	beq.n	8008750 <__swsetup_r+0xbc>
 8008736:	2300      	movs	r3, #0
 8008738:	60a3      	str	r3, [r4, #8]
 800873a:	6963      	ldr	r3, [r4, #20]
 800873c:	425b      	negs	r3, r3
 800873e:	61a3      	str	r3, [r4, #24]
 8008740:	6923      	ldr	r3, [r4, #16]
 8008742:	b953      	cbnz	r3, 800875a <__swsetup_r+0xc6>
 8008744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008748:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800874c:	d1ba      	bne.n	80086c4 <__swsetup_r+0x30>
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	0792      	lsls	r2, r2, #30
 8008752:	bf58      	it	pl
 8008754:	6963      	ldrpl	r3, [r4, #20]
 8008756:	60a3      	str	r3, [r4, #8]
 8008758:	e7f2      	b.n	8008740 <__swsetup_r+0xac>
 800875a:	2000      	movs	r0, #0
 800875c:	e7f7      	b.n	800874e <__swsetup_r+0xba>
 800875e:	bf00      	nop
 8008760:	2000002c 	.word	0x2000002c
 8008764:	08009a50 	.word	0x08009a50
 8008768:	08009a70 	.word	0x08009a70
 800876c:	08009a30 	.word	0x08009a30

08008770 <__sflush_r>:
 8008770:	898a      	ldrh	r2, [r1, #12]
 8008772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008776:	4605      	mov	r5, r0
 8008778:	0710      	lsls	r0, r2, #28
 800877a:	460c      	mov	r4, r1
 800877c:	d458      	bmi.n	8008830 <__sflush_r+0xc0>
 800877e:	684b      	ldr	r3, [r1, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	dc05      	bgt.n	8008790 <__sflush_r+0x20>
 8008784:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008786:	2b00      	cmp	r3, #0
 8008788:	dc02      	bgt.n	8008790 <__sflush_r+0x20>
 800878a:	2000      	movs	r0, #0
 800878c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008792:	2e00      	cmp	r6, #0
 8008794:	d0f9      	beq.n	800878a <__sflush_r+0x1a>
 8008796:	2300      	movs	r3, #0
 8008798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800879c:	682f      	ldr	r7, [r5, #0]
 800879e:	6a21      	ldr	r1, [r4, #32]
 80087a0:	602b      	str	r3, [r5, #0]
 80087a2:	d032      	beq.n	800880a <__sflush_r+0x9a>
 80087a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	075a      	lsls	r2, r3, #29
 80087aa:	d505      	bpl.n	80087b8 <__sflush_r+0x48>
 80087ac:	6863      	ldr	r3, [r4, #4]
 80087ae:	1ac0      	subs	r0, r0, r3
 80087b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087b2:	b10b      	cbz	r3, 80087b8 <__sflush_r+0x48>
 80087b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087b6:	1ac0      	subs	r0, r0, r3
 80087b8:	2300      	movs	r3, #0
 80087ba:	4602      	mov	r2, r0
 80087bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087be:	6a21      	ldr	r1, [r4, #32]
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b0      	blx	r6
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	89a3      	ldrh	r3, [r4, #12]
 80087c8:	d106      	bne.n	80087d8 <__sflush_r+0x68>
 80087ca:	6829      	ldr	r1, [r5, #0]
 80087cc:	291d      	cmp	r1, #29
 80087ce:	d848      	bhi.n	8008862 <__sflush_r+0xf2>
 80087d0:	4a29      	ldr	r2, [pc, #164]	; (8008878 <__sflush_r+0x108>)
 80087d2:	40ca      	lsrs	r2, r1
 80087d4:	07d6      	lsls	r6, r2, #31
 80087d6:	d544      	bpl.n	8008862 <__sflush_r+0xf2>
 80087d8:	2200      	movs	r2, #0
 80087da:	6062      	str	r2, [r4, #4]
 80087dc:	6922      	ldr	r2, [r4, #16]
 80087de:	04d9      	lsls	r1, r3, #19
 80087e0:	6022      	str	r2, [r4, #0]
 80087e2:	d504      	bpl.n	80087ee <__sflush_r+0x7e>
 80087e4:	1c42      	adds	r2, r0, #1
 80087e6:	d101      	bne.n	80087ec <__sflush_r+0x7c>
 80087e8:	682b      	ldr	r3, [r5, #0]
 80087ea:	b903      	cbnz	r3, 80087ee <__sflush_r+0x7e>
 80087ec:	6560      	str	r0, [r4, #84]	; 0x54
 80087ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087f0:	602f      	str	r7, [r5, #0]
 80087f2:	2900      	cmp	r1, #0
 80087f4:	d0c9      	beq.n	800878a <__sflush_r+0x1a>
 80087f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087fa:	4299      	cmp	r1, r3
 80087fc:	d002      	beq.n	8008804 <__sflush_r+0x94>
 80087fe:	4628      	mov	r0, r5
 8008800:	f7ff fdc4 	bl	800838c <_free_r>
 8008804:	2000      	movs	r0, #0
 8008806:	6360      	str	r0, [r4, #52]	; 0x34
 8008808:	e7c0      	b.n	800878c <__sflush_r+0x1c>
 800880a:	2301      	movs	r3, #1
 800880c:	4628      	mov	r0, r5
 800880e:	47b0      	blx	r6
 8008810:	1c41      	adds	r1, r0, #1
 8008812:	d1c8      	bne.n	80087a6 <__sflush_r+0x36>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0c5      	beq.n	80087a6 <__sflush_r+0x36>
 800881a:	2b1d      	cmp	r3, #29
 800881c:	d001      	beq.n	8008822 <__sflush_r+0xb2>
 800881e:	2b16      	cmp	r3, #22
 8008820:	d101      	bne.n	8008826 <__sflush_r+0xb6>
 8008822:	602f      	str	r7, [r5, #0]
 8008824:	e7b1      	b.n	800878a <__sflush_r+0x1a>
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	e7ad      	b.n	800878c <__sflush_r+0x1c>
 8008830:	690f      	ldr	r7, [r1, #16]
 8008832:	2f00      	cmp	r7, #0
 8008834:	d0a9      	beq.n	800878a <__sflush_r+0x1a>
 8008836:	0793      	lsls	r3, r2, #30
 8008838:	bf18      	it	ne
 800883a:	2300      	movne	r3, #0
 800883c:	680e      	ldr	r6, [r1, #0]
 800883e:	bf08      	it	eq
 8008840:	694b      	ldreq	r3, [r1, #20]
 8008842:	eba6 0807 	sub.w	r8, r6, r7
 8008846:	600f      	str	r7, [r1, #0]
 8008848:	608b      	str	r3, [r1, #8]
 800884a:	f1b8 0f00 	cmp.w	r8, #0
 800884e:	dd9c      	ble.n	800878a <__sflush_r+0x1a>
 8008850:	4643      	mov	r3, r8
 8008852:	463a      	mov	r2, r7
 8008854:	6a21      	ldr	r1, [r4, #32]
 8008856:	4628      	mov	r0, r5
 8008858:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800885a:	47b0      	blx	r6
 800885c:	2800      	cmp	r0, #0
 800885e:	dc06      	bgt.n	800886e <__sflush_r+0xfe>
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008866:	81a3      	strh	r3, [r4, #12]
 8008868:	f04f 30ff 	mov.w	r0, #4294967295
 800886c:	e78e      	b.n	800878c <__sflush_r+0x1c>
 800886e:	4407      	add	r7, r0
 8008870:	eba8 0800 	sub.w	r8, r8, r0
 8008874:	e7e9      	b.n	800884a <__sflush_r+0xda>
 8008876:	bf00      	nop
 8008878:	20400001 	.word	0x20400001

0800887c <_fflush_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	690b      	ldr	r3, [r1, #16]
 8008880:	4605      	mov	r5, r0
 8008882:	460c      	mov	r4, r1
 8008884:	b1db      	cbz	r3, 80088be <_fflush_r+0x42>
 8008886:	b118      	cbz	r0, 8008890 <_fflush_r+0x14>
 8008888:	6983      	ldr	r3, [r0, #24]
 800888a:	b90b      	cbnz	r3, 8008890 <_fflush_r+0x14>
 800888c:	f000 f860 	bl	8008950 <__sinit>
 8008890:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <_fflush_r+0x48>)
 8008892:	429c      	cmp	r4, r3
 8008894:	d109      	bne.n	80088aa <_fflush_r+0x2e>
 8008896:	686c      	ldr	r4, [r5, #4]
 8008898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800889c:	b17b      	cbz	r3, 80088be <_fflush_r+0x42>
 800889e:	4621      	mov	r1, r4
 80088a0:	4628      	mov	r0, r5
 80088a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088a6:	f7ff bf63 	b.w	8008770 <__sflush_r>
 80088aa:	4b07      	ldr	r3, [pc, #28]	; (80088c8 <_fflush_r+0x4c>)
 80088ac:	429c      	cmp	r4, r3
 80088ae:	d101      	bne.n	80088b4 <_fflush_r+0x38>
 80088b0:	68ac      	ldr	r4, [r5, #8]
 80088b2:	e7f1      	b.n	8008898 <_fflush_r+0x1c>
 80088b4:	4b05      	ldr	r3, [pc, #20]	; (80088cc <_fflush_r+0x50>)
 80088b6:	429c      	cmp	r4, r3
 80088b8:	bf08      	it	eq
 80088ba:	68ec      	ldreq	r4, [r5, #12]
 80088bc:	e7ec      	b.n	8008898 <_fflush_r+0x1c>
 80088be:	2000      	movs	r0, #0
 80088c0:	bd38      	pop	{r3, r4, r5, pc}
 80088c2:	bf00      	nop
 80088c4:	08009a50 	.word	0x08009a50
 80088c8:	08009a70 	.word	0x08009a70
 80088cc:	08009a30 	.word	0x08009a30

080088d0 <std>:
 80088d0:	2300      	movs	r3, #0
 80088d2:	b510      	push	{r4, lr}
 80088d4:	4604      	mov	r4, r0
 80088d6:	e9c0 3300 	strd	r3, r3, [r0]
 80088da:	6083      	str	r3, [r0, #8]
 80088dc:	8181      	strh	r1, [r0, #12]
 80088de:	6643      	str	r3, [r0, #100]	; 0x64
 80088e0:	81c2      	strh	r2, [r0, #14]
 80088e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088e6:	6183      	str	r3, [r0, #24]
 80088e8:	4619      	mov	r1, r3
 80088ea:	2208      	movs	r2, #8
 80088ec:	305c      	adds	r0, #92	; 0x5c
 80088ee:	f7ff fd45 	bl	800837c <memset>
 80088f2:	4b05      	ldr	r3, [pc, #20]	; (8008908 <std+0x38>)
 80088f4:	6224      	str	r4, [r4, #32]
 80088f6:	6263      	str	r3, [r4, #36]	; 0x24
 80088f8:	4b04      	ldr	r3, [pc, #16]	; (800890c <std+0x3c>)
 80088fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80088fc:	4b04      	ldr	r3, [pc, #16]	; (8008910 <std+0x40>)
 80088fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008900:	4b04      	ldr	r3, [pc, #16]	; (8008914 <std+0x44>)
 8008902:	6323      	str	r3, [r4, #48]	; 0x30
 8008904:	bd10      	pop	{r4, pc}
 8008906:	bf00      	nop
 8008908:	080090bd 	.word	0x080090bd
 800890c:	080090df 	.word	0x080090df
 8008910:	08009117 	.word	0x08009117
 8008914:	0800913b 	.word	0x0800913b

08008918 <_cleanup_r>:
 8008918:	4901      	ldr	r1, [pc, #4]	; (8008920 <_cleanup_r+0x8>)
 800891a:	f000 b885 	b.w	8008a28 <_fwalk_reent>
 800891e:	bf00      	nop
 8008920:	0800887d 	.word	0x0800887d

08008924 <__sfmoreglue>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	2568      	movs	r5, #104	; 0x68
 8008928:	1e4a      	subs	r2, r1, #1
 800892a:	4355      	muls	r5, r2
 800892c:	460e      	mov	r6, r1
 800892e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008932:	f7ff fd77 	bl	8008424 <_malloc_r>
 8008936:	4604      	mov	r4, r0
 8008938:	b140      	cbz	r0, 800894c <__sfmoreglue+0x28>
 800893a:	2100      	movs	r1, #0
 800893c:	e9c0 1600 	strd	r1, r6, [r0]
 8008940:	300c      	adds	r0, #12
 8008942:	60a0      	str	r0, [r4, #8]
 8008944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008948:	f7ff fd18 	bl	800837c <memset>
 800894c:	4620      	mov	r0, r4
 800894e:	bd70      	pop	{r4, r5, r6, pc}

08008950 <__sinit>:
 8008950:	6983      	ldr	r3, [r0, #24]
 8008952:	b510      	push	{r4, lr}
 8008954:	4604      	mov	r4, r0
 8008956:	bb33      	cbnz	r3, 80089a6 <__sinit+0x56>
 8008958:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800895c:	6503      	str	r3, [r0, #80]	; 0x50
 800895e:	4b12      	ldr	r3, [pc, #72]	; (80089a8 <__sinit+0x58>)
 8008960:	4a12      	ldr	r2, [pc, #72]	; (80089ac <__sinit+0x5c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6282      	str	r2, [r0, #40]	; 0x28
 8008966:	4298      	cmp	r0, r3
 8008968:	bf04      	itt	eq
 800896a:	2301      	moveq	r3, #1
 800896c:	6183      	streq	r3, [r0, #24]
 800896e:	f000 f81f 	bl	80089b0 <__sfp>
 8008972:	6060      	str	r0, [r4, #4]
 8008974:	4620      	mov	r0, r4
 8008976:	f000 f81b 	bl	80089b0 <__sfp>
 800897a:	60a0      	str	r0, [r4, #8]
 800897c:	4620      	mov	r0, r4
 800897e:	f000 f817 	bl	80089b0 <__sfp>
 8008982:	2200      	movs	r2, #0
 8008984:	60e0      	str	r0, [r4, #12]
 8008986:	2104      	movs	r1, #4
 8008988:	6860      	ldr	r0, [r4, #4]
 800898a:	f7ff ffa1 	bl	80088d0 <std>
 800898e:	2201      	movs	r2, #1
 8008990:	2109      	movs	r1, #9
 8008992:	68a0      	ldr	r0, [r4, #8]
 8008994:	f7ff ff9c 	bl	80088d0 <std>
 8008998:	2202      	movs	r2, #2
 800899a:	2112      	movs	r1, #18
 800899c:	68e0      	ldr	r0, [r4, #12]
 800899e:	f7ff ff97 	bl	80088d0 <std>
 80089a2:	2301      	movs	r3, #1
 80089a4:	61a3      	str	r3, [r4, #24]
 80089a6:	bd10      	pop	{r4, pc}
 80089a8:	08009a2c 	.word	0x08009a2c
 80089ac:	08008919 	.word	0x08008919

080089b0 <__sfp>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	4b1b      	ldr	r3, [pc, #108]	; (8008a20 <__sfp+0x70>)
 80089b4:	4607      	mov	r7, r0
 80089b6:	681e      	ldr	r6, [r3, #0]
 80089b8:	69b3      	ldr	r3, [r6, #24]
 80089ba:	b913      	cbnz	r3, 80089c2 <__sfp+0x12>
 80089bc:	4630      	mov	r0, r6
 80089be:	f7ff ffc7 	bl	8008950 <__sinit>
 80089c2:	3648      	adds	r6, #72	; 0x48
 80089c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089c8:	3b01      	subs	r3, #1
 80089ca:	d503      	bpl.n	80089d4 <__sfp+0x24>
 80089cc:	6833      	ldr	r3, [r6, #0]
 80089ce:	b133      	cbz	r3, 80089de <__sfp+0x2e>
 80089d0:	6836      	ldr	r6, [r6, #0]
 80089d2:	e7f7      	b.n	80089c4 <__sfp+0x14>
 80089d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089d8:	b16d      	cbz	r5, 80089f6 <__sfp+0x46>
 80089da:	3468      	adds	r4, #104	; 0x68
 80089dc:	e7f4      	b.n	80089c8 <__sfp+0x18>
 80089de:	2104      	movs	r1, #4
 80089e0:	4638      	mov	r0, r7
 80089e2:	f7ff ff9f 	bl	8008924 <__sfmoreglue>
 80089e6:	6030      	str	r0, [r6, #0]
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d1f1      	bne.n	80089d0 <__sfp+0x20>
 80089ec:	230c      	movs	r3, #12
 80089ee:	4604      	mov	r4, r0
 80089f0:	603b      	str	r3, [r7, #0]
 80089f2:	4620      	mov	r0, r4
 80089f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f6:	4b0b      	ldr	r3, [pc, #44]	; (8008a24 <__sfp+0x74>)
 80089f8:	6665      	str	r5, [r4, #100]	; 0x64
 80089fa:	e9c4 5500 	strd	r5, r5, [r4]
 80089fe:	60a5      	str	r5, [r4, #8]
 8008a00:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008a04:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008a08:	2208      	movs	r2, #8
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a10:	f7ff fcb4 	bl	800837c <memset>
 8008a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a1c:	e7e9      	b.n	80089f2 <__sfp+0x42>
 8008a1e:	bf00      	nop
 8008a20:	08009a2c 	.word	0x08009a2c
 8008a24:	ffff0001 	.word	0xffff0001

08008a28 <_fwalk_reent>:
 8008a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a2c:	4680      	mov	r8, r0
 8008a2e:	4689      	mov	r9, r1
 8008a30:	2600      	movs	r6, #0
 8008a32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a36:	b914      	cbnz	r4, 8008a3e <_fwalk_reent+0x16>
 8008a38:	4630      	mov	r0, r6
 8008a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a3e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008a42:	3f01      	subs	r7, #1
 8008a44:	d501      	bpl.n	8008a4a <_fwalk_reent+0x22>
 8008a46:	6824      	ldr	r4, [r4, #0]
 8008a48:	e7f5      	b.n	8008a36 <_fwalk_reent+0xe>
 8008a4a:	89ab      	ldrh	r3, [r5, #12]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d907      	bls.n	8008a60 <_fwalk_reent+0x38>
 8008a50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a54:	3301      	adds	r3, #1
 8008a56:	d003      	beq.n	8008a60 <_fwalk_reent+0x38>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	47c8      	blx	r9
 8008a5e:	4306      	orrs	r6, r0
 8008a60:	3568      	adds	r5, #104	; 0x68
 8008a62:	e7ee      	b.n	8008a42 <_fwalk_reent+0x1a>

08008a64 <__swhatbuf_r>:
 8008a64:	b570      	push	{r4, r5, r6, lr}
 8008a66:	460e      	mov	r6, r1
 8008a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a6c:	b096      	sub	sp, #88	; 0x58
 8008a6e:	2900      	cmp	r1, #0
 8008a70:	4614      	mov	r4, r2
 8008a72:	461d      	mov	r5, r3
 8008a74:	da07      	bge.n	8008a86 <__swhatbuf_r+0x22>
 8008a76:	2300      	movs	r3, #0
 8008a78:	602b      	str	r3, [r5, #0]
 8008a7a:	89b3      	ldrh	r3, [r6, #12]
 8008a7c:	061a      	lsls	r2, r3, #24
 8008a7e:	d410      	bmi.n	8008aa2 <__swhatbuf_r+0x3e>
 8008a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a84:	e00e      	b.n	8008aa4 <__swhatbuf_r+0x40>
 8008a86:	466a      	mov	r2, sp
 8008a88:	f000 fb7e 	bl	8009188 <_fstat_r>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	dbf2      	blt.n	8008a76 <__swhatbuf_r+0x12>
 8008a90:	9a01      	ldr	r2, [sp, #4]
 8008a92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a9a:	425a      	negs	r2, r3
 8008a9c:	415a      	adcs	r2, r3
 8008a9e:	602a      	str	r2, [r5, #0]
 8008aa0:	e7ee      	b.n	8008a80 <__swhatbuf_r+0x1c>
 8008aa2:	2340      	movs	r3, #64	; 0x40
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	b016      	add	sp, #88	; 0x58
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}

08008aac <__smakebuf_r>:
 8008aac:	898b      	ldrh	r3, [r1, #12]
 8008aae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ab0:	079d      	lsls	r5, r3, #30
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	d507      	bpl.n	8008ac8 <__smakebuf_r+0x1c>
 8008ab8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	6123      	str	r3, [r4, #16]
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	6163      	str	r3, [r4, #20]
 8008ac4:	b002      	add	sp, #8
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}
 8008ac8:	ab01      	add	r3, sp, #4
 8008aca:	466a      	mov	r2, sp
 8008acc:	f7ff ffca 	bl	8008a64 <__swhatbuf_r>
 8008ad0:	9900      	ldr	r1, [sp, #0]
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7ff fca5 	bl	8008424 <_malloc_r>
 8008ada:	b948      	cbnz	r0, 8008af0 <__smakebuf_r+0x44>
 8008adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae0:	059a      	lsls	r2, r3, #22
 8008ae2:	d4ef      	bmi.n	8008ac4 <__smakebuf_r+0x18>
 8008ae4:	f023 0303 	bic.w	r3, r3, #3
 8008ae8:	f043 0302 	orr.w	r3, r3, #2
 8008aec:	81a3      	strh	r3, [r4, #12]
 8008aee:	e7e3      	b.n	8008ab8 <__smakebuf_r+0xc>
 8008af0:	4b0d      	ldr	r3, [pc, #52]	; (8008b28 <__smakebuf_r+0x7c>)
 8008af2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	6020      	str	r0, [r4, #0]
 8008af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008afc:	81a3      	strh	r3, [r4, #12]
 8008afe:	9b00      	ldr	r3, [sp, #0]
 8008b00:	6120      	str	r0, [r4, #16]
 8008b02:	6163      	str	r3, [r4, #20]
 8008b04:	9b01      	ldr	r3, [sp, #4]
 8008b06:	b15b      	cbz	r3, 8008b20 <__smakebuf_r+0x74>
 8008b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f000 fb4d 	bl	80091ac <_isatty_r>
 8008b12:	b128      	cbz	r0, 8008b20 <__smakebuf_r+0x74>
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	f023 0303 	bic.w	r3, r3, #3
 8008b1a:	f043 0301 	orr.w	r3, r3, #1
 8008b1e:	81a3      	strh	r3, [r4, #12]
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	431d      	orrs	r5, r3
 8008b24:	81a5      	strh	r5, [r4, #12]
 8008b26:	e7cd      	b.n	8008ac4 <__smakebuf_r+0x18>
 8008b28:	08008919 	.word	0x08008919

08008b2c <__malloc_lock>:
 8008b2c:	4770      	bx	lr

08008b2e <__malloc_unlock>:
 8008b2e:	4770      	bx	lr

08008b30 <__sfputc_r>:
 8008b30:	6893      	ldr	r3, [r2, #8]
 8008b32:	b410      	push	{r4}
 8008b34:	3b01      	subs	r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	6093      	str	r3, [r2, #8]
 8008b3a:	da07      	bge.n	8008b4c <__sfputc_r+0x1c>
 8008b3c:	6994      	ldr	r4, [r2, #24]
 8008b3e:	42a3      	cmp	r3, r4
 8008b40:	db01      	blt.n	8008b46 <__sfputc_r+0x16>
 8008b42:	290a      	cmp	r1, #10
 8008b44:	d102      	bne.n	8008b4c <__sfputc_r+0x1c>
 8008b46:	bc10      	pop	{r4}
 8008b48:	f7ff bd52 	b.w	80085f0 <__swbuf_r>
 8008b4c:	6813      	ldr	r3, [r2, #0]
 8008b4e:	1c58      	adds	r0, r3, #1
 8008b50:	6010      	str	r0, [r2, #0]
 8008b52:	7019      	strb	r1, [r3, #0]
 8008b54:	4608      	mov	r0, r1
 8008b56:	bc10      	pop	{r4}
 8008b58:	4770      	bx	lr

08008b5a <__sfputs_r>:
 8008b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	460f      	mov	r7, r1
 8008b60:	4614      	mov	r4, r2
 8008b62:	18d5      	adds	r5, r2, r3
 8008b64:	42ac      	cmp	r4, r5
 8008b66:	d101      	bne.n	8008b6c <__sfputs_r+0x12>
 8008b68:	2000      	movs	r0, #0
 8008b6a:	e007      	b.n	8008b7c <__sfputs_r+0x22>
 8008b6c:	463a      	mov	r2, r7
 8008b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b72:	4630      	mov	r0, r6
 8008b74:	f7ff ffdc 	bl	8008b30 <__sfputc_r>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d1f3      	bne.n	8008b64 <__sfputs_r+0xa>
 8008b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b80 <_vfiprintf_r>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	460c      	mov	r4, r1
 8008b86:	b09d      	sub	sp, #116	; 0x74
 8008b88:	4617      	mov	r7, r2
 8008b8a:	461d      	mov	r5, r3
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	b118      	cbz	r0, 8008b98 <_vfiprintf_r+0x18>
 8008b90:	6983      	ldr	r3, [r0, #24]
 8008b92:	b90b      	cbnz	r3, 8008b98 <_vfiprintf_r+0x18>
 8008b94:	f7ff fedc 	bl	8008950 <__sinit>
 8008b98:	4b7c      	ldr	r3, [pc, #496]	; (8008d8c <_vfiprintf_r+0x20c>)
 8008b9a:	429c      	cmp	r4, r3
 8008b9c:	d158      	bne.n	8008c50 <_vfiprintf_r+0xd0>
 8008b9e:	6874      	ldr	r4, [r6, #4]
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	0718      	lsls	r0, r3, #28
 8008ba4:	d55e      	bpl.n	8008c64 <_vfiprintf_r+0xe4>
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d05b      	beq.n	8008c64 <_vfiprintf_r+0xe4>
 8008bac:	2300      	movs	r3, #0
 8008bae:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb0:	2320      	movs	r3, #32
 8008bb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bb6:	2330      	movs	r3, #48	; 0x30
 8008bb8:	f04f 0b01 	mov.w	fp, #1
 8008bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bc0:	9503      	str	r5, [sp, #12]
 8008bc2:	46b8      	mov	r8, r7
 8008bc4:	4645      	mov	r5, r8
 8008bc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008bca:	b10b      	cbz	r3, 8008bd0 <_vfiprintf_r+0x50>
 8008bcc:	2b25      	cmp	r3, #37	; 0x25
 8008bce:	d154      	bne.n	8008c7a <_vfiprintf_r+0xfa>
 8008bd0:	ebb8 0a07 	subs.w	sl, r8, r7
 8008bd4:	d00b      	beq.n	8008bee <_vfiprintf_r+0x6e>
 8008bd6:	4653      	mov	r3, sl
 8008bd8:	463a      	mov	r2, r7
 8008bda:	4621      	mov	r1, r4
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f7ff ffbc 	bl	8008b5a <__sfputs_r>
 8008be2:	3001      	adds	r0, #1
 8008be4:	f000 80c2 	beq.w	8008d6c <_vfiprintf_r+0x1ec>
 8008be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bea:	4453      	add	r3, sl
 8008bec:	9309      	str	r3, [sp, #36]	; 0x24
 8008bee:	f898 3000 	ldrb.w	r3, [r8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 80ba 	beq.w	8008d6c <_vfiprintf_r+0x1ec>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c02:	9304      	str	r3, [sp, #16]
 8008c04:	9307      	str	r3, [sp, #28]
 8008c06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c0c:	46a8      	mov	r8, r5
 8008c0e:	2205      	movs	r2, #5
 8008c10:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008c14:	485e      	ldr	r0, [pc, #376]	; (8008d90 <_vfiprintf_r+0x210>)
 8008c16:	f000 faeb 	bl	80091f0 <memchr>
 8008c1a:	9b04      	ldr	r3, [sp, #16]
 8008c1c:	bb78      	cbnz	r0, 8008c7e <_vfiprintf_r+0xfe>
 8008c1e:	06d9      	lsls	r1, r3, #27
 8008c20:	bf44      	itt	mi
 8008c22:	2220      	movmi	r2, #32
 8008c24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c28:	071a      	lsls	r2, r3, #28
 8008c2a:	bf44      	itt	mi
 8008c2c:	222b      	movmi	r2, #43	; 0x2b
 8008c2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c32:	782a      	ldrb	r2, [r5, #0]
 8008c34:	2a2a      	cmp	r2, #42	; 0x2a
 8008c36:	d02a      	beq.n	8008c8e <_vfiprintf_r+0x10e>
 8008c38:	46a8      	mov	r8, r5
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	250a      	movs	r5, #10
 8008c3e:	9a07      	ldr	r2, [sp, #28]
 8008c40:	4641      	mov	r1, r8
 8008c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c46:	3b30      	subs	r3, #48	; 0x30
 8008c48:	2b09      	cmp	r3, #9
 8008c4a:	d969      	bls.n	8008d20 <_vfiprintf_r+0x1a0>
 8008c4c:	b360      	cbz	r0, 8008ca8 <_vfiprintf_r+0x128>
 8008c4e:	e024      	b.n	8008c9a <_vfiprintf_r+0x11a>
 8008c50:	4b50      	ldr	r3, [pc, #320]	; (8008d94 <_vfiprintf_r+0x214>)
 8008c52:	429c      	cmp	r4, r3
 8008c54:	d101      	bne.n	8008c5a <_vfiprintf_r+0xda>
 8008c56:	68b4      	ldr	r4, [r6, #8]
 8008c58:	e7a2      	b.n	8008ba0 <_vfiprintf_r+0x20>
 8008c5a:	4b4f      	ldr	r3, [pc, #316]	; (8008d98 <_vfiprintf_r+0x218>)
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	bf08      	it	eq
 8008c60:	68f4      	ldreq	r4, [r6, #12]
 8008c62:	e79d      	b.n	8008ba0 <_vfiprintf_r+0x20>
 8008c64:	4621      	mov	r1, r4
 8008c66:	4630      	mov	r0, r6
 8008c68:	f7ff fd14 	bl	8008694 <__swsetup_r>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d09d      	beq.n	8008bac <_vfiprintf_r+0x2c>
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295
 8008c74:	b01d      	add	sp, #116	; 0x74
 8008c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7a:	46a8      	mov	r8, r5
 8008c7c:	e7a2      	b.n	8008bc4 <_vfiprintf_r+0x44>
 8008c7e:	4a44      	ldr	r2, [pc, #272]	; (8008d90 <_vfiprintf_r+0x210>)
 8008c80:	4645      	mov	r5, r8
 8008c82:	1a80      	subs	r0, r0, r2
 8008c84:	fa0b f000 	lsl.w	r0, fp, r0
 8008c88:	4318      	orrs	r0, r3
 8008c8a:	9004      	str	r0, [sp, #16]
 8008c8c:	e7be      	b.n	8008c0c <_vfiprintf_r+0x8c>
 8008c8e:	9a03      	ldr	r2, [sp, #12]
 8008c90:	1d11      	adds	r1, r2, #4
 8008c92:	6812      	ldr	r2, [r2, #0]
 8008c94:	9103      	str	r1, [sp, #12]
 8008c96:	2a00      	cmp	r2, #0
 8008c98:	db01      	blt.n	8008c9e <_vfiprintf_r+0x11e>
 8008c9a:	9207      	str	r2, [sp, #28]
 8008c9c:	e004      	b.n	8008ca8 <_vfiprintf_r+0x128>
 8008c9e:	4252      	negs	r2, r2
 8008ca0:	f043 0302 	orr.w	r3, r3, #2
 8008ca4:	9207      	str	r2, [sp, #28]
 8008ca6:	9304      	str	r3, [sp, #16]
 8008ca8:	f898 3000 	ldrb.w	r3, [r8]
 8008cac:	2b2e      	cmp	r3, #46	; 0x2e
 8008cae:	d10e      	bne.n	8008cce <_vfiprintf_r+0x14e>
 8008cb0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb6:	d138      	bne.n	8008d2a <_vfiprintf_r+0x1aa>
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	f108 0802 	add.w	r8, r8, #2
 8008cbe:	1d1a      	adds	r2, r3, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	9203      	str	r2, [sp, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bfb8      	it	lt
 8008cc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ccc:	9305      	str	r3, [sp, #20]
 8008cce:	4d33      	ldr	r5, [pc, #204]	; (8008d9c <_vfiprintf_r+0x21c>)
 8008cd0:	2203      	movs	r2, #3
 8008cd2:	f898 1000 	ldrb.w	r1, [r8]
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f000 fa8a 	bl	80091f0 <memchr>
 8008cdc:	b140      	cbz	r0, 8008cf0 <_vfiprintf_r+0x170>
 8008cde:	2340      	movs	r3, #64	; 0x40
 8008ce0:	1b40      	subs	r0, r0, r5
 8008ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ce6:	9b04      	ldr	r3, [sp, #16]
 8008ce8:	f108 0801 	add.w	r8, r8, #1
 8008cec:	4303      	orrs	r3, r0
 8008cee:	9304      	str	r3, [sp, #16]
 8008cf0:	f898 1000 	ldrb.w	r1, [r8]
 8008cf4:	2206      	movs	r2, #6
 8008cf6:	482a      	ldr	r0, [pc, #168]	; (8008da0 <_vfiprintf_r+0x220>)
 8008cf8:	f108 0701 	add.w	r7, r8, #1
 8008cfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d00:	f000 fa76 	bl	80091f0 <memchr>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d037      	beq.n	8008d78 <_vfiprintf_r+0x1f8>
 8008d08:	4b26      	ldr	r3, [pc, #152]	; (8008da4 <_vfiprintf_r+0x224>)
 8008d0a:	bb1b      	cbnz	r3, 8008d54 <_vfiprintf_r+0x1d4>
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	3307      	adds	r3, #7
 8008d10:	f023 0307 	bic.w	r3, r3, #7
 8008d14:	3308      	adds	r3, #8
 8008d16:	9303      	str	r3, [sp, #12]
 8008d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1a:	444b      	add	r3, r9
 8008d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d1e:	e750      	b.n	8008bc2 <_vfiprintf_r+0x42>
 8008d20:	fb05 3202 	mla	r2, r5, r2, r3
 8008d24:	2001      	movs	r0, #1
 8008d26:	4688      	mov	r8, r1
 8008d28:	e78a      	b.n	8008c40 <_vfiprintf_r+0xc0>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	250a      	movs	r5, #10
 8008d2e:	4619      	mov	r1, r3
 8008d30:	f108 0801 	add.w	r8, r8, #1
 8008d34:	9305      	str	r3, [sp, #20]
 8008d36:	4640      	mov	r0, r8
 8008d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d3c:	3a30      	subs	r2, #48	; 0x30
 8008d3e:	2a09      	cmp	r2, #9
 8008d40:	d903      	bls.n	8008d4a <_vfiprintf_r+0x1ca>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0c3      	beq.n	8008cce <_vfiprintf_r+0x14e>
 8008d46:	9105      	str	r1, [sp, #20]
 8008d48:	e7c1      	b.n	8008cce <_vfiprintf_r+0x14e>
 8008d4a:	fb05 2101 	mla	r1, r5, r1, r2
 8008d4e:	2301      	movs	r3, #1
 8008d50:	4680      	mov	r8, r0
 8008d52:	e7f0      	b.n	8008d36 <_vfiprintf_r+0x1b6>
 8008d54:	ab03      	add	r3, sp, #12
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	4622      	mov	r2, r4
 8008d5a:	4b13      	ldr	r3, [pc, #76]	; (8008da8 <_vfiprintf_r+0x228>)
 8008d5c:	a904      	add	r1, sp, #16
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f3af 8000 	nop.w
 8008d64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008d68:	4681      	mov	r9, r0
 8008d6a:	d1d5      	bne.n	8008d18 <_vfiprintf_r+0x198>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	065b      	lsls	r3, r3, #25
 8008d70:	f53f af7e 	bmi.w	8008c70 <_vfiprintf_r+0xf0>
 8008d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d76:	e77d      	b.n	8008c74 <_vfiprintf_r+0xf4>
 8008d78:	ab03      	add	r3, sp, #12
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	4b0a      	ldr	r3, [pc, #40]	; (8008da8 <_vfiprintf_r+0x228>)
 8008d80:	a904      	add	r1, sp, #16
 8008d82:	4630      	mov	r0, r6
 8008d84:	f000 f888 	bl	8008e98 <_printf_i>
 8008d88:	e7ec      	b.n	8008d64 <_vfiprintf_r+0x1e4>
 8008d8a:	bf00      	nop
 8008d8c:	08009a50 	.word	0x08009a50
 8008d90:	08009a90 	.word	0x08009a90
 8008d94:	08009a70 	.word	0x08009a70
 8008d98:	08009a30 	.word	0x08009a30
 8008d9c:	08009a96 	.word	0x08009a96
 8008da0:	08009a9a 	.word	0x08009a9a
 8008da4:	00000000 	.word	0x00000000
 8008da8:	08008b5b 	.word	0x08008b5b

08008dac <_printf_common>:
 8008dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db0:	4691      	mov	r9, r2
 8008db2:	461f      	mov	r7, r3
 8008db4:	688a      	ldr	r2, [r1, #8]
 8008db6:	690b      	ldr	r3, [r1, #16]
 8008db8:	4606      	mov	r6, r0
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	bfb8      	it	lt
 8008dbe:	4613      	movlt	r3, r2
 8008dc0:	f8c9 3000 	str.w	r3, [r9]
 8008dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dc8:	460c      	mov	r4, r1
 8008dca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dce:	b112      	cbz	r2, 8008dd6 <_printf_common+0x2a>
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	f8c9 3000 	str.w	r3, [r9]
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	0699      	lsls	r1, r3, #26
 8008dda:	bf42      	ittt	mi
 8008ddc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008de0:	3302      	addmi	r3, #2
 8008de2:	f8c9 3000 	strmi.w	r3, [r9]
 8008de6:	6825      	ldr	r5, [r4, #0]
 8008de8:	f015 0506 	ands.w	r5, r5, #6
 8008dec:	d107      	bne.n	8008dfe <_printf_common+0x52>
 8008dee:	f104 0a19 	add.w	sl, r4, #25
 8008df2:	68e3      	ldr	r3, [r4, #12]
 8008df4:	f8d9 2000 	ldr.w	r2, [r9]
 8008df8:	1a9b      	subs	r3, r3, r2
 8008dfa:	42ab      	cmp	r3, r5
 8008dfc:	dc29      	bgt.n	8008e52 <_printf_common+0xa6>
 8008dfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008e02:	6822      	ldr	r2, [r4, #0]
 8008e04:	3300      	adds	r3, #0
 8008e06:	bf18      	it	ne
 8008e08:	2301      	movne	r3, #1
 8008e0a:	0692      	lsls	r2, r2, #26
 8008e0c:	d42e      	bmi.n	8008e6c <_printf_common+0xc0>
 8008e0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e12:	4639      	mov	r1, r7
 8008e14:	4630      	mov	r0, r6
 8008e16:	47c0      	blx	r8
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d021      	beq.n	8008e60 <_printf_common+0xb4>
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	68e5      	ldr	r5, [r4, #12]
 8008e20:	f003 0306 	and.w	r3, r3, #6
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	bf18      	it	ne
 8008e28:	2500      	movne	r5, #0
 8008e2a:	f8d9 2000 	ldr.w	r2, [r9]
 8008e2e:	f04f 0900 	mov.w	r9, #0
 8008e32:	bf08      	it	eq
 8008e34:	1aad      	subeq	r5, r5, r2
 8008e36:	68a3      	ldr	r3, [r4, #8]
 8008e38:	6922      	ldr	r2, [r4, #16]
 8008e3a:	bf08      	it	eq
 8008e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e40:	4293      	cmp	r3, r2
 8008e42:	bfc4      	itt	gt
 8008e44:	1a9b      	subgt	r3, r3, r2
 8008e46:	18ed      	addgt	r5, r5, r3
 8008e48:	341a      	adds	r4, #26
 8008e4a:	454d      	cmp	r5, r9
 8008e4c:	d11a      	bne.n	8008e84 <_printf_common+0xd8>
 8008e4e:	2000      	movs	r0, #0
 8008e50:	e008      	b.n	8008e64 <_printf_common+0xb8>
 8008e52:	2301      	movs	r3, #1
 8008e54:	4652      	mov	r2, sl
 8008e56:	4639      	mov	r1, r7
 8008e58:	4630      	mov	r0, r6
 8008e5a:	47c0      	blx	r8
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d103      	bne.n	8008e68 <_printf_common+0xbc>
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295
 8008e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e68:	3501      	adds	r5, #1
 8008e6a:	e7c2      	b.n	8008df2 <_printf_common+0x46>
 8008e6c:	2030      	movs	r0, #48	; 0x30
 8008e6e:	18e1      	adds	r1, r4, r3
 8008e70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e7a:	4422      	add	r2, r4
 8008e7c:	3302      	adds	r3, #2
 8008e7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e82:	e7c4      	b.n	8008e0e <_printf_common+0x62>
 8008e84:	2301      	movs	r3, #1
 8008e86:	4622      	mov	r2, r4
 8008e88:	4639      	mov	r1, r7
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	47c0      	blx	r8
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d0e6      	beq.n	8008e60 <_printf_common+0xb4>
 8008e92:	f109 0901 	add.w	r9, r9, #1
 8008e96:	e7d8      	b.n	8008e4a <_printf_common+0x9e>

08008e98 <_printf_i>:
 8008e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	7e09      	ldrb	r1, [r1, #24]
 8008ea4:	b085      	sub	sp, #20
 8008ea6:	296e      	cmp	r1, #110	; 0x6e
 8008ea8:	4617      	mov	r7, r2
 8008eaa:	4606      	mov	r6, r0
 8008eac:	4698      	mov	r8, r3
 8008eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008eb0:	f000 80b3 	beq.w	800901a <_printf_i+0x182>
 8008eb4:	d822      	bhi.n	8008efc <_printf_i+0x64>
 8008eb6:	2963      	cmp	r1, #99	; 0x63
 8008eb8:	d036      	beq.n	8008f28 <_printf_i+0x90>
 8008eba:	d80a      	bhi.n	8008ed2 <_printf_i+0x3a>
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	f000 80b9 	beq.w	8009034 <_printf_i+0x19c>
 8008ec2:	2958      	cmp	r1, #88	; 0x58
 8008ec4:	f000 8083 	beq.w	8008fce <_printf_i+0x136>
 8008ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ecc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008ed0:	e032      	b.n	8008f38 <_printf_i+0xa0>
 8008ed2:	2964      	cmp	r1, #100	; 0x64
 8008ed4:	d001      	beq.n	8008eda <_printf_i+0x42>
 8008ed6:	2969      	cmp	r1, #105	; 0x69
 8008ed8:	d1f6      	bne.n	8008ec8 <_printf_i+0x30>
 8008eda:	6820      	ldr	r0, [r4, #0]
 8008edc:	6813      	ldr	r3, [r2, #0]
 8008ede:	0605      	lsls	r5, r0, #24
 8008ee0:	f103 0104 	add.w	r1, r3, #4
 8008ee4:	d52a      	bpl.n	8008f3c <_printf_i+0xa4>
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6011      	str	r1, [r2, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	da03      	bge.n	8008ef6 <_printf_i+0x5e>
 8008eee:	222d      	movs	r2, #45	; 0x2d
 8008ef0:	425b      	negs	r3, r3
 8008ef2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008ef6:	486f      	ldr	r0, [pc, #444]	; (80090b4 <_printf_i+0x21c>)
 8008ef8:	220a      	movs	r2, #10
 8008efa:	e039      	b.n	8008f70 <_printf_i+0xd8>
 8008efc:	2973      	cmp	r1, #115	; 0x73
 8008efe:	f000 809d 	beq.w	800903c <_printf_i+0x1a4>
 8008f02:	d808      	bhi.n	8008f16 <_printf_i+0x7e>
 8008f04:	296f      	cmp	r1, #111	; 0x6f
 8008f06:	d020      	beq.n	8008f4a <_printf_i+0xb2>
 8008f08:	2970      	cmp	r1, #112	; 0x70
 8008f0a:	d1dd      	bne.n	8008ec8 <_printf_i+0x30>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	f043 0320 	orr.w	r3, r3, #32
 8008f12:	6023      	str	r3, [r4, #0]
 8008f14:	e003      	b.n	8008f1e <_printf_i+0x86>
 8008f16:	2975      	cmp	r1, #117	; 0x75
 8008f18:	d017      	beq.n	8008f4a <_printf_i+0xb2>
 8008f1a:	2978      	cmp	r1, #120	; 0x78
 8008f1c:	d1d4      	bne.n	8008ec8 <_printf_i+0x30>
 8008f1e:	2378      	movs	r3, #120	; 0x78
 8008f20:	4865      	ldr	r0, [pc, #404]	; (80090b8 <_printf_i+0x220>)
 8008f22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f26:	e055      	b.n	8008fd4 <_printf_i+0x13c>
 8008f28:	6813      	ldr	r3, [r2, #0]
 8008f2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f2e:	1d19      	adds	r1, r3, #4
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6011      	str	r1, [r2, #0]
 8008f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e08c      	b.n	8009056 <_printf_i+0x1be>
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f42:	6011      	str	r1, [r2, #0]
 8008f44:	bf18      	it	ne
 8008f46:	b21b      	sxthne	r3, r3
 8008f48:	e7cf      	b.n	8008eea <_printf_i+0x52>
 8008f4a:	6813      	ldr	r3, [r2, #0]
 8008f4c:	6825      	ldr	r5, [r4, #0]
 8008f4e:	1d18      	adds	r0, r3, #4
 8008f50:	6010      	str	r0, [r2, #0]
 8008f52:	0628      	lsls	r0, r5, #24
 8008f54:	d501      	bpl.n	8008f5a <_printf_i+0xc2>
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	e002      	b.n	8008f60 <_printf_i+0xc8>
 8008f5a:	0668      	lsls	r0, r5, #25
 8008f5c:	d5fb      	bpl.n	8008f56 <_printf_i+0xbe>
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	296f      	cmp	r1, #111	; 0x6f
 8008f62:	bf14      	ite	ne
 8008f64:	220a      	movne	r2, #10
 8008f66:	2208      	moveq	r2, #8
 8008f68:	4852      	ldr	r0, [pc, #328]	; (80090b4 <_printf_i+0x21c>)
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f70:	6865      	ldr	r5, [r4, #4]
 8008f72:	2d00      	cmp	r5, #0
 8008f74:	60a5      	str	r5, [r4, #8]
 8008f76:	f2c0 8095 	blt.w	80090a4 <_printf_i+0x20c>
 8008f7a:	6821      	ldr	r1, [r4, #0]
 8008f7c:	f021 0104 	bic.w	r1, r1, #4
 8008f80:	6021      	str	r1, [r4, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d13d      	bne.n	8009002 <_printf_i+0x16a>
 8008f86:	2d00      	cmp	r5, #0
 8008f88:	f040 808e 	bne.w	80090a8 <_printf_i+0x210>
 8008f8c:	4665      	mov	r5, ip
 8008f8e:	2a08      	cmp	r2, #8
 8008f90:	d10b      	bne.n	8008faa <_printf_i+0x112>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	07db      	lsls	r3, r3, #31
 8008f96:	d508      	bpl.n	8008faa <_printf_i+0x112>
 8008f98:	6923      	ldr	r3, [r4, #16]
 8008f9a:	6862      	ldr	r2, [r4, #4]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	bfde      	ittt	le
 8008fa0:	2330      	movle	r3, #48	; 0x30
 8008fa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fa6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008faa:	ebac 0305 	sub.w	r3, ip, r5
 8008fae:	6123      	str	r3, [r4, #16]
 8008fb0:	f8cd 8000 	str.w	r8, [sp]
 8008fb4:	463b      	mov	r3, r7
 8008fb6:	aa03      	add	r2, sp, #12
 8008fb8:	4621      	mov	r1, r4
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f7ff fef6 	bl	8008dac <_printf_common>
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d14d      	bne.n	8009060 <_printf_i+0x1c8>
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	b005      	add	sp, #20
 8008fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fce:	4839      	ldr	r0, [pc, #228]	; (80090b4 <_printf_i+0x21c>)
 8008fd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008fd4:	6813      	ldr	r3, [r2, #0]
 8008fd6:	6821      	ldr	r1, [r4, #0]
 8008fd8:	1d1d      	adds	r5, r3, #4
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6015      	str	r5, [r2, #0]
 8008fde:	060a      	lsls	r2, r1, #24
 8008fe0:	d50b      	bpl.n	8008ffa <_printf_i+0x162>
 8008fe2:	07ca      	lsls	r2, r1, #31
 8008fe4:	bf44      	itt	mi
 8008fe6:	f041 0120 	orrmi.w	r1, r1, #32
 8008fea:	6021      	strmi	r1, [r4, #0]
 8008fec:	b91b      	cbnz	r3, 8008ff6 <_printf_i+0x15e>
 8008fee:	6822      	ldr	r2, [r4, #0]
 8008ff0:	f022 0220 	bic.w	r2, r2, #32
 8008ff4:	6022      	str	r2, [r4, #0]
 8008ff6:	2210      	movs	r2, #16
 8008ff8:	e7b7      	b.n	8008f6a <_printf_i+0xd2>
 8008ffa:	064d      	lsls	r5, r1, #25
 8008ffc:	bf48      	it	mi
 8008ffe:	b29b      	uxthmi	r3, r3
 8009000:	e7ef      	b.n	8008fe2 <_printf_i+0x14a>
 8009002:	4665      	mov	r5, ip
 8009004:	fbb3 f1f2 	udiv	r1, r3, r2
 8009008:	fb02 3311 	mls	r3, r2, r1, r3
 800900c:	5cc3      	ldrb	r3, [r0, r3]
 800900e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009012:	460b      	mov	r3, r1
 8009014:	2900      	cmp	r1, #0
 8009016:	d1f5      	bne.n	8009004 <_printf_i+0x16c>
 8009018:	e7b9      	b.n	8008f8e <_printf_i+0xf6>
 800901a:	6813      	ldr	r3, [r2, #0]
 800901c:	6825      	ldr	r5, [r4, #0]
 800901e:	1d18      	adds	r0, r3, #4
 8009020:	6961      	ldr	r1, [r4, #20]
 8009022:	6010      	str	r0, [r2, #0]
 8009024:	0628      	lsls	r0, r5, #24
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	d501      	bpl.n	800902e <_printf_i+0x196>
 800902a:	6019      	str	r1, [r3, #0]
 800902c:	e002      	b.n	8009034 <_printf_i+0x19c>
 800902e:	066a      	lsls	r2, r5, #25
 8009030:	d5fb      	bpl.n	800902a <_printf_i+0x192>
 8009032:	8019      	strh	r1, [r3, #0]
 8009034:	2300      	movs	r3, #0
 8009036:	4665      	mov	r5, ip
 8009038:	6123      	str	r3, [r4, #16]
 800903a:	e7b9      	b.n	8008fb0 <_printf_i+0x118>
 800903c:	6813      	ldr	r3, [r2, #0]
 800903e:	1d19      	adds	r1, r3, #4
 8009040:	6011      	str	r1, [r2, #0]
 8009042:	681d      	ldr	r5, [r3, #0]
 8009044:	6862      	ldr	r2, [r4, #4]
 8009046:	2100      	movs	r1, #0
 8009048:	4628      	mov	r0, r5
 800904a:	f000 f8d1 	bl	80091f0 <memchr>
 800904e:	b108      	cbz	r0, 8009054 <_printf_i+0x1bc>
 8009050:	1b40      	subs	r0, r0, r5
 8009052:	6060      	str	r0, [r4, #4]
 8009054:	6863      	ldr	r3, [r4, #4]
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	2300      	movs	r3, #0
 800905a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800905e:	e7a7      	b.n	8008fb0 <_printf_i+0x118>
 8009060:	6923      	ldr	r3, [r4, #16]
 8009062:	462a      	mov	r2, r5
 8009064:	4639      	mov	r1, r7
 8009066:	4630      	mov	r0, r6
 8009068:	47c0      	blx	r8
 800906a:	3001      	adds	r0, #1
 800906c:	d0aa      	beq.n	8008fc4 <_printf_i+0x12c>
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	079b      	lsls	r3, r3, #30
 8009072:	d413      	bmi.n	800909c <_printf_i+0x204>
 8009074:	68e0      	ldr	r0, [r4, #12]
 8009076:	9b03      	ldr	r3, [sp, #12]
 8009078:	4298      	cmp	r0, r3
 800907a:	bfb8      	it	lt
 800907c:	4618      	movlt	r0, r3
 800907e:	e7a3      	b.n	8008fc8 <_printf_i+0x130>
 8009080:	2301      	movs	r3, #1
 8009082:	464a      	mov	r2, r9
 8009084:	4639      	mov	r1, r7
 8009086:	4630      	mov	r0, r6
 8009088:	47c0      	blx	r8
 800908a:	3001      	adds	r0, #1
 800908c:	d09a      	beq.n	8008fc4 <_printf_i+0x12c>
 800908e:	3501      	adds	r5, #1
 8009090:	68e3      	ldr	r3, [r4, #12]
 8009092:	9a03      	ldr	r2, [sp, #12]
 8009094:	1a9b      	subs	r3, r3, r2
 8009096:	42ab      	cmp	r3, r5
 8009098:	dcf2      	bgt.n	8009080 <_printf_i+0x1e8>
 800909a:	e7eb      	b.n	8009074 <_printf_i+0x1dc>
 800909c:	2500      	movs	r5, #0
 800909e:	f104 0919 	add.w	r9, r4, #25
 80090a2:	e7f5      	b.n	8009090 <_printf_i+0x1f8>
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1ac      	bne.n	8009002 <_printf_i+0x16a>
 80090a8:	7803      	ldrb	r3, [r0, #0]
 80090aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090b2:	e76c      	b.n	8008f8e <_printf_i+0xf6>
 80090b4:	08009aa1 	.word	0x08009aa1
 80090b8:	08009ab2 	.word	0x08009ab2

080090bc <__sread>:
 80090bc:	b510      	push	{r4, lr}
 80090be:	460c      	mov	r4, r1
 80090c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c4:	f000 f8a2 	bl	800920c <_read_r>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	bfab      	itete	ge
 80090cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090ce:	89a3      	ldrhlt	r3, [r4, #12]
 80090d0:	181b      	addge	r3, r3, r0
 80090d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090d6:	bfac      	ite	ge
 80090d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80090da:	81a3      	strhlt	r3, [r4, #12]
 80090dc:	bd10      	pop	{r4, pc}

080090de <__swrite>:
 80090de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e2:	461f      	mov	r7, r3
 80090e4:	898b      	ldrh	r3, [r1, #12]
 80090e6:	4605      	mov	r5, r0
 80090e8:	05db      	lsls	r3, r3, #23
 80090ea:	460c      	mov	r4, r1
 80090ec:	4616      	mov	r6, r2
 80090ee:	d505      	bpl.n	80090fc <__swrite+0x1e>
 80090f0:	2302      	movs	r3, #2
 80090f2:	2200      	movs	r2, #0
 80090f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f8:	f000 f868 	bl	80091cc <_lseek_r>
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	4632      	mov	r2, r6
 8009100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800910a:	463b      	mov	r3, r7
 800910c:	4628      	mov	r0, r5
 800910e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009112:	f000 b817 	b.w	8009144 <_write_r>

08009116 <__sseek>:
 8009116:	b510      	push	{r4, lr}
 8009118:	460c      	mov	r4, r1
 800911a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911e:	f000 f855 	bl	80091cc <_lseek_r>
 8009122:	1c43      	adds	r3, r0, #1
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	bf15      	itete	ne
 8009128:	6560      	strne	r0, [r4, #84]	; 0x54
 800912a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800912e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009132:	81a3      	strheq	r3, [r4, #12]
 8009134:	bf18      	it	ne
 8009136:	81a3      	strhne	r3, [r4, #12]
 8009138:	bd10      	pop	{r4, pc}

0800913a <__sclose>:
 800913a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800913e:	f000 b813 	b.w	8009168 <_close_r>
	...

08009144 <_write_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4605      	mov	r5, r0
 8009148:	4608      	mov	r0, r1
 800914a:	4611      	mov	r1, r2
 800914c:	2200      	movs	r2, #0
 800914e:	4c05      	ldr	r4, [pc, #20]	; (8009164 <_write_r+0x20>)
 8009150:	6022      	str	r2, [r4, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	f7f7 fcf6 	bl	8000b44 <_write>
 8009158:	1c43      	adds	r3, r0, #1
 800915a:	d102      	bne.n	8009162 <_write_r+0x1e>
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	b103      	cbz	r3, 8009162 <_write_r+0x1e>
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	bd38      	pop	{r3, r4, r5, pc}
 8009164:	20000844 	.word	0x20000844

08009168 <_close_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	2300      	movs	r3, #0
 800916c:	4c05      	ldr	r4, [pc, #20]	; (8009184 <_close_r+0x1c>)
 800916e:	4605      	mov	r5, r0
 8009170:	4608      	mov	r0, r1
 8009172:	6023      	str	r3, [r4, #0]
 8009174:	f7f7 fd10 	bl	8000b98 <_close>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_close_r+0x1a>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	b103      	cbz	r3, 8009182 <_close_r+0x1a>
 8009180:	602b      	str	r3, [r5, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	20000844 	.word	0x20000844

08009188 <_fstat_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	2300      	movs	r3, #0
 800918c:	4c06      	ldr	r4, [pc, #24]	; (80091a8 <_fstat_r+0x20>)
 800918e:	4605      	mov	r5, r0
 8009190:	4608      	mov	r0, r1
 8009192:	4611      	mov	r1, r2
 8009194:	6023      	str	r3, [r4, #0]
 8009196:	f7f7 fd0a 	bl	8000bae <_fstat>
 800919a:	1c43      	adds	r3, r0, #1
 800919c:	d102      	bne.n	80091a4 <_fstat_r+0x1c>
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	b103      	cbz	r3, 80091a4 <_fstat_r+0x1c>
 80091a2:	602b      	str	r3, [r5, #0]
 80091a4:	bd38      	pop	{r3, r4, r5, pc}
 80091a6:	bf00      	nop
 80091a8:	20000844 	.word	0x20000844

080091ac <_isatty_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	2300      	movs	r3, #0
 80091b0:	4c05      	ldr	r4, [pc, #20]	; (80091c8 <_isatty_r+0x1c>)
 80091b2:	4605      	mov	r5, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	6023      	str	r3, [r4, #0]
 80091b8:	f7f7 fd08 	bl	8000bcc <_isatty>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d102      	bne.n	80091c6 <_isatty_r+0x1a>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	b103      	cbz	r3, 80091c6 <_isatty_r+0x1a>
 80091c4:	602b      	str	r3, [r5, #0]
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	20000844 	.word	0x20000844

080091cc <_lseek_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4605      	mov	r5, r0
 80091d0:	4608      	mov	r0, r1
 80091d2:	4611      	mov	r1, r2
 80091d4:	2200      	movs	r2, #0
 80091d6:	4c05      	ldr	r4, [pc, #20]	; (80091ec <_lseek_r+0x20>)
 80091d8:	6022      	str	r2, [r4, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	f7f7 fd00 	bl	8000be0 <_lseek>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d102      	bne.n	80091ea <_lseek_r+0x1e>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	b103      	cbz	r3, 80091ea <_lseek_r+0x1e>
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	20000844 	.word	0x20000844

080091f0 <memchr>:
 80091f0:	b510      	push	{r4, lr}
 80091f2:	b2c9      	uxtb	r1, r1
 80091f4:	4402      	add	r2, r0
 80091f6:	4290      	cmp	r0, r2
 80091f8:	4603      	mov	r3, r0
 80091fa:	d101      	bne.n	8009200 <memchr+0x10>
 80091fc:	2300      	movs	r3, #0
 80091fe:	e003      	b.n	8009208 <memchr+0x18>
 8009200:	781c      	ldrb	r4, [r3, #0]
 8009202:	3001      	adds	r0, #1
 8009204:	428c      	cmp	r4, r1
 8009206:	d1f6      	bne.n	80091f6 <memchr+0x6>
 8009208:	4618      	mov	r0, r3
 800920a:	bd10      	pop	{r4, pc}

0800920c <_read_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4605      	mov	r5, r0
 8009210:	4608      	mov	r0, r1
 8009212:	4611      	mov	r1, r2
 8009214:	2200      	movs	r2, #0
 8009216:	4c05      	ldr	r4, [pc, #20]	; (800922c <_read_r+0x20>)
 8009218:	6022      	str	r2, [r4, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	f7f7 fc74 	bl	8000b08 <_read>
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	d102      	bne.n	800922a <_read_r+0x1e>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	b103      	cbz	r3, 800922a <_read_r+0x1e>
 8009228:	602b      	str	r3, [r5, #0]
 800922a:	bd38      	pop	{r3, r4, r5, pc}
 800922c:	20000844 	.word	0x20000844

08009230 <_init>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	bf00      	nop
 8009234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009236:	bc08      	pop	{r3}
 8009238:	469e      	mov	lr, r3
 800923a:	4770      	bx	lr

0800923c <_fini>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	bf00      	nop
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr
